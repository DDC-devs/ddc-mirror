ok
ok

ok

-- No effects
* TRANSFORM INFORMATION: 
    fix 5:
        Prune:
            Removed:        3;
        Prune:
            Removed:        0

weakeff [Alloc r0#] in
weakclo {[r0#]} in
weakeff [Alloc r0#] in
weakclo {[r0#]} in
weakeff [Alloc r0#] in
weakclo {[r0#]} in
()

-- Doesn't work for anonymous
* TRANSFORM INFORMATION: 
    fix 5:
        Prune:
            Removed:        0

let ^ : Int r0# = 5 [r0#] () in
let ^ : Int r0# = 5 [r0#] () in
let ^ : Int r0# = 5 [r0#] () in
()

-- Works for unnamed
* TRANSFORM INFORMATION: 
    fix 5:
        Prune:
            Removed:        3;
        Prune:
            Removed:        0

weakeff [Alloc r0#] in
weakclo {[r0#]} in
weakeff [Alloc r0#] in
weakclo {[r0#]} in
weakeff [Alloc r0#] in
weakclo {[r0#]} in
()


-- Use one of them
* TRANSFORM INFORMATION: 
    fix 5:
        Prune:
            Removed:        1;
        Prune:
            Removed:        0

weakeff [Alloc r0#] in
weakclo {[r0#]} in
let y : Int r0# = 5 [r0#] () in
y

-- Make mutable, but no update
* TRANSFORM INFORMATION: 
    fix 5:
        Prune:
            Removed:        1;
        Prune:
            Removed:        0

private r with {w : Mutable r} in
weakeff [Alloc r] in
weakclo {[r]} in
()

-- Do an update - update name is unmentioned
* TRANSFORM INFORMATION: 
    fix 5:
        Prune:
            Removed:        0

private r with {w : Mutable r} in
let x : Int r = 5 [r] () in
let y : Unit
      = updateInt [r] [r] <w> x (2 [r] ()) in
copyInt [r] [r0#] x

-- Doesn't cascade, because of the weakclo produced.
* TRANSFORM INFORMATION: 
    fix 5:
        Prune:
            Removed:        1;
        Prune:
            Removed:        1;
        Prune:
            Removed:        1;
        Prune:
            Removed:        0

weakeff [Read r0# + Alloc r0#] in
weakclo {[r0#]} in
weakeff [Read r0# + Alloc r0#] in
weakclo {[r0#]; addInt} in
weakeff [Read r0# + Alloc r0#] in
weakclo {[r0#]; addInt; subInt} in
()

