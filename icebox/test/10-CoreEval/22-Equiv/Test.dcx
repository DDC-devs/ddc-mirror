-- Constructors are equivalent
:tequiv Int Int


-- Alpha equiv of binders
:tequiv.. 
([a : Data]. a)
([b : Data]. b);;


-- Region handles.
:tequiv..
(Read r0#)
(Read r0#);;


-- Commutativty of effect sum.
:tequiv..
(Read  r0# + Write r1#)
(Write r1# + Read  r0#);;


-- Associativity of effect sum.
:tequiv..
(Read  r0# + (Write r1# + Read r2#))
((Write r1# + Read  r0#) + Read r2#);;


-- Idempotence of effect sum.
:tequiv..
(Read r0# + Read r0#)
(Read r0#);;


-- Alpha equiv of type constructor.
:tequiv..
([c1 : Region ~> Data]. [r : Region]. c1 r)
([c2 : Region ~> Data]. [r : Region]. c2 r);;


-- Alpha equiv of higher kinded constructors in a sum.
:tequiv..
([c1 : Region ~> Effect]. [r : Region]. Int r -(c1 r | Empty)> Int r)
([c2 : Region ~> Effect]. [r : Region]. Int r -(c2 r | Empty)> Int r);;


-- Alpha equiv of higher kinded constructors in a sum.
:tequiv..
([c1 : Region ~> Effect]. [c2 : Data ~> Effect]. [r : Region]. [a : Data].
 Int r -(c1 r | Empty)> Int r)
([c2 : Region ~> Effect]. [c1 : Data ~> Effect]. [r : Region]. [a : Data].
 Int r -(c2 r | Empty)> Int r);;


-- Alpha equiv of higher kinded constructors in a sum.
:tequiv..
([c1 : Region ~> Effect]. [c2 : Data ~> Effect]. [r : Region]. [a : Data].
 Int r -(c1 r + c2 a | Empty)> Int r)
([c2 : Region ~> Effect]. [c1 : Data ~> Effect]. [r : Region]. [a : Data].
 Int r -(c2 r + c1 a | Empty)> Int r);;


-- Alpha equiv of higher kinded constructors in a sum.
-- This equivalence relies on the slow sum equivalence check as the components
-- have different names and are also in a different porder.
:tequiv..
([c1 : Region ~> Effect]. [c2 : Data ~> Effect]. [r : Region]. [a : Data].
 Int r -(c1 r + c2 a | Empty)> Int r)
([c2 : Region ~> Effect]. [c1 : Data ~> Effect]. [r : Region]. [a : Data].
 Int r -(c1 a + c2 r | Empty)> Int r);;


-- Alpha equiv of single binder in an effect sum.
:tequiv..
([^  : Region]. Int ^0 -(Read ^0 | Empty)> Int ^0)
([r1 : Region]. Int r1 -(Read r1 | Empty)> Int r1);;


-- Alpha equiv of second binder in an effect sum.
:tequiv..
([r1 ^  : Region]. Unit -(Read r1 + Read ^0 | Empty)> Unit)
([r1 r2 : Region]. Unit -(Read r1 + Read r2 | Empty)> Unit);;


-- Alpha equiv with multiple anonymous binders.
:tequiv..
([r1 : Region]. [a : Data]. List r1 Unit)
([^  : Region]. [^ : Data]. List ^1 Unit);;


-- False: constructors are different
:tequiv Int Unit


-- False: Different effects
:tequiv..
(Read r0#)
(Read r1#);;


-- False: Second effect is larger.
:tequiv..
(Read r0#)
(Read r0# + Read r1#);;


-- False: binders have differing kinds.
:tequiv..
([a : Region]. Unit)
([a : Data]. Unit);;


-- False: binders have same kind but they are in different positions.
:tequiv..
([r : Region]. [a b : Data]. List r (List r a))
([r : Region]. [a b : Data]. List r (List r b));;


-- False: effect args don't match.
:tequiv..
([c1 : Region ~> Effect]. [r : Region]. Int r -(c1 r | Empty)> Int r)
([c2 : Region ~> Effect]. [r : Region]. Int r -(Pure   | Empty)> Int r);;


-- False: Effect components don't match.
:tequiv..
([c1 : Region ~> Effect]. [r : Region]. Int r -(c1 r | Empty)> Int r)
([c2 : Region ~> Effect]. [r : Region]. Int r -(Pure   | Empty)> Int r);;


-- False: Binder in different order
:tequiv..
([a : Data]. [b : Data]. b)
([b : Data]. [a : Data]. b);;
