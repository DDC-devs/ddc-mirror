-- Construct an empty list.
Nil [r0#] [Int r0#] ()


-- Construct a single element list.
:eval..
Cons [r0#] [Int r0#]
        (5 [r0#] ())
        (Nil [r0#] [Int r0#] ());;


-- Contruct and destruct a single element list.
:eval..
let i   = 5 [r0#] () in
let nil = Nil  [r0#] [Int r0#] () in
let xx  = Cons [r0#] [Int r0#] i nil in
case xx of {
        Nil           -> 0 [r0#] ();
        Cons x xs     -> x
};;


-- Match on an integer literal.
:eval..
case 5 [r0#] () of {
        5  -> 1 [r0#] ();
        _  -> 0 [r0#] ();
};;


-- Fall through to default alternative.
:eval..
case 5 [r0#] () of {
        6 -> 1 [r0#] ();
        _ -> 0 [r0#] ();
};;


-- Handle forget cast around the discriminant.
:eval..
private r with {w : Global r} in
let xx = forget use [r] w in 
        Cons [r] [Int r] (5 [r] ()) (Nil [r] [Int r] ()) in
case xx of {
        Nil      -> 0 [r0#] ();
        Cons x _ -> addInt [:r r0# r0#:] x (0 [r0#] ());
};;


-- Should be able to build a pair of unit
-- All unit values share a single location.
:eval..
case Pr [r0#] [Unit] [Int r0#] () (5 [r0#] ()) of {
        Pr x _ -> x
};;


-- Let-bound loc gets redirected to a static store location,
-- and the integer constructor needs to accept this.
:eval..
let x : Int r1# = 2 [r1#] () in
let ^ : Unit    = () in
let ^ : [^ : Region].Unit -(Alloc ^0 | Empty)> Int ^0 = 1 in
let ^           = ^0 [r0#] ^1 in
addInt [r0#] [r1#] [r2#] ^0 x;;
