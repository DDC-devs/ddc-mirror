{-# OPTIONS -no-implicit-prelude #-}

module	Data.Bool

import	Base
 	Data.BoolU

-- | Box a boolean value.
boxBool :: Bool# -> Bool
boxBool b
 = case b of
 	true#	-> True
	false#	-> False


-- | Negation.
not :: Bool -> Bool
not b
 = case b of
 	True	-> False
	False   -> True


infixr 4 &&
(&&) a b
 = case a of 
	False	-> False
	_	-> case b of 
			True	-> True
			_	-> False

infixr 3 ||
(||) a b
 = case a of 
 	True	-> True
	_	-> case b of 
			True	-> True
			_	-> False
 
xor a b
 = case a of
 	True	-> case b of 
			True	-> False
			False	-> True
			
	False	-> case b of
			True	-> True
			False	-> False
				

-- | Always true. 
otherwise :: Bool
otherwise = True


