

import	Base
import	Data.Int
import 	Data.Int32U
import	Control.Imperative
import	Control.Exception

-- An array of unboxed ints
data ArrayU %r a

-- Create a new array and fill it with this value
--	If the first arg is 1 the array is anchored and is not coppied around by the Garbage collector
--	If the first 
foreign import "primArrayU_Int_new"
 arrayUI_new :: Int{read} -> Int{read} -> ArrayU Int
 
foreign import "primArrayU_Int_get"
 arrayUI_get :: ArrayU Int {read} -> Int{read} -> Int

foreign import "primArrayU_Int_set"
 arrayUI_set :: ArrayU (Int{write}) {read} -> Int{read} -> Int -> ()
 
foreign import "primArrayU_Int_dump"
 arrayUI_dump :: ArrayU Int {read} -> ()
 
foreign import "primArrayU_Int_size"
 arrayUI_size :: ArrayU Int {read} -> Int

foreign import "primArrayU_Int_fill"
 arrayUI_fill :: ArrayU (Int {write}) {read} -> Int{read} -> ()

-- A fast, unchecked read from an array
foreign import "primArrayInt32_peek"
 arrayUI_peek  
 	:: forall %r1 %r2 %r3 %r4
	.  ArrayU %r1 (Int %r2) -> Int32# -(!e1 $c1)> Int32#
	:- !e1 = !{ !Read %r1; !Read %r2; !Read %r3; !Read %r4 }
	,  $c1 =  x : ArrayU %r1 Int32#
	:$ Obj -> Int32# -> Int32#

-- A fast, unchecked write to an array.
foreign import "primArrayInt32_poke"
 arrayUI_poke
 	:: forall %r1 %r2 %r3 %r4
	.  ArrayU %r1 (Int %r2) -> Int32# -($c1)> Int32# -(!e2 $c2)> ()
	:- $c1 = ${ a :  ArrayU %r1 (Int %r2) }
	,  $c2 = ${ a :  ArrayU %r1 (Int %r2); ix : Int32# }
	,  !e2 = !{ !Read %r1; !Write %r2; !Read %r3; !Read %r4 }
	,  Mutable %r2
	:$ Obj -> Int32# -> Int32# -> Obj

foreign import "primArrayU_Int_getBufPtr"
 arrayUI_getBufPtr :: (ArrayU Int){read} -> Ptr# Int32#


-- This is very slow
--
arrayUI_fill2 array x
 = do 	i	= 0
 	size	= arrayUI_size array
	
	while (i < size) do 
		arrayUI_set array i x;
		i	:= i + 1;


