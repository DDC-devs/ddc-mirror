
-- Efficient Sets
-- Adapted from the GHC library, written by Daan Leijen
--
-- The implementation of 'Set' is based on /size balanced/ binary trees (or
-- trees of /bounded balance/) as described by:
--
--    * Stephen Adams, \"/Efficient sets: a balancing act/\",
--	Journal of Functional Programming 3(4):553-562, October 1993,
--	<http://www.swiss.ai.mit.edu/~adams/BB/>.
--
--    * J. Nievergelt and E.M. Reingold,
--	\"/Binary search trees of bounded balance/\",
--	SIAM journal of computing 2(1), March 1973.
--
-- Note that the implementation is /left-biased/ -- the elements of a
-- first argument are always preferred to the second, for example in
-- 'union' or 'insert'.  Of course, left-biasing can only be observed
-- when equality is an equivalence relation instead of structural
-- equality.

export	type Set

import	Base
	Class.Ord
	Class.Num
	Data.Int
	Data.List
	
-----
-- | A set of values a
data Set a    
	= Tip 
	| Bin 	Int 		-- size
		a 		-- elem
		(Set a) 	-- left
		(Set a) 	-- right

project Set a 
 with { empty; singleton; 
 	size;
	insertF; memberF;
	toList }

------
delta	= 4
ratio	= 2

-- | /O(1)/. The empty set.
empty	:: () -> Set a
empty () = Tip

-- | /O(1)/. Create a singleton set.
singleton :: a -> Set a
singleton x 
 = Bin 1 x Tip Tip

-- | /O(1)/. The number of elements in the set.
size :: Set a -> Int
size t
  = case t of
      Tip           -> 0
      Bin sz x l r  -> sz

-- | /O(log n)/. Insert an element in a set.
-- If the set already contains an element equal to the given value,
-- it is replaced with the new value.
insertF :: Set a -> (a -> a -> Ordering) -> a -> Set a
insertF	t compare x
 = case t of
      Tip -> singleton x
      Bin sz y l r
          -> case compare x y of
               LT -> balance y (insertF l compare x) r
               GT -> balance y l (insertF r compare x)
               EQ -> Bin sz x l r

-- | /O(log n)/. Is the element in the set?
memberF :: Set a -> (a -> a -> Ordering) -> a -> Bool
memberF t compare x
  = case t of
      Tip -> False
      Bin sz y l r
          -> case compare x y of
               LT -> memberF l compare x
               GT -> memberF r compare x
               EQ -> True       

-- | /O(n)/. Convert a set to a list
toList :: Set a -> [a]
toList set = set_foldr (:) [] set

-- | /O(n)/. Post-order fold.
set_foldr :: (a -> b -> b) -> b -> Set a -> b
set_foldr f z Tip           = z
set_foldr f z (Bin _ x l r) = set_foldr f (f x (set_foldr f z r)) l


-- Internals --------------------------------------------------------------------------------------
-- The bin constructor maintains the size of the tree
bin :: a -> Set a -> Set a -> Set a
bin x l r
  = Bin (size l + size r + 1) x l r

balance :: a -> Set a -> Set a -> Set a
balance x l r
 = do	sizeL = size l
	sizeR = size r
	sizeX = sizeL + sizeR + 1
	
	match 
		| sizeL + sizeR <= 1		
		= Bin sizeX x l r
						
		| sizeR >= delta * sizeL
		= rotateL x l r

  		\= Bin sizeX x l r

-- Tree rotations
singleL x1 t1 (Bin _ x2 t2 t3)  
	= bin x2 (bin x1 t1 t2) t3

singleR x1 (Bin _ x2 t1 t2) t3  
	= bin x2 t1 (bin x1 t2 t3)

doubleL x1 t1 (Bin _ x2 (Bin _ x3 t2 t3) t4) 
	= bin x3 (bin x1 t1 t2) (bin x2 t3 t4)

doubleR x1 (Bin _ x2 t1 (Bin _ x3 t2 t3)) t4 
	= bin x3 (bin x2 t1 t2) (bin x1 t3 t4)

rotateL x l r@(Bin _ _ ly ry)
	| size&{Set a} ly < ratio *size&{Set a} ry 
	= singleL x l r

	\= doubleL x l r

rotateR x l@(Bin _ _ ly ry) r
	| size&{Set a} ry < ratio*size&{Set a} ly 
	= singleR x l r

	\= doubleR x l r

