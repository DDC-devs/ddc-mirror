-- Imports
import Base;
import Data.Bool;
import Data.Int32U;
import Class.Copy;
import Class.Eq;
import Class.Num;
import Class.Ord;
import Class.Update;

-- Pragmas

-- Infix
infix  5 <, <=, >=, > ;

-- Data

-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances
instance Copy (Base.Int %rSD161) where
{
        copy     = Data.Int.instance_Copy_Int_copy;
}

instance Updatable (Base.Int %rSD162) where
{
        (:=)     = Data.Int.primInt32_update;
}

instance Eq (Base.Int %rSD163) where
{
        (==)     = Data.Int.primInt32_eq;
        
        (/=)     = Data.Int.primInt32_neq;
}

instance Ord (Base.Int %rSD164) where
{
        (>)      = Data.Int.primInt32_gt;
        
        (<)      = Data.Int.primInt32_lt;
        
        (>=)     = Data.Int.primInt32_ge;
        
        (<=)     = Data.Int.primInt32_le;
}

instance Num (Base.Int %rSD165) where
{
        (+)      = Data.Int.primInt32_add;
        
        (-)      = Data.Int.primInt32_sub;
        
        (*)      = Data.Int.primInt32_mul;
        
        (/)      = Data.Int.primInt32_div;
        
        mod      = Data.Int.primInt32_mod;
        
        negate   = Data.Int.primInt32_neg;
}

instance Accum (Base.Int %rSD166) where
{
        (+=)     = Data.Int.instance_Accum_Int_PsEq;
}


-- Foreign imports
foreign import extern "_boxInt32"
 boxInt32
        :: forall %r1
        .  Base.Int32# -> Base.Int %r1
        :$ Base.Int32# -> Base.Obj;

foreign import extern "_unboxInt32"
 unboxInt32
        :: forall %r1
        .  Base.Int %r1 -(Base.!Read %r1)> Base.Int32#
        :$ Base.Obj -> Base.Int32#;

foreign import extern "primInt32_neg"
 primInt32_neg
        :: elaborate Base.Int -> Base.Int ;

foreign import extern "primInt32_add"
 primInt32_add
        :: elaborate Base.Int -> Base.Int -> Base.Int ;

foreign import extern "primInt32_sub"
 primInt32_sub
        :: elaborate Base.Int -> Base.Int -> Base.Int ;

foreign import extern "primInt32_mul"
 primInt32_mul
        :: elaborate Base.Int -> Base.Int -> Base.Int ;

foreign import extern "primInt32_div"
 primInt32_div
        :: elaborate Base.Int -> Base.Int -> Base.Int ;

foreign import extern "primInt32_mod"
 primInt32_mod
        :: elaborate Base.Int -> Base.Int -> Base.Int ;

foreign import extern "primInt32_eq"
 primInt32_eq
        :: elaborate Base.Int -> Base.Int -> Data.Bool.Bool ;

foreign import extern "primInt32_neq"
 primInt32_neq
        :: elaborate Base.Int -> Base.Int -> Data.Bool.Bool ;

foreign import extern "primInt32_gt"
 primInt32_gt
        :: elaborate Base.Int -> Base.Int -> Data.Bool.Bool ;

foreign import extern "primInt32_lt"
 primInt32_lt
        :: elaborate Base.Int -> Base.Int -> Data.Bool.Bool ;

foreign import extern "primInt32_ge"
 primInt32_ge
        :: elaborate Base.Int -> Base.Int -> Data.Bool.Bool ;

foreign import extern "primInt32_le"
 primInt32_le
        :: elaborate Base.Int -> Base.Int -> Data.Bool.Bool ;

foreign import extern "primInt32_update"
 primInt32_update
        :: elaborate (mutable Base.Int) -> Base.Int -> Base.Unit ;


-- Binds
foreign import extern instance_Copy_Int_copy
        :: forall %r0 %r1
        .  Base.Int %r1 -(!e0)> Base.Int %r0
        :- !e0        = Base.!Read %r1
        :$ Base.Data -> Base.Data;
        
foreign import extern instance_Accum_Int_PsEq
        :: forall %r0 %r1
        .  Base.Int %r0 -> Base.Int %r1 -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %r0; Base.!Read %r1; Base.!Write %r0}
        ,  $c0        = a : %r0
        ,  Base.Mutable %r0
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import extern (<>)
        :: forall %r0 %r1 !e0 $c0
        .  Base.Int %r0 -> (Base.Int %r0 -(!e0 $c0)> Base.Int %r1) -(!e1 $c1)> Base.Unit
        :- !e1        = !{!e0; Base.!Read %r0; Base.!Read %r1; Base.!Write %r0}
        ,  $c1        = x : %r0
        ,  Base.Mutable %r0
        :$ Base.Data -> Base.Thunk -> Base.Data;
        
foreign import extern inc
        :: forall %r0 %r1
        .  Base.Int %r0 -(!e0)> Base.Int %r1
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        

