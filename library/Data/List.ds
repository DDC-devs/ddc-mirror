{-# OPTIONS -no-implicit-prelude #-}

module 	Data.List
export	
{	-- Basic Functions 
 	(:); (++);
	head; tail; last; 
	length;
	
	-- Predicates on lists
	isNil; 
	elemBy;	
	equalsBy; 
	
	-- Building Lists
	replicate; iterateL;
	
	-- List Transformations 
	map; mapL; for; for_; 
	mapAccumL; mapAccumR; 
	reverse; intersperse; 
	intercalate; 
	partition;
		
	-- Folds 
	foldl1; foldr1; 
	
	-- Special Folds 
	concat; concatL; concatMap; concatMapL;
	sum; sumDestructive; 
	product;
	and; or; 
	any; all;
	maximumBy; minimumBy;
	
	-- Unfolding 
	unfoldr;
	
	-- Insertion and Lookup
	(!!); insertBy; find;
	
	-- Zipping and Unzipping
	zipWith; zipWith_;
	
	-- Extracting Sublists
	take; takeWhile; 
	drop;
	filter; filterL;
	deleteBy;
	span; breakList;
	groupBy;
	inits; tails; 
	subsequences; nonEmptySubsequences;

	-- Int Ranges
	rangeInt;     rangeIntStep;
	rangeIntL;    rangeIntStepL;
	rangeInfIntL; rangeInfIntStepL;
	infListIntL;
	
	-- Maybe Utils ----------------
	mapMaybe;
	maybeToList;
	
	-- String Utils ---------------
	charListOfString;
	charListOfFlatString;
	concatStrings;
}
	
import	Base
	Base.Thunk
	Class.Functor
	Class.Foldable
	Data.Function
	Data.Bool
	Data.Ref
	Data.Tuple
	Data.Maybe
	Data.Numeric.Int32
	Data.String
	Control.Exception


-- The List Type --------------------------------------------------------------
data	List a
	= Nil
	| Cons 	{ x 	:: a
		; xs	:: List a }

project List a where
	head 		= head
	tail		= tail
	last		= last
	length		= length
	isNil		= isNil
	elemBy xx f x	= elemBy f x xx


-- Basic Functions ------------------------------------------------------------
infixr 6 : 
(:)  x xs 	= Cons   x xs


-- | Append two lists. 
--   This uses time and stack space proportional to the length
--   of the first list.
(++) :: [a] -> [a] -> [a]
(++) [] b	= b
(++) (x:xs) b	= x : (xs ++ b)


-- | Take the first element of a list.
head :: [a] -> a
head (x:xs)	= x


-- | Take the elements after the first one.
tail ::	[a] -> [a]
tail (x:xs)	= xs


-- | Take the last element from a list.
last :: [a] -> a
last (x:[])	= x
last (x:xs)	= last xs


-- | Find the length of a list.
length xs	= go xs 0
  where
    go [] n = n
    go (x:xs) n = go xs (n+1)


-- Predicates on Lists --------------------------------------------------------
-- | Check if a list is empty.
isNil :: [a] -> Bool
isNil Nil	= True
isNil _		= False


-- | Check if this element is in the list
elemBy :: (a -> a -> Bool) -> a -> [a] -> Bool
elemBy eqF z []		= False
elemBy eqF z (x:xs)
	| eqF z x	= True
			\= elemBy eqF z xs


-- | Check if all the list elements are equal wrt another list.
equalsBy :: (a -> a -> Bool) -> [a] -> [a] -> Bool
equalsBy p []     []    = True
equalsBy p []     _     = False
equalsBy p _      []    = False
equalsBy p (x:xs) (y:ys)
	| p x y		= equalsBy p xs ys
	| otherwise	= False
	
	
-- Building Lists -------------------------------------------------------------
-- | Replicate an an element a number of times.
replicate :: Int -> a -> [a]
replicate 0 x	= []
replicate i x	= x : replicate (i - 1) x


-- | Keep applying this function to a value and return an infinite
--   list of the results.
iterateL :: (a -> a) -> a -> [a]
iterateL f a	
	= a : iterateL@ f (f a)


-- Mapping --------------------------------------------------------------------
instance Functor (List %r) where
	map f []	= []
	map f (x : xs)	= f x : map f xs

	map_ f []	= ()
	map_ f (x : xs)	= do { f x; map_ f xs }
	
-- | A spine-lazy map
mapL :: (a -> b) -> [a] -> [b]
mapL f []	= []
mapL f (x:xs)	= f x : ((mapL f) @ xs)


-- | A map with the arguments switched around
for :: [a] -> (a -> b) -> [b]
for xx f = map f xx


-- | map_ with the arugments switched around
for_ :: [a] -> (a -> b) -> ()
for_ xx f 
 = 	map_ f xx


-- | The 'mapAccumL' function behaves like a combination of 'map' and
--   'foldl'; it applies a function to each element of a list, passing
--    an accumulating parameter from left to right, and returning a final
--    value of this accumulator together with the new list.
mapAccumL :: (acc -> x -> (acc, y)) 	-- Function of elt of input list
                                    	-- and accumulator, returning new
                                    	-- accumulator and elt of result list
          -> acc            		-- Initial accumulator 
          -> [x]            		-- Input list
          -> (acc, [y])     		-- Final accumulator and result list

mapAccumL _ s []        =  (s, [])
mapAccumL f s (x:xs)    =  (s'', y:ys)
        where (s',  y)  = f s x
              (s'', ys) = mapAccumL f s' xs


-- | The 'mapAccumR' function behaves like a combination of 'map' and
--   'foldr'; it applies a function to each element of a list, passing
--   an accumulating parameter from right to left, and returning a final
--   value of this accumulator together with the new list.
mapAccumR :: (acc -> x -> (acc, y))     -- Function of elt of input list
                                        -- and accumulator, returning new
                                        -- accumulator and elt of result list
            -> acc              	-- Initial accumulator
            -> [x]             		-- Input list
            -> (acc, [y])               -- Final accumulator and result list

mapAccumR _ s []        =  (s, [])
mapAccumR f s (x:xs)    =  (s'', y:ys)
        where (s',  ys) = mapAccumR f s xs
              (s'', y)  = f s' x
             

-- Transformations ------------------------------------------------------------
-- | Reverse the elements of this list
reverse :: [a] -> [a]
reverse []	= []
reverse (x:xs)	= reverse xs ++ [x]


-- | Intersperse an element between every member of this list
intersperse :: a -> [a] -> [a]
intersperse s []	= []
intersperse _ [x]       = [x]
intersperse s (x:xs)	= x : s : intersperse s xs


-- | Insert the list xs in between the lists in xss and concatenate the result.
intercalate :: [a] -> [[a]] -> [a]
intercalate xs xss = concat (intersperse xs xss)

-- | Transpose the rows and columns of a maxtrix represent as a list
--   For example,
-- > transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]
--
-- Currently broken due to
--	#162: Handle patterns in left of list comprehension generators.
--
-- transpose               :: [[a]] -> [[a]]
-- transpose []             = []
-- transpose ([]   : xss)   = transpose xss
-- transpose ((x:xs) : xss) = (x : [h | (h:_) <- xss]) : transpose (xs : [ t | (_:t) <- xss])


-- | The 'partition' function takes a predicate a list and returns
--   the pair of lists of elements which do and do not satisfy the
--   predicate, respectively; i.e.,
-- > partition p xs == (filter p xs, filter (\x -> not $ p x) xs)
partition  :: (a -> Bool) -> [a] -> ([a],[a])
partition p xs = foldr (select p) ([],[]) xs
 where
	select :: (a -> Bool) -> a -> ([a], [a]) -> ([a], [a])
	select p x (ts,fs) 
		| p x       = (x:ts,fs)
		| otherwise = (ts, x:fs)


-- Folding --------------------------------------------------------------------
instance Foldable (List %r) where
	foldl f state []	= state
	foldl f state (x:xs)	= foldl f (f state x) xs

	foldr f state []	= state
	foldr f state (x:xs)	= f x (foldr f state xs)


-- | 'foldr1' is a variant of 'foldr' that has no starting value argument,
-- 	and thus must be applied to non-empty lists.
foldr1 :: (a -> a -> a) -> [a] -> a
foldr1 _ [x]     =  x
foldr1 f (x:xs)  =  f x (foldr1 f xs)
foldr1 _ []      =  error "foldr1: empty list"


-- | 'foldl1' is a variant of 'foldl' that has no starting value argument,
-- and thus must be applied to non-empty lists.
foldl1 :: (a -> a -> a) -> [a] -> a
foldl1 f (x:xs)  =  foldl f x xs
foldl1 _ []      =  error "foldl1: empty list"


-- Special Folds --------------------------------------------------------------
-- | Concatenate all these lists together
concat :: [[a]] -> [a]
concat []	= []
concat (x:xs)	= x ++ concat xs


-- | Concat all these lists together (lazy spine)
concatL :: [[a]] -> [a]
concatL []	= []
concatL (x:xs)	= (++)@ x (concatL @ xs)


-- | Map a function across this list and concatenate the elements together
concatMap :: (a -> [b]) -> [a] -> [b]
concatMap f []		= []
concatMap f (x:xs)	= f x ++ concatMap f xs


-- | Map a function across this list and concatenate the elements
--   together (lazy spine)
concatMapL :: (a -> [b]) -> [a] -> [b]
concatMapL f []		= []
concatMapL f (x:xs)	= (++)@ (f x) (concatMapL @ f xs)


-- | Check whether all the elements in this list are True
and :: [Bool] -> Bool
and []		= True
and (x:xs)	= x && and xs


-- | Check whether any of the elements in this list are True
or :: [Bool] -> Bool
or []		= False
or (x:xs)	= x || or xs


-- | Check whether all the elements of this list map to True
all :: (a -> Bool) -> [a] -> Bool
all f xs	= and $ map f xs


-- | Check whether any of the elements of this list map to True
any :: (a -> Bool) -> [a] -> Bool
any f xs	= or $ map f xs


-- | Sum up the elements of this int list.
--   TODO: This leaks a Mutable constraint on the returned Int.
sumDestructive :: [Int] -> Int
sumDestructive xx
 = do 	count	= 0; 
	for_ xx 
	 (\x ->	count := count + x)
	count


-- | Sum up the elements of this int list, recursively
sum :: [Int] -> Int
sum xx = sum' 0 xx
 where	sum' :: Int -> [Int] -> Int
	sum' n []	= n
	sum' n (x:xs)	= sum' (n+x) xs


-- | Multiply all the elements of this int list together
product :: [Int] -> Int
product xs 
	= foldl (*) 1 xs


-- | Extract the largest value from a list, using the provided ordering relation.
maximumBy :: (a -> a -> Ordering) -> [a] -> a
maximumBy _ []       = error "List.maximumBy: empty list"
maximumBy cmp (a:as) = foldl (\x y -> case cmp x y of { GT -> x; _  -> y}) a as


-- | Extract the smallest value from a list, using the provided ordering relation.
minimumBy :: (a -> a -> Ordering) -> [a] -> a
minimumBy _ []       = error "List.minimumBy: empty list"
minimumBy cmp (a:as) = foldl (\x y -> case cmp x y of { GT -> y; _  -> x}) a as


-- Unfolding ------------------------------------------------------------------
unfoldr :: (b -> Maybe (a, b)) -> b -> [a]
unfoldr f b  =
  case f b of
   Just (a, new_b) -> a : unfoldr f new_b
   Nothing        -> []


-- Insertion and Lookup -------------------------------------------------------
-- | The 'insert' function takes an element and a list and inserts the
--   element into the list at the last position where it is still less
--   than or equal to the next element.  In particular, if the list
--   is sorted before the call, the result will also be sorted.
--   It is a special case of 'insertBy', which allows the programmer to
--   supply their own comparison function.
-- insert :: Ord a => a -> [a] -> [a]
-- insert e ls = insertBy (compare) e ls

-- | Select a numbered element of a list
(!!) ::	[a] -> Int -> a
(!!) (x:xs) 0	= x
(!!) (x:xs) n	= xs !! (n - 1)


-- | The non-overloaded version of 'insert'.
insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]
insertBy _   x [] = [x]
insertBy cmp x ys@(y:ys')
 = case cmp x y of
     GT -> y : insertBy cmp x ys'
     _  -> x : ys

-- | Find the first element in the list that matches this predicate.
find :: (a -> Bool) -> [a] -> Maybe a;
find f (x:xs)	
	| f x	=  Just x
		\= find f xs
		
find f _	= Nothing


-- Zipping and Unzipping ------------------------------------------------------
-- | Zip these lists together with a function
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith f [] yy		= []
zipWith f xx []		= []
zipWith f (x:xs) (y:ys)
 	= f x y : zipWith f xs ys
 
 
-- | Zip these lists together with a function, ignoring the return value
zipWith_ :: (a -> b -> ()) -> [a] -> [b] -> ()
zipWith_ f []  yy	= ()
zipWith_ f xx  []	= ()
zipWith_ f (x:xs) (y:ys)	
 = do	f x y
 	zipWith_ f xs ys


-- Extracting Sublists --------------------------------------------------------
-- | Take the first few elements from the front of this this list
take :: Int -> [a] -> [a]
take 0 xx	= []
take _ []	= []
take n (x:xs)	= x : take (n - 1) xs


-- | Take elements from the list while the predicate matches
takeWhile :: (a -> Bool) -> [a] -> [a]
takeWhile _ []          =  []
takeWhile p (x:xs) 
            | p x       =  x : takeWhile p xs
            | otherwise =  []


-- | Drop the first few elements from the front of this list
drop :: Int -> [a] -> [a];
drop 0 xx	= xx
drop n (_:xs)	= drop (n - 1) xs


-- | Return a list of all the elements that match this predicate.
filter :: (a -> Bool) -> [a] -> [a]
filter f []	= []
filter f (x:xs)	
	| f x	=  x : filter f xs
		\= filter f xs


-- | Lazily produce a list of all the elements that match this predicate.
filterL	:: (a -> Bool) -> [a] -> [a]
filterL f []	= []
filterL f (x:xs)
	| f x	= x : filterL @ f xs
		\= filterL @ f xs


-- | Delete all the elements which match this one, using the provided
--   equality function.
deleteBy :: (a -> a -> Bool) -> a -> [a] -> [a]
deleteBy eqF y	[] 	= []
deleteBy eqF y	(x:xs)
	|  eqF x y	= xs
			\= x : deleteBy eqF y xs


-- | 'span', applied to a predicate @p@ and a list @xs@, returns a tuple where
--   first element is longest prefix (possibly empty) of @xs@ of elements that
--   satisfy @p@ and second element is the remainder of the list:
-- 
-- > span (< 3) [1,2,3,4,1,2,3,4] == ([1,2],[3,4,1,2,3,4])
-- > span (< 9) [1,2,3] == ([1,2,3],[])
-- > span (< 0) [1,2,3] == ([],[1,2,3])
-- 
-- 'span' @p xs@ is equivalent to @('takeWhile' p xs, 'dropWhile' p xs)@
span :: (a -> Bool) -> [a] -> ([a], [a])
span _ xs@[]             =  (xs, xs)
span p xs@(x:xs')
         | p x
	 = do 	(ys, zs) = span p xs' 
		(x:ys, zs)

         | otherwise    =  ([], x:xs')


-- | 'break', applied to a predicate @p@ and a list @xs@, returns a tuple where
--   first element is longest prefix (possibly empty) of @xs@ of elements that
--   /do not satisfy/ @p@ and second element is the remainder of the list:
-- 
-- > break (> 3) [1,2,3,4,1,2,3,4] == ([1,2,3],[4,1,2,3,4])
-- > break (< 9) [1,2,3] == ([],[1,2,3])
-- > break (> 9) [1,2,3] == ([1,2,3],[])
--
-- 'break' @p@ is equivalent to @'span' ('not' . p)@.
breakList :: (a -> Bool) -> [a] -> ([a],[a])
breakList _ xs@[]       =  (xs, xs)
breakList p xs@(x:xs')
	| p x        =  ([],xs)
	| otherwise  
	= do	(ys,zs) = breakList p xs'
		(x:ys,zs)


-- | The 'group' function takes a list and returns a list of lists such
--   that the concatenation of the result is equal to the argument.  Moreover,
--   each sublist in the result contains only equal elements.  For example,
--
-- > group "Mississippi" = ["M","i","ss","i","ss","i","pp","i"]
--
-- It is a special case of 'groupBy', which allows the programmer to supply
-- their own equality test.
-- group                   :: Eq a => [a] -> [[a]]
-- group                   =  groupBy (==)


-- | The 'groupBy' function is the non-overloaded version of 'group'.
groupBy :: (a -> a -> Bool) -> [a] -> [[a]]
groupBy _  []  =  []
groupBy eq (x:xs)       
	=  (x:ys) : groupBy eq zs
	where (ys,zs) = span (eq x) xs


-- | The 'inits' function returns all initial segments of the argument,
--   shortest first.  For example,
--
-- > inits "abc" == ["","a","ab","abc"]
--
inits :: [a] -> [[a]]
inits []	=  [[]]
inits (x:xs)	=  [[]] ++ map (\xx -> x : xx) (inits xs)


-- | The 'tails' function returns all final segments of the argument,
--   longest first.  For example,
--
-- > tails "abc" == ["abc", "bc", "c",""]
--
tails :: [a] -> [[a]]
tails []	 =  [[]]
tails xxs@(_:xs) =  xxs : tails xs


-- | The 'subsequences' function returns the list of all subsequences of
--   the argument.
--
-- > subsequences "abc" == ["","a","b","ab","c","ac","bc","abc"]
subsequences :: [a] -> [[a]]
subsequences xs  =  [] : nonEmptySubsequences xs

-- | The 'nonEmptySubsequences' function returns the list of all subsequences
--   of the argument, except for the empty list.
--
-- > nonEmptySubsequences "abc" == ["a","b","ab","c","ac","bc","abc"]
nonEmptySubsequences :: [a] -> [[a]]
nonEmptySubsequences []      =  []
nonEmptySubsequences (x:xs)  
	=  [x] : foldr f [] (nonEmptySubsequences xs)
  	where f ys r = ys : (x : ys) : r


-- Int Ranges -----------------------------------------------------------------
-- | Return a list of ints in this range
rangeInt :: Int -> Int -> [Int]
rangeInt x y =
	if x > y
	 then []
	 else rangeIntUp x y
 where
	rangeIntUp x y
		| x > y	=  []
			\= x : rangeIntUp (x + 1) y


-- | Return a list of ints in this range, with step size determined by the
--   difference between the first and second element.
rangeIntStep :: Int -> Int -> Int -> [Int]
rangeIntStep x next y =
	case (compare x next, compare x y) of
		(EQ, _)		-> infListIntL x
		(LT, LT)	-> rangeIntStepUp x y
		(GT, GT)	-> rangeIntStepDown x y
		_		-> []

 where	step = next - x
	rangeIntStepUp x' y'
		| x' > y'	= []
				\= x' : rangeIntStepUp (x' + step) y'
	rangeIntStepDown x' y'
		| x' < y'	= []
				\= x' : rangeIntStepDown (x' + step) y'


-- | Return a list of ints in this range (lazy spine)
rangeIntL :: Int -> Int -> [Int]
rangeIntL x y =
	if x > y
	 then rangeIntDownL x y
	 else rangeIntUpL x y

 where	rangeIntUpL x y
		| x > y		=  []
				\= x : rangeIntUpL @ (x + 1) y
	rangeIntDownL x y
		| x < y		=  []
				\= x : rangeIntDownL @ (x - 1) y


-- | Return a list of ints in this range, with step size determined by the
--   difference between the first and second element.
rangeIntStepL :: Int -> Int -> Int -> [Int]
rangeIntStepL x next y =
	case (compare x next, compare x y) of
		(EQ, _)		-> infListIntL x
		(LT, LT)	-> rangeIntStepUpL x y
		(GT,  GT)	-> rangeIntStepDownL x y
		_		-> []

 where	step = next - x
	rangeIntStepUpL x' y'
		| x' > y'	= []
				\= x' : rangeIntStepUpL @ (x' + step) y'
	rangeIntStepDownL x' y'
		| x' < y'	= []
				\= x' : rangeIntStepDownL @ (x' + step) y'


-- | Return the infinite list of ints starting from this value (lazy spine)
rangeInfIntL :: Int -> [Int]
rangeInfIntL x
	= x : rangeInfIntL @ (x + 1)

rangeInfIntStepL :: Int -> Int -> [Int]
rangeInfIntStepL x next =
	if x == next
         then infListIntL x
         else rangeInfIntStepInnerL x

 where	step = next - x
	rangeInfIntStepInnerL x' = x' : rangeInfIntStepInnerL @ (x' + step)


infListIntL :: Int -> [Int]
infListIntL x =
        x : infListIntL @ x



-- List Copying  --------------------------------------------------------------
instance Copy (List Int) where
 copy xx	
  = case xx of
  	[]	-> []
	(x:xs)	-> copy x : copy xs


-- Maybe Utils ----------------------------------------------------------------
-- TODO: These should be in Data.Maybe, but they're defined here to break
--       recursive import dependencies.
mapMaybe :: (a -> Maybe b) -> [a] -> [b]
mapMaybe _ [] 		= []
mapMaybe f (x:xs)
 = do	rs = mapMaybe f xs
	case f x of
		Nothing -> rs
		Just r  -> r : rs

maybeToList :: Maybe a -> [a]
maybeToList Nothing	= []
maybeToList (Just x)	= [x]


-- String Utils ---------------------------------------------------------------
-- TODO: These should be in Data.String, but they're defined here to break
--       recursive import dependencies.

-- | Convert a string to a list of charaters.
charListOfString :: String -> [Char]
charListOfString (SAppend s1 s2)
	= charListOfString s1 ++ charListOfString s2

charListOfString (SChunk fs)
	= charListOfFlatString' fs 0 (fs.length) []
	

-- | Convert a FlatString to a list of characters.
charListOfFlatString :: FlatString -> [Char]
charListOfFlatString fs
 	= charListOfFlatString' fs 0 (fs.length) []
 
charListOfFlatString' :: FlatString -> Int -> Int -> [Char] -> [Char]
charListOfFlatString' fs ix max xs
    | ix < max = charListOfFlatString' fs ix (max - 1) (fs.index (max - 1) : xs)
    \= xs

concatStrings :: [String] -> String
concatStrings []	= ""
concatStrings (str : rest)
	= str % concatStrings rest



