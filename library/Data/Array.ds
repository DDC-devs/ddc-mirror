
export	array_new
	array_size
	index
	indexR
	
import	Base
import	Data.Int
import	Data.Ref
import	Data.List

-- An array of boxed balues
data Array %r1 a;


-- Create a new array and point all the cells to this initial object.
foreign import "primArray_new"
 array_new  	:: forall a %r1 %r2
	 	.  Int %r1 -> a -(!e1 $c1)> Array %r2 a
		:- !e1 = !{ !Read %r1 }
		,  $c1 = size : Int %r1
		,  Mutable %r2

-- Return the number of elements in an array
foreign import "primArray_size"
 array_size	:: forall a %r1 %r2
		.  Array %r1 a -(!e1)> Int %r2
		:- !e1 = !{ !Read %r1 }
 
-- Return the element at this index
--	the array.(i) syntax is desugared into this.
foreign import "primArray_index"
 index		:: forall a %r1 %r2 
	 	.  Array %r1 a -> Int %r2 -(!e1)> a
		:- !e1 = !{ !Read %r1; !Read %r2 }
 	
-- Return a reference to this index. 
--	If this reference is updated then that cell in the array is pointed to the new object.
--	the array#(i) syntax is desuated into this
foreign import "primArray_indexR"
 indexR		:: forall a %r1 %r2 
	 	.  Array %r1 a -> Int %r2 -(!e1 $c1)> Ref %r1 a
		:- !e1 = !{ !Read %r1; !Read %r2 }
		,  $c1 = a : Array %r1 a

{-
array_map_ f array
	= array_map2_ f array 0 (array_size array)
-}
-----
mapArray_ f array
 	= mapArray2_ f array 0 (array_size array);
 
mapArray2_ f array i max
 = match {
 	| i >= max	= ();
	
	\= do { f array.(i); 
		mapArray2_ f array (i + 1) max;
	};
 };


-----
mapArrayIx_ f array
	= mapArrayIx2_ f array 0 (array_size array);
 
mapArrayIx2_ f array i max
 = match {
 	| i	>= max	= ();
	
	\= do {	f array.(i) i; 
		mapArrayIx2_ f array (i + 1) max;
	};
 };
	
	
-----
mapArrayToList  f array = mapArrayToList' f array 0;
mapArrayToList' f array i
 = if i >= array_size array
 	then []
	else f (array.(i)) : mapArrayToList' f array (i + 1);


array_fold :: (a -> b -> b) -> b -> Array a -> b
array_fold f acc array 
 	= array_fold' f acc array 0
	
array_fold' f acc array ix
	| ix >= array_size array
	= acc
	
	\= array_fold' f (f array.(ix) acc) array (ix + 1)
	


