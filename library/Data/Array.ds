{-# OPTIONS -no-implicit-prelude #-}

-- | Arrays of boxed values.
module 	Data.Array 

export	index
	indexR
	
import	Base
	Data.Int
	Data.Ref
	Data.List

project Array a 
 with {	new;  newm; 
	size; index;
	generate;
	fromList; toList; 
	forList;  forUpdate; ifor_ }


-- An array of boxed values.
data Array %r1 a;

-- Primitives -------------------------------------------------------------------------------------
-- These are implemented by the runtime system.

-- | Create a new array and point all the cells to this initial object.
foreign import "primArray_new"
 new  	:: Int{read} -> a -> Array a


-- | Same as `new` but constrain the array to be mutable.
foreign import "primArray_new"
 newm	:: forall %r1 %r2. Int %r1 -> a -(!e1)> Array %r2 a
	:- !e1 = !Read %r1
	,  Mutable %r2


-- | Return the number of elements in an array.
foreign import "primArray_size"
 size	:: Array a {read} -> Int


-- | Return the element at this index.
--	The array.(i) syntax is desugared into this.
foreign import "primArray_index"
 index	:: Array a {read} -> Int{read} -> a

 	
-- | Return a reference to this index. 
--     The reference refers to the location in the array, 
--     so updating the reference also updates the array.
---    The array#(i) syntax is desugared into this.
foreign import "primArray_indexR"
 indexR	:: Array %r1 a {read} -> Int %r2 {read} -> Ref %r1 a


-- Instances ------------------------------------------------------------------
instance Functor Array where
 map_ f arr	= go 0
  where len	= arr.size
	go ix
	 | ix >= len	= ()
	 \= do	f arr.(ix)
		go (ix + 1)


instance Foldable Array where
 foldl f acc arr 
  = go acc 0
  where	len	= arr.size
	go ix acc
	 | ix >= len	= acc
	 \= go (ix + 1) (f acc arr.(ix))


-- Constructors ---------------------------------------------------------------
-- | Generate an array given its size and a function to compute each element.
generate :: Int -> (Int -> a) -> Array a
generate len get = go 0 
 where	arr	= newm len (error "undefined")
	go ix
	 | ix >= len	= arr
	 \= do	arr#(ix) #= get ix
		go (ix + 1)
	

-- Conversion -----------------------------------------------------------------
-- | Create an array from a list.
fromList :: [a] -> Array a
fromList xx 
 = go 0 xx
 where	len	= length xx
	arr 	= newm len (error "undefined")

	go ix []
	 | ix == len	= arr
	
	go ix (x:xs)  
	 = do	arr#(ix)  #= x
		go (ix + 1) xs


-- | Convert an array to a list.
--   TODO: this uses O(n) stack space.
toList :: Array a -> [a]
toList arr = go 0
 where	go ix 
 	 | ix == arr.size = []
 	 \= arr.(ix) : go (ix + 1)


-- Traversals -----------------------------------------------------------------
-- | Map a function across all the elements of an array, 
--   producing a list.
forList :: Array a -> (a -> b) -> [b]
forList arr f	= go 0 
 where	len	= arr.size
	go ix
	 | ix >= len	= []
	 \= f arr.(ix) : go (ix + 1)


-- | Update all the elements of an array with this function
--	the array cells are pointed to the new objects
forUpdate :: Array a -> (a -> a) -> ()
forUpdate arr f	= go 0
 where	len	= arr.size
	go ix
	 | ix >= len	= ()
	 \= do	x'	= f arr.(ix)
		arr#(ix) #= x'
		go (ix + 1)


-- | Map a function across all the elements of an array
--   with the array index, ignoring the result.
ifor_ :: Array a -> (Int -> a -> b) -> ()
ifor_ array f	= go 0
 where	len	= array.size
	go ix 
	 | ix >= len	= ()
	 \= do	f ix array.(ix)
		go (ix + 1)

