
import
{	Base;
	Data.Int;
	Data.Ref;
	Data.List;
}

data Array %r1 a;

foreign import extern "primArray_new"
 array_new 
 	:: forall a %r1 %r2 !e1 $c1
 	.  Int %r1 -> a -(!e1 $c1)> Array %r2 a
	:- !e1 = !{ !Read %r1 }
	,  $c1 = ${ size :: Int %r1 }
	,  Mutable %r2
	:$ Obj -> Obj -> Obj;

foreign import extern "primArray_size"
 array_size
 	:: forall a %r1 %r2 !e1
	.  Array %r1 a -(!e1)> Int %r2
	:- !e1 = !{ !Read %r1 }
	:$ Obj -> Obj;
 
foreign import extern "primArray_index"
 index	:: forall a %r1 %r2 !e1
 	.  Array %r1 a -> Int %r2 -(!e1)> a
	:- !e1 = !{ !Read %r1; !Read %r2 }
	:$ Obj -> Obj -> Obj;
 
foreign import extern "primArray_indexR"
 indexR	:: forall a %r1 %r2 !e1 $c1
 	.  Array %r1 a -> Int %r2 -(!e1 $c1)> Ref %r1 a
	:- !e1 = !{ !Read %r1; !Read %r2 }
	,  $c1 = ${ a :: Array %r1 a }
	:$ Obj -> Obj -> Obj;
 

-----
mapArray_ f array
 	= mapArray2_ f array 0 (array_size array);
 
mapArray2_ f array i max
 = match {
 	| i >= max	= ();
	
	\= do { f array.(i); 
		mapArray2_ f array (i+1) max;
	};
 };


-----
mapArrayIx_ f array
	= mapArrayIx2_ f array 0 (array_size array);
 
mapArrayIx2_ f array i max
 = match {
 	| i	>= max	= ();
	
	\= do {	f array.(i) i; 
		mapArrayIx2_ f array (i+1) max;
	};
 };
	
	
-----
mapArrayToList  f array = mapArrayToList' f array 0;
mapArrayToList' f array i
 = if i >= array_size array
 	then []
	else f (array.(i)) : mapArrayToList' f array (i + 1);

