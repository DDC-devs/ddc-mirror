-- Imports
import {
        Base;
        Base.Thunk;
        Class.Functor;
        Class.Foldable;
        Data.Function;
        Data.Bool;
        Data.Ref;
        Data.Tuple;
        Data.Maybe;
        Data.Int;
        System.Error;
}


-- Pragmas

-- Infix
infixr 6 : ;

-- Data
data List %rDK15 a
        = Nil
        
        | Cons {
                x :: a ;
                xs :: Data.List.List %rDK15 a ;
        };


-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances
instance Class.Functor.Functor (Data.List.List %r) where
{
        map      = Data.List.instance_Functor_List_map;
        
        map_     = Data.List.instance_Functor_List_map_;
}

instance Class.Foldable.Foldable (Data.List.List %r) where
{
        foldl    = Data.List.instance_Foldable_List_foldl;
        
        foldr    = Data.List.instance_Foldable_List_foldr;
}

instance Class.Copy.Copy (Data.List.List %rDK163 (Base.Int %rDK164)) where
{
        copy     = Data.List.instance_Copy_ListInt_copy;
}


-- Foreign imports

-- Binds
foreign import project_List_x
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Obj;
        
foreign import project_List_xs
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> List %r0 t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import project_List_ref_x
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> Data.Ref.Ref %r0 t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import project_List_ref_xs
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> Data.Ref.Ref %r0 (List %r0 t0)
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import project_List_head
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Obj;
        
foreign import project_List_tail
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> List %r0 t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import project_List_last
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Obj;
        
foreign import project_List_isNil
        :: forall t0 %r0 %r1
        .  List %r0 t0 -(!e0)> Data.Bool.Bool %r1
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import project_List_length
        :: forall t0 %r0 %r1
        .  List %r0 t0 -(!e0)> Base.Int %r1
        :- !e0        = !{Base.!Read %r0; Base.!ReadT t0; Base.!Read %r1; Base.!Write %r1}
        ,  Base.Mutable %r1
        :$ Base.Data -> Base.Data;
        
foreign import instance_Functor_List_map
        :: forall t0 t1 %r0 !e0 $c0
        .  (t0 -(!e0 $c0)> t1) -> List %r0 t0 -(!e1 $c1)> List %r0 t1
        :- !e1        = !{Base.!Read %r0; !e0; Base.!ReadT (List %r0 t0)}
        ,  $c1        = f : $c0
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import instance_Functor_List_map_
        :: forall t0 t1 %r0 !e0 $c0
        .  (t0 -(!e0 $c0)> t1) -> List %r0 t0 -(!e1 $c1)> Base.Unit
        :- !e1        = !{Base.!Read %r0; !e0; Base.!ReadT (List %r0 t0)}
        ,  $c1        = f : $c0
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import instance_Foldable_List_foldl
        :: forall t0 t1 %r0 !e0 !e1 $c0 $c1
        .  (t1 -(!e0 $c0)> t0 -(!e1 $c1)> t1) -> t1 -($c3)> List %r0 t0 -(!e2 $c2)> t1
        :- !e2        = !{Base.!Read %r0; !e0; !e1; Base.!ReadT (List %r0 t0)}
        ,  $c2        = ${state : t1; f : $c0}
        ,  $c3        = f : $c0
        :$ Base.Thunk -> Base.Obj -> Base.Data -> Base.Obj;
        
foreign import instance_Foldable_List_foldr
        :: forall t0 t1 %r0 !e0 !e1 $c0 $c1
        .  (t0 -(!e0 $c0)> t1 -(!e1 $c1)> t1) -> t1 -($c3)> List %r0 t0 -(!e2 $c2)> t1
        :- !e2        = !{Base.!Read %r0; !e0; Base.!ReadT (List %r0 t0); !e1}
        ,  $c2        = ${state : t1; f : $c0}
        ,  $c3        = f : $c0
        :$ Base.Thunk -> Base.Obj -> Base.Data -> Base.Obj;
        
foreign import instance_Copy_ListInt_copy
        :: forall %r0 %r1 %r2 %r3
        .  List %r0 (Base.Int %r1) -(!e0)> List %r2 (Base.Int %r3)
        :- !e0        = !{Base.!Read %r0; Base.!Read %r1}
        :$ Base.Data -> Base.Data;
        
foreign import (:)
        :: forall t0 %r0
        .  t0 -> List %r0 t0 -($c0)> List %r0 t0
        :- $c0        = x : t0
        :$ Base.Obj -> Base.Data -> Base.Data;
        
foreign import head
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Obj;
        
foreign import tail
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> List %r0 t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import last
        :: forall t0 %r0
        .  List %r0 t0 -(!e0)> t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Obj;
        
foreign import isNil
        :: forall t0 %r0 %r1
        .  List %r0 t0 -(!e0)> Data.Bool.Bool %r1
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import length
        :: forall t0 %r0 %r1
        .  List %r0 t0 -(!e0)> Base.Int %r1
        :- !e0        = !{Base.!Read %r0; Base.!ReadT t0; Base.!Read %r1; Base.!Write %r1}
        ,  Base.Mutable %r1
        :$ Base.Data -> Base.Data;
        
foreign import lengthR
        :: forall t0 %r0 %r1
        .  List %r0 t0 -(!e0)> Base.Int %r1
        :- !e0        = !{Base.!Read %r0; Base.!Read %r1}
        :$ Base.Data -> Base.Data;
        
foreign import (!!)
        :: forall t0 %r0 %r1
        .  List %r0 t0 -> Base.Int %r1 -(!e0 $c0)> t0
        :- !e0        = !{Base.!Read %r0; Base.!Read %r1}
        ,  $c0        = ${xSD16 : %r0; xSD16 : %r0 $> t0}
        :$ Base.Data -> Base.Data -> Base.Obj;
        
foreign import (++)
        :: forall t0 %r0 %r1
        .  List %r0 t0 -> List %r1 t0 -(!e0 $c0)> List %r1 t0
        :- !e0        = Base.!Read %r0
        ,  $c0        = ${xSD19 : %r0; xSD19 : %r0 $> t0}
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import replicate
        :: forall t0 %r0 %r1
        .  Base.Int %r0 -> t0 -(!e0 $c0)> List %r1 t0
        :- !e0        = Base.!Read %r0
        ,  $c0        = xSD21 : %r0
        :$ Base.Data -> Base.Obj -> Base.Data;
        
foreign import iterateL
        :: forall t0 %r0 !e0 $c0
        .  (t0 -(!e0 $c0)> t0) -> t0 -(!e0 $c1)> List %r0 t0
        :- $c1        = f : $c0
        ,  Base.Pure !e0
        ,  Base.Lazy %r0
        :$ Base.Thunk -> Base.Obj -> Base.Data;
        
foreign import mapL
        :: forall t0 t1 %r0 %r1 !e0 $c0
        .  (t0 -(!e0 $c0)> t1) -> List %r0 t0 -(!e1 $c1)> List %r1 t1
        :- !e1        = !{Base.!Read %r0; !e0}
        ,  $c1        = f : $c0
        ,  Base.Pure !e0
        ,  Base.Const %r0
        ,  Base.Lazy %r1
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import maps
        :: forall t0 t1 %r0 !e0 $c0
        .  List %r0 t0 -> (t0 -(!e0 $c0)> t1) -(!e1 $c1)> List %r0 t1
        :- !e1        = !{Base.!ReadT (List %r0 t0); !e0}
        ,  $c1        = ${xx : %r0; xx : %r0 $> t0}
        :$ Base.Data -> Base.Thunk -> Base.Data;
        
foreign import maps_
        :: forall t0 t1 %r0 !e0 $c0
        .  List %r0 t0 -> (t0 -(!e0 $c0)> t1) -(!e1 $c1)> Base.Unit
        :- !e1        = !{Base.!ReadT (List %r0 t0); !e0}
        ,  $c1        = ${xx : %r0; xx : %r0 $> t0}
        :$ Base.Data -> Base.Thunk -> Base.Data;
        
foreign import mapAccumL
        :: forall t0 t1 t2 %r0 %r1 %r2 %r3 !e0 !e1 $c0 $c1
        .  (t2 -(!e1 $c0)> t0 -(!e0 $c1)> Data.Tuple.Tuple2 %r3 t2 t1) -> t2 -($c3)> List %r1 t0 -(!e2 $c2)> Data.Tuple.Tuple2 %r0 t2 (List %r2 t1)
        :- !e2        = !{Base.!Read %r2; Base.!Read %r1; !e1; !e0; Base.!Read %r3}
        ,  $c2        = ${f : $c0; acc : t2}
        ,  $c3        = f : $c0
        :$ Base.Thunk -> Base.Obj -> Base.Data -> Base.Data;
        
foreign import mapAccumL'
        :: forall t0 t1 t2 %r0 %r1 %r2 %r3 %r4 !e0 !e1 $c0 $c1
        .  (t0 -(!e1 $c0)> t1 -(!e0 $c1)> Data.Tuple.Tuple2 %r4 t0 t2) -> t0 -($c2)> List %r0 t1 -($c3)> List %r2 t2 -(!e2 $c4)> Data.Tuple.Tuple2 %r1 t0 (List %r3 t2)
        :- !e2        = !{Base.!Read %r2; Base.!Read %r3; Base.!Read %r0; !e1; !e0; Base.!Read %r4}
        ,  $c2        = f : $c0
        ,  $c3        = ${acc : t0; f : $c0}
        ,  $c4        = ${acc : t0; xSD24 : %r0; xSD24 : %r0 $> t1; f : $c0}
        :$ Base.Thunk -> Base.Obj -> Base.Data -> Base.Data -> Base.Data;
        
foreign import sum
        :: forall %r0 %r1 %r2
        .  List %r2 (Base.Int %r0) -(!e0)> Base.Int %r1
        :- !e0        = !{Base.!Read %r2; Base.!Read %r0; Base.!Read %r1; Base.!Write %r1}
        ,  Base.Mutable %r1
        :$ Base.Data -> Base.Data;
        
foreign import sumR
        :: forall %r0 %r1 %r2
        .  List %r1 (Base.Int %r0) -(!e0)> Base.Int %r2
        :- !e0        = !{Base.!Read %r1; Base.!Read %r0; Base.!Read %r2}
        :$ Base.Data -> Base.Data;
        
foreign import prod
        :: forall %r0 %r1 %r2
        .  List %r0 (Base.Int %r1) -(!e0)> Base.Int %r2
        :- !e0        = !{Base.!ReadT (List %r0 (Base.Int %r1)); Base.!Read %r2; Base.!Read %r1}
        :$ Base.Data -> Base.Data;
        
foreign import pow
        :: forall %r0 %r1 %r2
        .  Base.Int %r0 -> Base.Int %r2 -(!e0 $c0)> Base.Int %r1
        :- !e0        = !{Base.!Read %r2; Base.!Read %r0; Base.!Read %r1}
        ,  $c0        = x : %r0
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import zipWith
        :: forall t0 t1 t2 %r0 %r1 %r2 !e0 !e1 $c0 $c1
        .  (t0 -(!e1 $c1)> t1 -(!e0 $c0)> t2) -> List %r0 t0 -($c3)> List %r1 t1 -(!e2 $c2)> List %r2 t2
        :- !e2        = !{Base.!Read %r0; Base.!Read %r1; !e1; !e0}
        ,  $c2        = ${xSD26 : %r0; xSD26 : %r0 $> t0; f : $c1}
        ,  $c3        = f : $c1
        :$ Base.Thunk -> Base.Data -> Base.Data -> Base.Data;
        
foreign import zipWith_
        :: forall t0 t1 %r0 %r1 !e0 !e1 $c0 $c1
        .  (t0 -(!e1 $c1)> t1 -(!e0 $c0)> Base.Unit) -> List %r0 t0 -($c3)> List %r1 t1 -(!e2 $c2)> Base.Unit
        :- !e2        = !{Base.!Read %r0; Base.!Read %r1; !e1; !e0}
        ,  $c2        = ${xSD30 : %r0; xSD30 : %r0 $> t0; f : $c1}
        ,  $c3        = f : $c1
        :$ Base.Thunk -> Base.Data -> Base.Data -> Base.Data;
        
foreign import reverse
        :: forall t0 %r0 %r1
        .  List %r0 t0 -(!e0)> List %r1 t0
        :- !e0        = !{Base.!Read %r0; Base.!Read %r1}
        :$ Base.Data -> Base.Data;
        
foreign import intersperse
        :: forall t0 %r0 %r1
        .  t0 -> List %r0 t0 -(!e0 $c0)> List %r1 t0
        :- !e0        = Base.!Read %r0
        ,  $c0        = s : t0
        :$ Base.Obj -> Base.Data -> Base.Data;
        
foreign import take
        :: forall t0 %r0 %r1 %r2
        .  Base.Int %r0 -> List %r1 t0 -(!e0 $c0)> List %r2 t0
        :- !e0        = !{Base.!Read %r0; Base.!Read %r1}
        ,  $c0        = xSD38 : %r0
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import drop
        :: forall t0 %r0 %r1
        .  Base.Int %r0 -> List %r1 t0 -(!e0 $c0)> List %r1 t0
        :- !e0        = !{Base.!Read %r0; Base.!Read %r1}
        ,  $c0        = xSD42 : %r0
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import deleteF
        :: forall t0 %r0 %r1 !e0 !e1 $c0 $c1
        .  (t0 -(!e1 $c1)> t0 -(!e0 $c0)> Data.Bool.Bool %r0) -> List %r1 t0 -($c3)> t0 -(!e2 $c2)> List %r1 t0
        :- !e2        = !{Base.!Read %r1; !e1; !e0; Base.!Read %r0}
        ,  $c2        = ${xSD45 : %r1; xSD45 : %r1 $> t0; eqF : $c1}
        ,  $c3        = eqF : $c1
        :$ Base.Thunk -> Base.Data -> Base.Obj -> Base.Data;
        
foreign import find
        :: forall t0 %r0 %r1 %r2 !e0 $c0
        .  (t0 -(!e0 $c0)> Data.Bool.Bool %r1) -> List %r0 t0 -(!e1 $c1)> Data.Maybe.Maybe %r2 t0
        :- !e1        = !{!e0; Base.!Read %r1; Base.!Read %r0}
        ,  $c1        = f : $c0
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import filter
        :: forall t0 %r0 %r1 %r2 !e0 $c0
        .  (t0 -(!e0 $c0)> Data.Bool.Bool %r1) -> List %r0 t0 -(!e1 $c1)> List %r2 t0
        :- !e1        = !{Base.!Read %r0; !e0; Base.!Read %r1}
        ,  $c1        = f : $c0
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import filterL
        :: forall t0 %r0 %r1 %r2 !e0 $c0
        .  (t0 -(!e0 $c0)> Data.Bool.Bool %r1) -> List %r0 t0 -(!e1 $c1)> List %r2 t0
        :- !e1        = !{Base.!Read %r0; !e0; Base.!Read %r1}
        ,  $c1        = f : $c0
        ,  Base.Const %r1
        ,  Base.Pure !e0
        ,  Base.Const %r0
        ,  Base.Lazy %r2
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import rangeInt
        :: forall %r0 %r1 %r2
        .  Base.Int %r1 -> Base.Int %r0 -(!e0 $c0)> List %r2 (Base.Int %r1)
        :- !e0        = !{Base.!Read %r1; Base.!Read %r0}
        ,  $c0        = x : %r1
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import rangeIntL
        :: forall %r0 %r1 %r2
        .  Base.Int %r1 -> Base.Int %r0 -(!e0 $c0)> List %r2 (Base.Int %r1)
        :- !e0        = !{Base.!Read %r1; Base.!Read %r0}
        ,  $c0        = x : %r1
        ,  Base.Const %r1
        ,  Base.Const %r0
        ,  Base.Lazy %r2
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import rangeInfIntL
        :: forall %r0 %r1
        .  Base.Int %r0 -(!e0)> List %r1 (Base.Int %r0)
        :- !e0        = Base.!Read %r0
        ,  Base.Const %r0
        ,  Base.Lazy %r1
        :$ Base.Data -> Base.Data;
        
foreign import concat
        :: forall t0 %r0 %r1 %r2
        .  List %r0 (List %r1 t0) -(!e0)> List %r2 t0
        :- !e0        = !{Base.!Read %r0; Base.!Read %r1}
        :$ Base.Data -> Base.Data;
        
foreign import concatL
        :: forall t0 %r0 %r1 %r2
        .  List %r0 (List %r2 t0) -(!e0)> List %r1 t0
        :- !e0        = Base.!Read %r0
        ,  Base.Const %r0
        ,  Base.Const %r2
        ,  Base.Lazy %r1
        :$ Base.Data -> Base.Data;
        
foreign import concatMap
        :: forall t0 t1 %r0 %r1 %r2 !e0 $c0
        .  (t0 -(!e0 $c0)> List %r1 t1) -> List %r0 t0 -(!e1 $c1)> List %r2 t1
        :- !e1        = !{Base.!Read %r0; !e0; Base.!Read %r1}
        ,  $c1        = f : $c0
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import concatMapL
        :: forall t0 t1 %r0 %r1 %r2 !e0 $c0
        .  (t0 -(!e0 $c0)> List %r2 t1) -> List %r0 t0 -(!e1 $c1)> List %r1 t1
        :- !e1        = !{Base.!Read %r0; !e0}
        ,  $c1        = f : $c0
        ,  Base.Const %r2
        ,  Base.Pure !e0
        ,  Base.Const %r0
        ,  Base.Lazy %r1
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import mapMaybe
        :: forall t0 t1 %r0 %r1 %r2 !e0 $c0
        .  (t0 -(!e0 $c0)> Data.Maybe.Maybe %r1 t1) -> List %r0 t0 -(!e1 $c1)> List %r2 t1
        :- !e1        = !{Base.!Read %r0; !e0; Base.!Read %r1}
        ,  $c1        = xSD61 : $c0
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import maximumBy
        :: forall t0 %r0 %r1 !e0 !e1 $c0 $c1
        .  (t0 -(!e1 $c1)> t0 -(!e0 $c0)> Class.Ord.Ordering %r1) -> List %r0 t0 -(!e2 $c2)> t0
        :- !e2        = !{System.Error.!Error; Base.!Read %r0; Base.!ReadT (List %r0 t0); !e1; !e0; Base.!Read %r1}
        ,  $c2        = xSD64 : $c1
        :$ Base.Thunk -> Base.Data -> Base.Obj;
        
foreign import minimumBy
        :: forall t0 %r0 %r1 !e0 !e1 $c0 $c1
        .  (t0 -(!e1 $c1)> t0 -(!e0 $c0)> Class.Ord.Ordering %r1) -> List %r0 t0 -(!e2 $c2)> t0
        :- !e2        = !{System.Error.!Error; Base.!Read %r0; Base.!ReadT (List %r0 t0); !e1; !e0; Base.!Read %r1}
        ,  $c2        = xSD68 : $c1
        :$ Base.Thunk -> Base.Data -> Base.Obj;
        
project Data.List.List %rDK73 a where
{
        x        = project_List_x;
        xs       = project_List_xs;
        ref_x    = project_List_ref_x;
        ref_xs   = project_List_ref_xs;
        head     = project_List_head;
        tail     = project_List_tail;
        last     = project_List_last;
        isNil    = project_List_isNil;
        length   = project_List_length;
}


