
import Base;
import Data.Bool;
import Data.Int;
import Data.Int32U;
import Data.Float32U;

import Class.Eq;
import Class.Num;
import Class.Ord;

pragma	cc_includes ["math.h"];

-- boxing
foreign import extern "_boxFloat32"
 boxFloat32 	:: forall %r1
  		.  Float32# -> Float %r1
		:$ Float32# -> Obj;

foreign import extern "_unboxFloat32"
 unboxFloat32	:: forall %r1
 		.  Float %r1 -(!Read %r1)> Float32#
		:$ Obj -> Float32#;


foreign import extern "primFloat32_toFloat"
 toFloat	:: elaborate Int -> Float;

-- math
foreign import extern "primFloat32_neg"
 primFloat32_neg	:: elaborate Float -> Float

foreign import extern "primFloat32_add"
 primFloat32_add	:: elaborate Float -> Float -> Float

foreign import extern "primFloat32_sub"
 primFloat32_sub	:: elaborate Float -> Float -> Float

foreign import extern "primFloat32_mul"
 primFloat32_mul	:: elaborate Float -> Float -> Float

foreign import extern "primFloat32_div"
 primFloat32_div	:: elaborate Float -> Float -> Float

-- comparisons
foreign import extern "primFloat32_eq"
 primFloat32_eq		:: elaborate Float -> Float -> Bool

foreign import extern "primFloat32_neq"
 primFloat32_neq	:: elaborate Float -> Float -> Bool

foreign import extern "primFloat32_gt"
 primFloat32_gt		:: elaborate Float -> Float -> Bool

foreign import extern "primFloat32_ge"
 primFloat32_ge		:: elaborate Float -> Float -> Bool

foreign import extern "primFloat32_lt"
 primFloat32_lt		:: elaborate Float -> Float -> Bool

foreign import extern "primFloat32_le"
 primFloat32_le		:: elaborate Float -> Float -> Bool

-- update
foreign import extern "primFloat32_update"
 primFloat32_update	:: elaborate (mutable Float) -> Float -> ()


instance Eq (Float %_) where
	(==)		= primFloat32_eq
	(/=)		= primFloat32_neq


instance Ord (Float %_) where
	(>)		= primFloat32_gt
	(>=)		= primFloat32_ge

	(<)		= primFloat32_lt
	(<=)		= primFloat32_le
	

instance Num (Float %_) where
	(+)		= primFloat32_add
	(-)		= primFloat32_sub
	(*)		= primFloat32_mul
	(/)		= primFloat32_div
	negate		= primFloat32_neg


instance Updatable (Float %_) where
	(:=)		= primFloat32_update


instance Accum (Float %_) where
	(+=) a b 	= primFloat32_update a (primFloat32_add a b)



-- trig
foreign import extern "sinf"
 sinU	:: elaborate Float32# -> Float32#

foreign import extern "asinf"
 asinU	:: elaborate Float32# -> Float32#

foreign import extern "cosf"
 cosU	:: elaborate Float32# -> Float32#
 
foreign import extern "acosf"
 acosU	:: elaborate Float32# -> Float32#

foreign import extern "tanf"
 tanU	:: elaborate Float32# -> Float32#
 
foreign import extern "atanf"
 atanU	:: elaborate Float32# -> Float32#

foreign import extern "sqrtf"
 sqrtU	:: elaborate Float32# -> Float32#

foreign import extern "truncf"
 truncU	:: elaborate Float32# -> Float32#

sin x	= boxFloat32 (sinU (unboxFloat32 x))
asin x	= boxFloat32 (asinU (unboxFloat32 x))
cos x	= boxFloat32 (cosU (unboxFloat32 x))
acos x	= boxFloat32 (acosU (unboxFloat32 x))
tan x	= boxFloat32 (tanU (unboxFloat32 x))
atan x	= boxFloat32 (atanU (unboxFloat32 x))
sqrt x	= boxFloat32 (sqrtU (unboxFloat32 x))
trunc x = boxFloat32 (truncU (unboxFloat32 x))

-- 
foreign import extern "logf"
 logU   :: elaborate Float32# -> Float32#

foreign import extern "floorf"
 floorU :: elaborate Float32# -> Float32#

foreign import extern "fabsf"
 fabsU  :: elaborate Float32# -> Float32#

log   x	= boxFloat32 (logU (unboxFloat32 x))
floor x	= boxFloat32 (floorU (unboxFloat32 x))
fabs x	= boxFloat32 (fabsU (unboxFloat32 x))

-- conversion
foreign import extern "primFloat32_truncate"
 truncate :: elaborate Float -> Int



-- constants
-- pi = 3.1415926535;
