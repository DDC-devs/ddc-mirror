{-# OPTIONS -no-implicit-prelude #-}


-- | A FlatString holds a chunk of UTF8 in a heap allocated object.
--   TODO: Make the API the similar to Haskell ByteStrings.
--
module 	Data.FlatString

export	flatString_copy

import	Data.Numeric.Word8
	Data.Numeric.Int32
 	Data.StringU
 	Data.Char
	Data.Maybe
	Data.Tuple
 	Class.Copy
	DDC.Runtime.Alloc
	Foreign.C.String
	Foreign.C.StdLib
 	Base

project FlatString 
 with {	box; unsafeUnbox; new; empty;
	maxLengthU; lengthU; setLengthU; 
 	maxLength;  length;  setLength;
	index; 
	charsLeft;
	append; 
	slice; 
	unfoldrN; }


-- Instances ------------------------------------------------------------------	
instance Copy FlatString where
 copy	= flatString_copy


-- Boxing --------------------------------------------------------------------
-- | Create a new FlatString and copy some data into it.
--   TODO: Make a new new function that fills the string directly, 
--         without needing to zero it out first.
box :: Ptr# (String# %r1) -> FlatString %r2
box strU
 = do	-- make a new string for the destination
 	len	= strlen strU
	str	= new&{FlatString} (boxInt32 (len + 1#))

	-- copy the source into it
	dest	= coercePtr (plusPtr (peekDataR_payload str) 8#)
	strcpy dest strU

	str.setLengthU len
	str


-- | Return a pointer to the unboxed null-terminated string that is inside
--   the boxed heap object.
--
--   DANGER: The object will probably move on the next GC, invalidating
--           the returned pointer. Don't hold onto the pointer across a
--           a potential allocation.
--
unsafeUnbox :: FlatString %r1 -> Ptr# (String# %r1)
unsafeUnbox str@(FlatString)
 	= coercePtr (plusPtr (peekDataR_payload str) 8#)


-- | Apply a function to a copy of the unboxed String contained
--   in a FlatString. This String is copied out to the C heap before,
--   so it's ok if the function invokes the GC. The string is freed 
--   after the function returns, so don't hold pointers to it afterwards.

--   TODO: This doesn't work because we can't build a thunk that takes
--         an unboxed parameter.
{-
withStringU :: FlatString %r1 -> (String# %r2 -> a) -> a
withStringU fs fun
 = do	tmp	= malloc (fs.lengthU + 1#)
	strcpy tmp fs.unsafeUnbox
	x	= fun tmp
	free tmp
-}


-- Constructors ---------------------------------------------------------------
-- | Create a new string with the given length, and fill it will null charaters.
new :: Int32 -> FlatString
new length
 = do 	-- make sure to include space for the nul char on the end.
	len		= unboxInt32 length
 	len_nul		= len + 1#

	-- round length up to 4 byte word boundary for the DataR object.
	spill		= mod len_nul 4#
	len_spilled	= if spill == 0# 
				then len_nul
				else len_nul + (4# - spill)

	len_payload	= 4#		-- for the maxLength field
			+ 4#		-- for the length field
			+ len_spilled	-- for the string chars

	-- alloc the object and grab a pointer to its payload
	str 	:: FlatString %r
	str	= primAlloc_dataR 0# len_payload

	payload = peekDataR_payload str

	-- clear out the payload
	memset (coercePtr payload) 0# len_payload
 
	-- write the maxLength
	poke   payload len

	-- write the length
	poke   (coercePtr (plusPtr (coercePtr payload) 4#)) 0#
	
	str


-- | Create a new `FlatString` of length 0.
empty :: FlatString
empty	= new 0


-- Field Accessors ------------------------------------------------------------
-- | Get the maximum number of charaters that can be stored in a FlatString.
--   TODO: Make this return a Word32#
maxLengthU :: FlatString -> Int32#
maxLengthU str@(FlatString)
 =	peek (peekDataR_payload str)


-- | Get the number of charaters currently stored in a FlatString.
--   TODO: Make this return a Word32#
lengthU :: FlatString -> Int32#
lengthU str@(FlatString)
 = do	payload	= peekDataR_payload str
	peek (coercePtr (plusPtr payload 4#))


-- | Set the current length of the string
--   TODO: don't allow this to be set over the maximum available
--         This really wants a write effect, but we haven't added one because 
--         it's used by "new" and we cant mask effs on the return type of a
--         fn yet.
setLengthU :: FlatString -> Int32# -> ()
setLengthU str@(FlatString) len
 = do	payload	= peekDataR_payload str
	poke (coercePtr (plusPtr payload 4#)) len
	()


maxLength :: FlatString -> Int32
maxLength fs = boxInt32 fs.maxLengthU

length :: FlatString -> Int32
length fs    = boxInt32 fs.lengthU

setLength :: FlatString -> Int32 -> ()
setLength fs l = setLengthU fs (unboxInt32 l)


-- | Copy a `FlatString`.
flatString_copy :: FlatString %r1 -> FlatString %r2
flatString_copy str@(FlatString)
 = do	len	= str.length
	str'	= new&{FlatString} len
	str'.setLength len
	strcpy (unsafeUnbox str') (unsafeUnbox str)
	str'


-- Utils ----------------------------------------------------------------------
-- | Take a character from this FlatString.
--   TODO: make this take a Word32.
index :: FlatString -> Int32 -> Char32
index str ix
 | ix < str.length
 = do	ixU	= unboxInt32 ix
 	payload	= peekDataR_payload str
	w8	= peek (plusPtr payload (8#i32 + ixU))
	
	boxChar32 (primCast_Word8U_Word32U w8)


-- | Get how many charaters there are still available in a FlatString.
--   TODO: make this take a Word32.
charsLeft :: FlatString -> Int32
charsLeft fs
 = boxInt32 (maxLengthU fs - lengthU fs)


-- | Append some data to the end of a FlatString
append :: FlatString -> FlatString -> ()
append fs1@(FlatString) fs2@(FlatString)
 | fs1.charsLeft >= fs2.length
 = do	strcat (unsafeUnbox fs1) (unsafeUnbox fs2)
	fs1.setLength (fs1.length + fs2.length)


-- | Take a range of characters from a FlatString.
--   TODO: make these take Word32s.
slice 	:: FlatString
	-> Int32	-- ^ Starting index
	-> Int32	-- ^ Length.
	-> FlatString

slice str start len
 = do	len'	= max (length str - start) len
	str'	= new len'
	
	startU	= unboxInt32 start
	lenU	= unboxInt32 len
	dst	= coercePtr (unsafeUnbox str')
	src	= plusPtr   (coercePtr (unsafeUnbox str)) startU
	memcpy dst src lenU
	
	str'


-----------------------------------------------------------------
-- | /O(n)/ Like 'unfoldr', 'unfoldrN' builds a ByteString from a seed
--   value.  However, the length of the result is limited by the first
--   argument to 'unfoldrN'.  This function is more efficient than 'unfoldr'
--   when the maximum length of the result is known.
--
--   The following equation relates 'unfoldrN' and 'unfoldr':
--
--   > snd (unfoldrN n f s) == take n (unfoldr f s)
--
unfoldrN :: Int -> (a -> Maybe (Char32, a)) -> a -> (FlatString, Maybe a)
unfoldrN len f x0
 | len < 0	= (new&{FlatString} 0, Just x0)
 | otherwise 
 = do	str	= new&{FlatString} len
	setLength&{FlatString} str len

	fill x n
 	 = case f x of
	    Nothing      -> Nothing
	    Just (c, x') 
	     -> if n == len
		 then Just x
		 else do
			update str n c
			fill x' (n + 1)

	(str, fill x0 0)


-- | We should really handle this via a type class.
update :: FlatString -> Int -> Char32 -> ()
update str n c
 = do 	pokeOnPtr
		(unsafeUnbox&{FlatString} str)
		(plusPtr (peekDataR_payload str) (8# + unboxInt32 n))  
		(primCast_Word32U_Word8U (unboxChar32 c))
	()


