{-# OPTIONS -no-implicit-prelude #-}

-- Primitive functions for unboxed Float32 operations.
--	There are no actual C functions associated with these.
--	We define them so the type inferencer has a schemes for them.
--

module	Data.Numeric.Float32U

import	Class.Eq
	Class.Num
	Class.Ord


-- Arithmetic -----------------------------------------------------------------
foreign import "primFloat32U_neg"
 primFloat32U_neg	:: Float32# -> Float32#

foreign import "primFloat32U_add"
 primFloat32U_add	:: Float32# -> Float32# -> Float32#

foreign import "primFloat32U_sub"
 primFloat32U_sub	:: Float32# -> Float32# -> Float32#

foreign import "primFloat32U_mul"
 primFloat32U_mul	:: Float32# -> Float32# -> Float32#

foreign import "primFloat32U_div"
 primFloat32U_div	:: Float32# -> Float32# -> Float32#

foreign import "primFloat32U_mod"
 primFloat32U_mod	:: Float32# -> Float32# -> Float32#


-- Comparisons ----------------------------------------------------------------
foreign import "primFloat32U_eq"
 primFloat32U_eq	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_neq"
 primFloat32U_neq	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_gt"
 primFloat32U_gt	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_ge"
 primFloat32U_ge	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_lt"
 primFloat32U_lt	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_le"
 primFloat32U_le	:: Float32# -> Float32# -> Bool#


-- Instances ------------------------------------------------------------------

instance Num Float32# where 
 	(+) 		= primFloat32U_add
	(-) 		= primFloat32U_sub
	(*) 		= primFloat32U_mul
	(/) 		= primFloat32U_div
	mod		= primFloat32U_mod
	negate		= primFloat32U_neg


instance Eq Float32# where
	(==) x y	= boxBool (primFloat32U_eq  x y)
	(/=) x y	= boxBool (primFloat32U_neq x y)


instance Ord Float32# where
	(>)		= primFloat32U_gt
	(<)		= primFloat32U_lt
	(>=)		= primFloat32U_ge
	(<=)		= primFloat32U_le


