{-# OPTIONS -no-implicit-prelude #-}

module 	Data.Numeric.Word64

import	DDC.Runtime.Store
	DDC.Runtime.Alloc
	Foreign.Ptr
	Class.Eq
	Class.Ord
	Class.Copy
	Class.Update
	Class.Num
	Class.Integral
	Base.Thunk


-- Boxing ---------------------------------------------------------------------
boxWord64 :: Word64# -> Word64
boxWord64 u
 = do	w	= primAlloc_dataRS 0# 8#
	poke (castToPtrWord64 (peekDataRS_payload w)) u
	w


unboxWord64 :: Word64 -> Word64#
unboxWord64 w
 = do	w'	= force w
	peekOn w (castToPtrWord64 (peekDataRS_payload w'))


-- Arithmetic -----------------------------------------------------------------
foreign import "primWord64U_neg"
 primWord64U_neg :: Word64# -> Word64#

foreign import "primWord64U_add"
 primWord64U_add :: Word64# -> Word64# -> Word64#

foreign import "primWord64U_sub"
 primWord64U_sub :: Word64# -> Word64# -> Word64#

foreign import "primWord64U_mul"
 primWord64U_mul :: Word64# -> Word64# -> Word64#

foreign import "primWord64U_div"
 primWord64U_div :: Word64# -> Word64# -> Word64#

foreign import "primWord64U_mod"
 primWord64U_mod :: Word64# -> Word64# -> Word64#


-- Comparisons ----------------------------------------------------------------
foreign import "primWord64U_eq"	
 primWord64U_eq	:: Word64# -> Word64# -> Bool#

foreign import "primWord64U_neq"	
 primWord64U_neq :: Word64# -> Word64# -> Bool#

foreign import "primWord64U_gt"	
 primWord64U_gt	:: Word64# -> Word64# -> Bool#

foreign import "primWord64U_ge"	
 primWord64U_ge	:: Word64# -> Word64# -> Bool#

foreign import "primWord64U_lt"	
 primWord64U_lt	:: Word64# -> Word64# -> Bool#

foreign import "primWord64U_le"	
 primWord64U_le	:: Word64# -> Word64# -> Bool#


-- Unboxed Instances ----------------------------------------------------------
instance Eq Word64# where
	(==)  x y	= boxBool (primWord64U_eq x y) 
	(/=)  x y	= boxBool (primWord64U_neq x y)


instance Ord Word64# where
	(>)   x y	= boxBool (primWord64U_gt x y)
	(<)   x y	= boxBool (primWord64U_lt x y)
	(>=)  x y	= boxBool (primWord64U_ge x y)
	(<=)  x y	= boxBool (primWord64U_le x y)

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
			\= GT


instance Num Word64# where 
 	(+) 		= primWord64U_add
	(-) 		= primWord64U_sub
	(*) 		= primWord64U_mul
	negate		= primWord64U_neg


instance Integral Word64# where
	div 		= primWord64U_div
	mod		= primWord64U_mod


-- Boxed Instances ------------------------------------------------------------
instance Eq Word64 where
	(==) x y	= boxBool   (primWord64U_eq  (unboxWord64 x) (unboxWord64 y))
	(/=) x y	= boxBool   (primWord64U_neq (unboxWord64 x) (unboxWord64 y))
		

instance Ord Word64 where
	(>) x y		= boxBool   (primWord64U_gt  (unboxWord64 x) (unboxWord64 y))
	(<) x y		= boxBool   (primWord64U_lt  (unboxWord64 x) (unboxWord64 y))
	(>=) x y	= boxBool   (primWord64U_ge  (unboxWord64 x) (unboxWord64 y))
	(<=) x y	= boxBool   (primWord64U_le  (unboxWord64 x) (unboxWord64 y))

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
	 		\= GT

instance Copy Word64 where
 	copy x 		= boxWord64 (unboxWord64 x)


instance Updatable Word64 where
	(:=) w1 w2
	 = do	w1'	= force w1
		pokeOn w1 (castToPtrWord64 (peekDataRS_payload w1')) (unboxWord64 w2)
		()


instance Num Word64 where
	negate x 	= boxWord64 (primWord64U_neg (unboxWord64 x))
	(+) x y		= boxWord64 (primWord64U_add (unboxWord64 x) (unboxWord64 y))
	(-) x y		= boxWord64 (primWord64U_sub (unboxWord64 x) (unboxWord64 y))
	(*) x y		= boxWord64 (primWord64U_mul (unboxWord64 x) (unboxWord64 y))

	pow x n = pow' n 1u64
	 where	pow' :: Word64 -> Word64 -> Word64
		pow' 0u64 acc = acc
		pow' n    acc = pow' (n - 1u64) (acc * x)


instance Integral Word64 where
	div x y		= boxWord64 (primWord64U_div (unboxWord64 x) (unboxWord64 y))
	mod x y		= boxWord64 (primWord64U_mod (unboxWord64 x) (unboxWord64 y))


instance Accum Word64 where
	(+=) a b	= a := (a + b)

