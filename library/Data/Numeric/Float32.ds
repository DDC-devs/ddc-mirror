{-# OPTIONS -no-implicit-prelude #-}

module	Data.Numeric.Float32

import 	Base
 	Data.Bool
	Data.Numeric.Int32
	Class.Eq
	Class.Num
	Class.Ord
	Class.Fractional
	Class.Floating

pragma	cc_includes ["math.h"]


-- Boxing ---------------------------------------------------------------------
boxFloat32 :: Float32# -> Float32
boxFloat32 u
 = do	w	= primAlloc_dataRS 0# 4#
	poke (castToPtrFloat32 (peekDataRS_payload w)) u
	w


unboxFloat32 :: Float32 -> Float32#
unboxFloat32 w
 = do	w'	= force w
	peekOn w (castToPtrFloat32 (peekDataRS_payload w'))


-- Conversion -----------------------------------------------------------------
foreign import "primFloat32_toFloat"
 toFloat	:: Int32{read}   -> Float32

foreign import "primFloat32_truncate"
 truncate	:: Float32{read} -> Int32


-- Arithmetic -----------------------------------------------------------------
foreign import "primFloat32U_neg"
 primFloat32U_neg	:: Float32# -> Float32#

foreign import "fabsf"
 primFloat32U_abs  	:: Float32# -> Float32#

foreign import "primFloat32U_add"
 primFloat32U_add	:: Float32# -> Float32# -> Float32#

foreign import "primFloat32U_sub"
 primFloat32U_sub	:: Float32# -> Float32# -> Float32#

foreign import "primFloat32U_mul"
 primFloat32U_mul	:: Float32# -> Float32# -> Float32#

foreign import "primFloat32U_div"
 primFloat32U_div	:: Float32# -> Float32# -> Float32#


-- Comparisons ----------------------------------------------------------------
foreign import "primFloat32U_eq"
 primFloat32U_eq	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_neq"
 primFloat32U_neq	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_gt"
 primFloat32U_gt	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_ge"
 primFloat32U_ge	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_lt"
 primFloat32U_lt	:: Float32# -> Float32# -> Bool#

foreign import "primFloat32U_le"
 primFloat32U_le	:: Float32# -> Float32# -> Bool#


-- Trig -----------------------------------------------------------------------
foreign import "sinf"
 primFloat32U_sin	:: Float32# -> Float32#

foreign import "asinf"
 primFloat32U_asin	:: Float32# -> Float32#

foreign import "cosf"
 primFloat32U_cos	:: Float32# -> Float32#
 
foreign import "acosf"
 primFloat32U_acos	:: Float32# -> Float32#

foreign import "tanf"
 primFloat32U_tan	:: Float32# -> Float32#
 
foreign import "atanf"
 primFloat32U_atan	:: Float32# -> Float32#


-- Utils ----------------------------------------------------------------------
foreign import "truncf"
 primFloat32U_ftrunc	:: Float32# -> Float32#

foreign import "roundf"
 primFloat32U_fround	:: Float32# -> Float32#

foreign import "floorf"
 primFloat32U_ffloor	:: Float32# -> Float32#

foreign import "fmodf"
 primFloat32U_fmod	:: Float32# -> Float32# -> Float32#

foreign import "powf"
 primFloat32U_fpow	:: Float32# -> Float32# -> Float32#

foreign import "sqrtf"
 primFloat32U_sqrt	:: Float32# -> Float32#

foreign import "logf"
 primFloat32U_log	:: Float32# -> Float32#


-- Unboxed Instances ----------------------------------------------------------
instance Eq Float32# where
	(==) x y	= boxBool (primFloat32U_eq  x y)
	(/=) x y	= boxBool (primFloat32U_neq x y)


instance Ord Float32# where
	(>)		= primFloat32U_gt
	(<)		= primFloat32U_lt
	(>=)		= primFloat32U_ge
	(<=)		= primFloat32U_le


instance Num Float32# where 
	negate		= primFloat32U_neg
	abs		= primFloat32U_abs
 	(+) 		= primFloat32U_add
	(-) 		= primFloat32U_sub
	(*) 		= primFloat32U_mul


instance Fractional Float32# where
	(/) 		= primFloat32U_div


instance Floating Float32# where
	ftrunc		= primFloat32U_ftrunc
	fround		= primFloat32U_fround
	ffloor		= primFloat32U_ffloor
	fmod		= primFloat32U_fmod
	fpow		= primFloat32U_fpow
	sqrt		= primFloat32U_sqrt
	log		= primFloat32U_log

	sin		= primFloat32U_sin
	asin		= primFloat32U_asin
	cos		= primFloat32U_cos
	acos		= primFloat32U_acos
	tan		= primFloat32U_tan
	atan		= primFloat32U_atan


-- Boxed Instances ------------------------------------------------------------
instance Eq Float32 where
	(==) x y	= boxBool   (primFloat32U_eq  (unboxFloat32 x) (unboxFloat32 y))
	(/=) x y	= boxBool   (primFloat32U_neq (unboxFloat32 x) (unboxFloat32 y))
		

instance Ord Float32 where
	(>) x y		= boxBool   (primFloat32U_gt  (unboxFloat32 x) (unboxFloat32 y))
	(<) x y		= boxBool   (primFloat32U_lt  (unboxFloat32 x) (unboxFloat32 y))
	(>=) x y	= boxBool   (primFloat32U_ge  (unboxFloat32 x) (unboxFloat32 y))
	(<=) x y	= boxBool   (primFloat32U_le  (unboxFloat32 x) (unboxFloat32 y))

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
	 		\= GT

	min x y		= if x <= y then x else y
	max x y		= if x >= y then x else y


instance Copy Float32 where
 	copy x 		= boxFloat32 (unboxFloat32 x)


instance Updatable Float32 where
	(:=) w1 w2
	 = do	w1'	= force w1
		pokeOn w1 (castToPtrFloat32 (peekDataRS_payload w1)) (unboxFloat32 w2)
		()


instance Num Float32 where
	negate x 	= boxFloat32 (primFloat32U_neg (unboxFloat32 x))
	abs x		= boxFloat32 (primFloat32U_abs (unboxFloat32 x))
	(+) x y		= boxFloat32 (primFloat32U_add (unboxFloat32 x) (unboxFloat32 y))
	(-) x y		= boxFloat32 (primFloat32U_sub (unboxFloat32 x) (unboxFloat32 y))
	(*) x y		= boxFloat32 (primFloat32U_mul (unboxFloat32 x) (unboxFloat32 y))


instance Fractional Float32 where
	(/) x y		= boxFloat32 (primFloat32U_div  (unboxFloat32 x) (unboxFloat32 y))


instance Floating Float32 where
	ftrunc	x	= boxFloat32 (primFloat32U_ftrunc (unboxFloat32 x))
	fround	x	= boxFloat32 (primFloat32U_fround (unboxFloat32 x))
	ffloor	x	= boxFloat32 (primFloat32U_ffloor (unboxFloat32 x))
	fmod	x y	= boxFloat32 (primFloat32U_fmod   (unboxFloat32 x) (unboxFloat32 y))
	fpow	x y	= boxFloat32 (primFloat32U_fpow   (unboxFloat32 x) (unboxFloat32 y))
	sqrt	x	= boxFloat32 (primFloat32U_sqrt   (unboxFloat32 x))
	log	x	= boxFloat32 (primFloat32U_log    (unboxFloat32 x))

	sin	x	= boxFloat32 (primFloat32U_sin    (unboxFloat32 x))
	asin	x	= boxFloat32 (primFloat32U_asin   (unboxFloat32 x))
	cos	x	= boxFloat32 (primFloat32U_cos    (unboxFloat32 x))
	acos	x	= boxFloat32 (primFloat32U_acos   (unboxFloat32 x))
	tan	x	= boxFloat32 (primFloat32U_tan    (unboxFloat32 x))
	atan	x	= boxFloat32 (primFloat32U_atan   (unboxFloat32 x))


instance Accum Float32 where
	(+=) a b	= a := (a + b)


-- Other ----------------------------------------------------------------------
-- The Haskell versions of round and floor are also conversions.
round x		= truncate (fround x)
floor x 	= truncate (ffloor x)

project Float where
 clamp :: Float -> Float -> Float -> Float 
 clamp x a b
	| x < a		= a
	| x > b		= b
	| otherwise	= x


