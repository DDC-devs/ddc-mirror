{-# OPTIONS -no-implicit-prelude #-}

-- Primitive functions for unboxed Word32 operations.
--	There are no actual C functions associated with these.
--	We define them so the type inferencer has a schemes for them.
--
module	Data.Numeric.Word32U

import	Class.Eq
	Class.Num
	Class.Ord


-- Arithmetic -----------------------------------------------------------------
foreign import "primWord32U_neg"
 primWord32U_neg :: Word32# -> Word32#

foreign import "primWord32U_add"
 primWord32U_add :: Word32# -> Word32# -> Word32#

foreign import "primWord32U_sub"
 primWord32U_sub :: Word32# -> Word32# -> Word32#

foreign import "primWord32U_mul"
 primWord32U_mul :: Word32# -> Word32# -> Word32#

foreign import "primWord32U_div"
 primWord32U_div :: Word32# -> Word32# -> Word32#

foreign import "primWord32U_mod"
 primWord32U_mod :: Word32# -> Word32# -> Word32#


-- Comparisons ----------------------------------------------------------------
foreign import "primWord32U_eq"	
 primWord32U_eq	:: Word32# -> Word32# -> Bool#

foreign import "primWord32U_neq"	
 primWord32U_neq :: Word32# -> Word32# -> Bool#

foreign import "primWord32U_gt"	
 primWord32U_gt	:: Word32# -> Word32# -> Bool#

foreign import "primWord32U_ge"	
 primWord32U_ge	:: Word32# -> Word32# -> Bool#

foreign import "primWord32U_lt"	
 primWord32U_lt	:: Word32# -> Word32# -> Bool#

foreign import "primWord32U_le"	
 primWord32U_le	:: Word32# -> Word32# -> Bool#


-- Instances ------------------------------------------------------------------
instance Num Word32# where 
 	(+) 		= primWord32U_add
	(-) 		= primWord32U_sub
	(*) 		= primWord32U_mul
	(/) 		= primWord32U_div
	mod		= primWord32U_mod
	negate		= primWord32U_neg


instance Eq Word32# where
	(==)  x y	= boxBool (primWord32U_eq x y) 
	(/=)  x y	= boxBool (primWord32U_neq x y)


instance Ord Word32# where
	(>)   x y	= boxBool (primWord32U_gt x y)
	(<)   x y	= boxBool (primWord32U_lt x y)
	(>=)  x y	= boxBool (primWord32U_ge x y)
	(<=)  x y	= boxBool (primWord32U_le x y)

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
			\= GT
