{-# OPTIONS -no-implicit-prelude #-}

module Data.Numeric.Word32

import	Data.Numeric.Word32U
	DDC.Runtime.Store
	DDC.Runtime.Alloc
	Class.Eq
	Class.Ord
	Class.Copy
	Class.Update
	Class.Num
	Class.Integral
	Base.Thunk


-- Boxing ---------------------------------------------------------------------
boxWord32 :: Word32# -> Word32
boxWord32 u
 = do	w	= primAlloc_dataRS 0# 4#
	poke (castToPtrWord32 (peekDataRS_payload w)) u
	w


unboxWord32 :: Word32 -> Word32#
unboxWord32 w
 = do	w'	= force w
	peekOn w (castToPtrWord32 (peekDataRS_payload w'))


-- Instances ------------------------------------------------------------------
instance Eq Word32 where
	(==) x y	= boxBool   (primWord32U_eq  (unboxWord32 x) (unboxWord32 y))
	(/=) x y	= boxBool   (primWord32U_neq (unboxWord32 x) (unboxWord32 y))
		

instance Ord Word32 where
	(>) x y		= boxBool   (primWord32U_gt  (unboxWord32 x) (unboxWord32 y))
	(<) x y		= boxBool   (primWord32U_lt  (unboxWord32 x) (unboxWord32 y))
	(>=) x y	= boxBool   (primWord32U_ge  (unboxWord32 x) (unboxWord32 y))
	(<=) x y	= boxBool   (primWord32U_le  (unboxWord32 x) (unboxWord32 y))

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
	 		\= GT

instance Copy Word32 where
 	copy x 		= boxWord32 (unboxWord32 x)


instance Updatable Word32 where
	(:=) w1 w2
	 = do	w1'	= force w1
		pokeOn w1 (castToPtrWord32 (peekDataRS_payload w1)) (unboxWord32 w2)
		()


instance Num Word32 where
	negate x 	= boxWord32 (primWord32U_neg (unboxWord32 x))
	(+) x y		= boxWord32 (primWord32U_add (unboxWord32 x) (unboxWord32 y))
	(-) x y		= boxWord32 (primWord32U_sub (unboxWord32 x) (unboxWord32 y))
	(*) x y		= boxWord32 (primWord32U_mul (unboxWord32 x) (unboxWord32 y))

	pow x n = pow' n 1u32
	 where	pow' :: Word32 -> Word32 -> Word32
		pow' 0u32 acc = acc
		pow' n    acc = pow' (n - 1u32) (acc * x)


instance Integral Word32 where
	div x y		= boxWord32 (primWord32U_div (unboxWord32 x) (unboxWord32 y))
	mod x y		= boxWord32 (primWord32U_mod (unboxWord32 x) (unboxWord32 y))


instance Accum Word32 where
	(+=) a b	= a := (a + b)

