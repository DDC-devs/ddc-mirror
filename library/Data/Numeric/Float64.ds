{-# OPTIONS -no-implicit-prelude #-}

module	Data.Numeric.Float64

import	Base
	Data.Bool
	Data.Numeric.Int64
	Foreign.Ptr
	Class.Eq
	Class.Num
	Class.Ord
	Class.Fractional
	Class.Floating

pragma	cc_includes ["math.h"]


-- Builtin Primitives ---------------------------------------------------------
-- There aren't any corresponding C functions for these.
-- They're implemented directly by the core language and backends.

-- Casting
foreign import primCast_Float64U_Float32U	:: Float64# -> Float32#
foreign import primCast_Float64U_Word64U	:: Float64# -> Word64#
foreign import primCast_Float64U_Int64U		:: Float64# -> Int64#

-- Arithmetic
foreign import primFloat64U_neg			:: Float64# -> Float64#
foreign import primFloat64U_add			:: Float64# -> Float64# -> Float64#
foreign import primFloat64U_sub			:: Float64# -> Float64# -> Float64#
foreign import primFloat64U_mul			:: Float64# -> Float64# -> Float64#
foreign import primFloat64U_div			:: Float64# -> Float64# -> Float64#

-- Comparisons
foreign import primFloat64U_eq			:: Float64# -> Float64# -> Bool#
foreign import primFloat64U_neq			:: Float64# -> Float64# -> Bool#
foreign import primFloat64U_gt			:: Float64# -> Float64# -> Bool#
foreign import primFloat64U_ge			:: Float64# -> Float64# -> Bool#
foreign import primFloat64U_lt			:: Float64# -> Float64# -> Bool#
foreign import primFloat64U_le			:: Float64# -> Float64# -> Bool#


-- External Primitives --------------------------------------------------------
-- These are implemented by the C math library and/or as intrinsic
-- functions in the backends.

-- Arithmetic 
foreign import "fabs"	primFloat64U_abs  	:: Float64# -> Float64#

-- Trig 
foreign import "sin"	primFloat64U_sin	:: Float64# -> Float64#
foreign import "asin"	primFloat64U_asin	:: Float64# -> Float64#
foreign import "cos"	primFloat64U_cos	:: Float64# -> Float64#
foreign import "acos"	primFloat64U_acos	:: Float64# -> Float64#
foreign import "tan"	primFloat64U_tan	:: Float64# -> Float64#
foreign import "atan"	primFloat64U_atan	:: Float64# -> Float64#

-- Utils 
foreign import "trunc"	primFloat64U_ftrunc	:: Float64# -> Float64#
foreign import "round"	primFloat64U_fround	:: Float64# -> Float64#
foreign import "floor"	primFloat64U_ffloor	:: Float64# -> Float64#
foreign import "fmod"	primFloat64U_fmod	:: Float64# -> Float64# -> Float64#
foreign import "pow"	primFloat64U_fpow	:: Float64# -> Float64# -> Float64#
foreign import "sqrt"	primFloat64U_sqrt	:: Float64# -> Float64#
foreign import "log"	primFloat64U_log	:: Float64# -> Float64#


-- Boxing ---------------------------------------------------------------------
boxFloat64 :: Float64# -> Float64
boxFloat64 u
 = do	w	= primAlloc_dataRS 0# 8#
	poke (peekDataRS_payload w) u
	w


unboxFloat64 :: Float64 -> Float64#
unboxFloat64 w
 = do	w'	= force w
	peekOn w (peekDataRS_payload w')


-- Conversion -----------------------------------------------------------------
-- TODO: rewrite these directly in Disciple.
foreign import "primFloat64_toFloat"
 toFloat64	:: Int64{read}   -> Float64

foreign import "primFloat64_truncate"
 truncate64	:: Float64{read} -> Int64


-- Unboxed Instances ----------------------------------------------------------
instance Eq Float64# where
	(==) x y	= boxBool (primFloat64U_eq  x y)
	(/=) x y	= boxBool (primFloat64U_neq x y)


instance Ord Float64# where
	(>)		= primFloat64U_gt
	(<)		= primFloat64U_lt
	(>=)		= primFloat64U_ge
	(<=)		= primFloat64U_le


instance Num Float64# where 
	negate		= primFloat64U_neg
	abs		= primFloat64U_abs
 	(+) 		= primFloat64U_add
	(-) 		= primFloat64U_sub
	(*) 		= primFloat64U_mul


instance Fractional Float64# where
	(/) 		= primFloat64U_div


instance Floating Float64# where
	ftrunc		= primFloat64U_ftrunc
	fround		= primFloat64U_fround
	ffloor		= primFloat64U_ffloor
	fmod		= primFloat64U_fmod
	fpow		= primFloat64U_fpow
	sqrt		= primFloat64U_sqrt
	log		= primFloat64U_log

	sin		= primFloat64U_sin
	asin		= primFloat64U_asin
	cos		= primFloat64U_cos
	acos		= primFloat64U_acos
	tan		= primFloat64U_tan
	atan		= primFloat64U_atan


-- Boxed Instances ------------------------------------------------------------
instance Eq Float64 where
	(==) x y	= boxBool   (primFloat64U_eq  (unboxFloat64 x) (unboxFloat64 y))
	(/=) x y	= boxBool   (primFloat64U_neq (unboxFloat64 x) (unboxFloat64 y))
		

instance Ord Float64 where
	(>) x y		= boxBool   (primFloat64U_gt  (unboxFloat64 x) (unboxFloat64 y))
	(<) x y		= boxBool   (primFloat64U_lt  (unboxFloat64 x) (unboxFloat64 y))
	(>=) x y	= boxBool   (primFloat64U_ge  (unboxFloat64 x) (unboxFloat64 y))
	(<=) x y	= boxBool   (primFloat64U_le  (unboxFloat64 x) (unboxFloat64 y))

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
	 		\= GT

	min x y		= if x <= y then x else y
	max x y		= if x >= y then x else y


instance Copy Float64 where
 	copy x 		= boxFloat64 (unboxFloat64 x)


instance Updatable Float64 where
	(:=) w1 w2
	 = do	w1'	= force w1
		pokeOn w1 (peekDataRS_payload w1') (unboxFloat64 w2)
		()


instance Num Float64 where
	negate x 	= boxFloat64 (primFloat64U_neg (unboxFloat64 x))
	abs x		= boxFloat64 (primFloat64U_abs (unboxFloat64 x))
	(+) x y		= boxFloat64 (primFloat64U_add (unboxFloat64 x) (unboxFloat64 y))
	(-) x y		= boxFloat64 (primFloat64U_sub (unboxFloat64 x) (unboxFloat64 y))
	(*) x y		= boxFloat64 (primFloat64U_mul (unboxFloat64 x) (unboxFloat64 y))


instance Fractional Float64 where
	(/) x y		= boxFloat64 (primFloat64U_div  (unboxFloat64 x) (unboxFloat64 y))


instance Floating Float64 where
	ftrunc	x	= boxFloat64 (primFloat64U_ftrunc (unboxFloat64 x))
	fround	x	= boxFloat64 (primFloat64U_fround (unboxFloat64 x))
	ffloor	x	= boxFloat64 (primFloat64U_ffloor (unboxFloat64 x))
	fmod	x y	= boxFloat64 (primFloat64U_fmod   (unboxFloat64 x) (unboxFloat64 y))
	fpow	x y	= boxFloat64 (primFloat64U_fpow   (unboxFloat64 x) (unboxFloat64 y))
	sqrt	x	= boxFloat64 (primFloat64U_sqrt   (unboxFloat64 x))
	log	x	= boxFloat64 (primFloat64U_log    (unboxFloat64 x))

	sin	x	= boxFloat64 (primFloat64U_sin    (unboxFloat64 x))
	asin	x	= boxFloat64 (primFloat64U_asin   (unboxFloat64 x))
	cos	x	= boxFloat64 (primFloat64U_cos    (unboxFloat64 x))
	acos	x	= boxFloat64 (primFloat64U_acos   (unboxFloat64 x))
	tan	x	= boxFloat64 (primFloat64U_tan    (unboxFloat64 x))
	atan	x	= boxFloat64 (primFloat64U_atan   (unboxFloat64 x))


instance Accum Float64 where
	(+=) a b	= a := (a + b)


-- Other ----------------------------------------------------------------------
-- The Haskell versions of round and floor are also conversions.
round64 x	= truncate64 (fround x)
floor64 x 	= truncate64 (ffloor x)

project Float64 where
 clamp :: Float64 -> Float64 -> Float64 -> Float64 
 clamp x a b
	| x < a		= a
	| x > b		= b
	| otherwise	= x

