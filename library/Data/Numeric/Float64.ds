{-# OPTIONS -no-implicit-prelude #-}

module	Data.Numeric.Float64

import	Base
	Data.Bool
	Data.Numeric.Int32
	Data.Numeric.Int64
	Data.Numeric.Float64U
	Class.Eq
	Class.Num
	Class.Ord
	Class.Fractional
	Class.Floating

pragma	cc_includes ["math.h"]


-- Boxing ---------------------------------------------------------------------
foreign import "_boxFloat64"
 boxFloat64 	:: forall %r1
  		.  Float64# -> Float64 %r1
		:$ Float64# -> Obj

foreign import "_unboxFloat64"
 unboxFloat64	:: forall %r1
 		.  Float64 %r1 -(!Read %r1)> Float64#
		:$ Obj -> Float64#


-- Conversion -----------------------------------------------------------------
foreign import "primFloat64_toFloat"
 toFloat64	:: Int32{read}   -> Float64

foreign import "primFloat64_truncate"
 truncate64	:: Float64{read} -> Int64


-- Instances ------------------------------------------------------------------
instance Eq Float64 where
	(==) x y	= boxBool   (primFloat64U_eq  (unboxFloat64 x) (unboxFloat64 y))
	(/=) x y	= boxBool   (primFloat64U_neq (unboxFloat64 x) (unboxFloat64 y))
		

instance Ord Float64 where
	(>) x y		= boxBool   (primFloat64U_gt  (unboxFloat64 x) (unboxFloat64 y))
	(<) x y		= boxBool   (primFloat64U_lt  (unboxFloat64 x) (unboxFloat64 y))
	(>=) x y	= boxBool   (primFloat64U_ge  (unboxFloat64 x) (unboxFloat64 y))
	(<=) x y	= boxBool   (primFloat64U_le  (unboxFloat64 x) (unboxFloat64 y))

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
	 		\= GT

	min x y		= if x <= y then x else y
	max x y		= if x >= y then x else y


instance Copy Float64 where
 	copy x 		= boxFloat64 (unboxFloat64 x)


instance Updatable Float64 where
	(:=) w1 w2
	 = do	w1'	= force w1
		poke (castToPtrFloat64 (peekDataRS_payload w1)) (unboxFloat64 w2)
		()


instance Num Float64 where
	negate x 	= boxFloat64 (primFloat64U_neg (unboxFloat64 x))
	abs x		= boxFloat64 (primFloat64U_abs (unboxFloat64 x))
	(+) x y		= boxFloat64 (primFloat64U_add (unboxFloat64 x) (unboxFloat64 y))
	(-) x y		= boxFloat64 (primFloat64U_sub (unboxFloat64 x) (unboxFloat64 y))
	(*) x y		= boxFloat64 (primFloat64U_mul (unboxFloat64 x) (unboxFloat64 y))


instance Fractional Float64 where
	(/) x y		= boxFloat64 (primFloat64U_div  (unboxFloat64 x) (unboxFloat64 y))


instance Floating Float64 where
	ftrunc	x	= boxFloat64 (primFloat64U_ftrunc (unboxFloat64 x))
	fround	x	= boxFloat64 (primFloat64U_fround (unboxFloat64 x))
	ffloor	x	= boxFloat64 (primFloat64U_ffloor (unboxFloat64 x))
	fmod	x y	= boxFloat64 (primFloat64U_fmod   (unboxFloat64 x) (unboxFloat64 y))
	fpow	x y	= boxFloat64 (primFloat64U_fpow   (unboxFloat64 x) (unboxFloat64 y))
	sqrt	x	= boxFloat64 (primFloat64U_sqrt   (unboxFloat64 x))
	log	x	= boxFloat64 (primFloat64U_log    (unboxFloat64 x))

	sin	x	= boxFloat64 (primFloat64U_sin    (unboxFloat64 x))
	asin	x	= boxFloat64 (primFloat64U_asin   (unboxFloat64 x))
	cos	x	= boxFloat64 (primFloat64U_cos    (unboxFloat64 x))
	acos	x	= boxFloat64 (primFloat64U_acos   (unboxFloat64 x))
	tan	x	= boxFloat64 (primFloat64U_tan    (unboxFloat64 x))
	atan	x	= boxFloat64 (primFloat64U_atan   (unboxFloat64 x))


instance Accum Float64 where
	(+=) a b	= a := (a + b)


-- Other ----------------------------------------------------------------------
-- The Haskell versions of round and floor are also conversions.
round64 x	= truncate64 (fround x)
floor64 x 	= truncate64 (ffloor x)

project Float64 where
 clamp :: Float64 -> Float64 -> Float64 -> Float64 
 clamp x a b
	| x < a		= a
	| x > b		= b
	| otherwise	= x

