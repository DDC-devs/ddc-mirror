{-# OPTIONS -no-implicit-prelude #-}

module	Data.Numeric.Int64

import	Data.Numeric.Int64U
	DDC.Runtime.Store
	DDC.Runtime.Alloc
	Class.Eq
	Class.Ord
	Class.Num
	Class.Integral
	Class.Copy
	Class.Update
	Base.Thunk


-- Boxing ---------------------------------------------------------------------
boxInt64 :: Int64# -> Int64
boxInt64 u
 = do	w	= primAlloc_dataRS 0# 8#
	poke (castToPtrInt64 (peekDataRS_payload w)) u
	w


unboxInt64 :: Int64 -> Int64#
unboxInt64 w
 = do	w'	= force w
	peekOn w (castToPtrInt64 (peekDataRS_payload w'))


-- Instances ------------------------------------------------------------------
instance Eq Int64 where
	(==) x y	= boxBool   (primInt64U_eq  (unboxInt64 x) (unboxInt64 y))
	(/=) x y	= boxBool   (primInt64U_neq (unboxInt64 x) (unboxInt64 y))
		

instance Ord Int64 where
	(>) x y		= boxBool   (primInt64U_gt  (unboxInt64 x) (unboxInt64 y))
	(<) x y		= boxBool   (primInt64U_lt  (unboxInt64 x) (unboxInt64 y))
	(>=) x y	= boxBool   (primInt64U_ge  (unboxInt64 x) (unboxInt64 y))
	(<=) x y	= boxBool   (primInt64U_le  (unboxInt64 x) (unboxInt64 y))

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
	 		\= GT

	min x y		= if x <= y then x else y
	max x y		= if x >= y then x else y


instance Copy Int64 where
 	copy x 		= boxInt64 (unboxInt64 x)


instance Updatable Int64 where
	(:=) w1 w2
	 = do	w1'	= force w1
		pokeOn w1 (castToPtrInt64 (peekDataRS_payload w1)) (unboxInt64 w2)
		()


instance Num Int64 where
	negate x 	= boxInt64 (primInt64U_neg (unboxInt64 x))
	(+) x y		= boxInt64 (primInt64U_add (unboxInt64 x) (unboxInt64 y))
	(-) x y		= boxInt64 (primInt64U_sub (unboxInt64 x) (unboxInt64 y))
	(*) x y		= boxInt64 (primInt64U_mul (unboxInt64 x) (unboxInt64 y))

	pow x n = pow' n 1i64
	 where	pow' :: Int64 -> Int64 -> Int64
		pow' 0i64 acc = acc
		pow' n    acc = pow' (n - 1i64) (acc * x)


instance Integral Int64 where
	div x y		= boxInt64 (primInt64U_div (unboxInt64 x) (unboxInt64 y))
	mod x y		= boxInt64 (primInt64U_mod (unboxInt64 x) (unboxInt64 y))
	

instance Accum Int64 where
	(+=) a b	= a := (a + b)


