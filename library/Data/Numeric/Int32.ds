{-# OPTIONS -no-implicit-prelude #-}

module	Data.Numeric.Int32

import	Base
	Data.Bool
	Data.Numeric.Int32U
	Class.Copy
	Class.Eq
	Class.Num
	Class.Ord
	Class.Update

infixl 7  `quot`, `div`, `mod`

project Int32 
 with	{ min; max }

-- Boxing ---------------------------------------------------------------------
foreign import "_boxInt32"
 boxInt32 	:: Int32# -> Int32
		:$ Int32# -> Obj

foreign import "_unboxInt32"
 unboxInt32	:: Int32{read} -> Int32#
		:$ Obj -> Int32#

-- Arithmetic -----------------------------------------------------------------
foreign import "primInt32_neg"
 primInt32_neg  :: Int32{read} -> Int32

foreign import "primInt32_add"
 primInt32_add	:: Int32{read} -> Int32{read} -> Int32

foreign import "primInt32_sub"	
 primInt32_sub	:: Int32{read} -> Int32{read} -> Int32

foreign import "primInt32_mul"	
 primInt32_mul	:: Int32{read} -> Int32{read} -> Int32

foreign import "primInt32_div"	
 primInt32_div	:: Int32{read} -> Int32{read} -> Int32

foreign import "primInt32_mod"	
 primInt32_mod	:: Int32{read} -> Int32{read} -> Int32


-- Comparisons ----------------------------------------------------------------
foreign import "primInt32_eq"	
 primInt32_eq	:: Int32{read} -> Int32{read} -> Bool

foreign import "primInt32_neq"	
 primInt32_neq	:: Int32{read} -> Int32{read} -> Bool

foreign import "primInt32_gt"	
 primInt32_gt	:: Int32{read} -> Int32{read} -> Bool

foreign import "primInt32_lt"	
 primInt32_lt	:: Int32{read} -> Int32{read} -> Bool

foreign import "primInt32_ge"	
 primInt32_ge	:: Int32{read} -> Int32{read} -> Bool

foreign import "primInt32_le"	
 primInt32_le	:: Int32{read} -> Int32{read} -> Bool


-- Update ---------------------------------------------------------------------
foreign import "primInt32_update"
 primInt32_update :: Int32{write} -> Int32{read} -> ()


-- Instances ------------------------------------------------------------------
instance Num Int32 where 
 	(+) 		= primInt32_add
	(-) 		= primInt32_sub
	(*) 		= primInt32_mul
	(/) 		= primInt32_div
	mod		= primInt32_mod
	negate		= primInt32_neg


instance Eq Int32 where
	(==)		= primInt32_eq
	(/=)		= primInt32_neq


instance Ord Int32 where
	(>)		= primInt32_gt
	(<)		= primInt32_lt
	(>=)		= primInt32_ge
	(<=)		= primInt32_le

	compare x y
	 | x == y	=  EQ
	 | x <= y	=  LT
	 		\= GT


instance Copy Int32 where
 	copy x 		= boxInt32 (unboxInt32 x)


instance Updatable Int32 where
	(:=)		= primInt32_update


instance Accum Int32 where
	(+=) a b	= primInt32_update a (primInt32_add a b)


-- Projections ----------------------------------------------------------------
-- | Take the minimum of two integers.
min :: Int32 -> Int32 -> Int32
min x y
 = if x <= y then x else y


-- | Take the maximum of two integers.
max :: Int32 -> Int32 -> Int32
max x y
 = if x >= y then x else y


-- | Modify an integer using a function.
(<>) :: Int32 -> (Int32 -> Int32) -> ()
(<>) x f
 = do 	x'	= f x
	x	:= x'


-- | Integer division truncated towards negative infinity
div :: Int32 -> Int32 -> Int32
div = primInt32_div


-- | Integer division truncated towards zero.
--   BUGS: This is wrong.
quot :: Int32 -> Int32 -> Int32
quot = primInt32_div


-- | Raise an integer to an integer power.
--   TODO: do this more efficiently.
pow :: Int32 -> Int32 -> Int32 
pow x n = pow' x n 1

pow' :: Int32 -> Int32 -> Int32 -> Int32
pow' x 0 acc = acc
pow' x n acc = pow' x (n - 1) (acc * x)





