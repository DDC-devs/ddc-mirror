{-# OPTIONS -no-implicit-prelude #-}

module	Data.Numeric.Float64U

import	Class.Eq
	Class.Num
	Class.Ord
	Class.Fractional
	Class.Floating


-- Arithmetic -----------------------------------------------------------------
foreign import "primFloat64U_neg"
 primFloat64U_neg	:: Float64# -> Float64#

foreign import "fabs"
 primFloat64U_abs  	:: Float64# -> Float64#

foreign import "primFloat64U_add"
 primFloat64U_add	:: Float64# -> Float64# -> Float64#

foreign import "primFloat64U_sub"
 primFloat64U_sub	:: Float64# -> Float64# -> Float64#

foreign import "primFloat64U_mul"
 primFloat64U_mul	:: Float64# -> Float64# -> Float64#

foreign import "primFloat64U_div"
 primFloat64U_div	:: Float64# -> Float64# -> Float64#


-- Comparisons ----------------------------------------------------------------
foreign import "primFloat64U_eq"
 primFloat64U_eq	:: Float64# -> Float64# -> Bool#

foreign import "primFloat64U_neq"
 primFloat64U_neq	:: Float64# -> Float64# -> Bool#

foreign import "primFloat64U_gt"
 primFloat64U_gt	:: Float64# -> Float64# -> Bool#

foreign import "primFloat64U_ge"
 primFloat64U_ge	:: Float64# -> Float64# -> Bool#

foreign import "primFloat64U_lt"
 primFloat64U_lt	:: Float64# -> Float64# -> Bool#

foreign import "primFloat64U_le"
 primFloat64U_le	:: Float64# -> Float64# -> Bool#


-- Trig -----------------------------------------------------------------------
foreign import "sin"
 primFloat64U_sin	:: Float64# -> Float64#

foreign import "asin"
 primFloat64U_asin	:: Float64# -> Float64#

foreign import "cos"
 primFloat64U_cos	:: Float64# -> Float64#
 
foreign import "acos"
 primFloat64U_acos	:: Float64# -> Float64#

foreign import "tan"
 primFloat64U_tan	:: Float64# -> Float64#
 
foreign import "atan"
 primFloat64U_atan	:: Float64# -> Float64#


-- Utils ----------------------------------------------------------------------
foreign import "trunc"
 primFloat64U_ftrunc	:: Float64# -> Float64#

foreign import "round"
 primFloat64U_fround	:: Float64# -> Float64#

foreign import "floor"
 primFloat64U_ffloor	:: Float64# -> Float64#

foreign import "fmod"
 primFloat64U_fmod	:: Float64# -> Float64# -> Float64#

foreign import "pow"
 primFloat64U_fpow	:: Float64# -> Float64# -> Float64#

foreign import "sqrt"
 primFloat64U_sqrt	:: Float64# -> Float64#

foreign import "log"
 primFloat64U_log	:: Float64# -> Float64#


-- Instances ------------------------------------------------------------------
instance Eq Float64# where
	(==) x y	= boxBool (primFloat64U_eq  x y)
	(/=) x y	= boxBool (primFloat64U_neq x y)


instance Ord Float64# where
	(>)		= primFloat64U_gt
	(<)		= primFloat64U_lt
	(>=)		= primFloat64U_ge
	(<=)		= primFloat64U_le


instance Num Float64# where 
	negate		= primFloat64U_neg
	abs		= primFloat64U_abs
 	(+) 		= primFloat64U_add
	(-) 		= primFloat64U_sub
	(*) 		= primFloat64U_mul


instance Fractional Float64# where
	(/) 		= primFloat64U_div


instance Floating Float64# where
	ftrunc		= primFloat64U_ftrunc
	fround		= primFloat64U_fround
	ffloor		= primFloat64U_ffloor
	fmod		= primFloat64U_fmod
	fpow		= primFloat64U_fpow
	sqrt		= primFloat64U_sqrt
	log		= primFloat64U_log

	sin		= primFloat64U_sin
	asin		= primFloat64U_asin
	cos		= primFloat64U_cos
	acos		= primFloat64U_acos
	tan		= primFloat64U_tan
	atan		= primFloat64U_atan
