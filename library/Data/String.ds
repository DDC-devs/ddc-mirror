{-# OPTIONS -no-implicit-prelude #-}

module	Data.String 
export	boxString
	(%)
	(%%)
	parens

import	Data.FlatString
	Data.Numeric.Int32
	Data.Numeric.Int64
	Data.Char
	Class.Eq
	Class.Copy
	Base


project String 
 with	{ box; isNul; isForced; force; length;  head }


-- Append ---------------------------------------------------------------------
infixr 7 %
infixr 7 %%

-- | Append one string to another.
--   TODO:	
--	It would be better if (%) avoided allocating an SAppend constructor
--	when either of its arguments was empty. However, this was make (%) have
--	a read effect, which interacts badly with the Show class because
--	the show fn isn't supposed include an effect which reads its return
--	string
--
--	This can be fixed once we can mask effects on fresh data.
--
--	To see the problem, change to the alternative definition and
--	compile library/Class/Show.ds with -O
--	
(%) a b   
    | a.isNul = b
    | b.isNul = a
             \= SAppend a b


-- | Append one string to another separated by a space.
(%%) a b = a % " " % b


-- Boxing ---------------------------------------------------------------------
-- | Box a string
boxString :: String# -> String
boxString strU
	= SChunk (box&{FlatString} strU)

box	= boxString


-- Instances ------------------------------------------------------------------
instance Eq String where
 (==) s1 s2
	| SChunk fs1	<- (copy s1).force
	, SChunk fs2	<- (copy s2).force
	= (stringU_compare fs1.danger_string fs2.danger_string) == 0#
	
 (/=) s1 s2
	= not (s1 == s2)
	

instance Copy String where	
 copy str
  = case str of
 	SChunk fs	-> SChunk  (copy fs)
	SAppend l r	-> SAppend (copy l) (copy r)


-- Simple Operations ----------------------------------------------------------
-- | Check whether a string contains no characters
isNul :: String -> Bool
isNul ss
 = case ss of
 	SChunk fs	-> ss.length == 0
	SAppend s1 s2	-> s1.isNul && s2.isNul


-- | Return how many characters are in this string
length :: String -> Int
length ss
  = case ss of 
	SChunk fs	-> fs.length
	SAppend l r	-> l.length + r.length


-- | Find the first character in this String.
head :: String -> Char32 
head (SChunk fs)	= fs.index 0

head (SAppend s1 s2)
	| isNul s1	=  head s2
			\= head s1


-- | If the string is empty then Nothing
--   otherwise take all but the first character of a string.
{-
tail :: String -> Maybe String
tail str	
	| length str == 0
	= Nothing

tail str
 = case flatten str of
	SChunk fs	-> 
-}


-- Forcing --------------------------------------------------------------------
-- | Check whether the string is represented by a single chunk.
isForced :: String -> Bool
isForced ss
 = case ss of 
	SChunk _	-> True
	_ 		-> False


-- | Return a new string that has the same contents as the old one, 
--   but is represented by a single chunk.
force :: String -> String
force str@(SChunk fs) = str
force str
 = do 	fsDest	= new&{FlatString} str.length
	appendToFlatString fsDest str
	SChunk fsDest

-- | Append the contents of a String to a FlatString
appendToFlatString :: FlatString -> String -> ()
appendToFlatString dest str
 = case str of
	SChunk fs
	 -> append&{FlatString} dest fs

	SAppend s1 s2	
	 -> do	appendToFlatString dest s1
		appendToFlatString dest s2



-- Pretty printing utils ------------------------------------------------------
-- | Wrap a string in parenthesis.
parens :: String -> String
parens ss	= "(" % ss % ")"

