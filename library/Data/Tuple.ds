{-# OPTIONS -no-implicit-prelude #-}

module	Data.Tuple
import	Base


-- Tuple2 ---------------------------------------------------------------------
data Tuple2 a b
	= Tuple2  { 
		x1	:: a;
		x2	:: b;
	}


-- | Take the first element of a pair.
fst :: (a, b) -> a
fst (a, b)	= a


-- | Take the second element of a pair.
snd :: (a, b) -> b
snd (a, b)	= b


-- | Convert an uncurried funtion to a curried function.
curry :: ((a, b) -> c) -> a -> b -> c
curry f x y	= f (x, y)


-- | Convert a curried function to an uncurried function.
uncurry :: (a -> b -> c) -> ((a, b) -> c)
uncurry f p	= f (fst p) (snd p)


-- | Swap the components of a pair.
swap :: (a,b) -> (b,a)
swap (a, b)	= (b, a)


-------------------------------------------------------------------------------
data Tuple3 a b c
	= Tuple3  {
		x1	:: a;
		x2	:: b;
		x3	:: c;
	}


data Tuple4 a b c d
	= Tuple4  {
		x1	:: a;
		x2	:: b;
		x3	:: c;
		x4	:: d;
	}


data Tuple5 a b c d e
	= Tuple5  {
		x1	:: a;
		x2	:: b;
		x3	:: c;
		x4	:: d;
		x5	:: e;
	}


data Tuple6 a b c d e f
	= Tuple6  {
		x1	:: a;
		x2	:: b;
		x3	:: c;
		x4	:: d;
		x5	:: e;
		x6	:: f;
	}


