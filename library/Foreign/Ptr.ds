{-# OPTIONS -no-implicit-prelude #-}
module Foreign.Ptr
import Base


-- Pointer Arithmetic ---------------------------------------------------------
-- TODO: make this a primitive.
foreign import "_PLUSPTR"
 plusPtr  :: Ptr# Word8# -> Int# -> Ptr# Word8#


-- Peeking and Poking ---------------------------------------------------------
-- TODO: these should really be primitives.

-- | Read a value from the address given by a pointer.
foreign import "_PEEK"
 peek	:: forall a. Ptr# a -> a


-- | Like `peek` but assign a read effect to the region holding the given object.
foreign import "_PEEKON"
 peekOn	:: forall (t :: % -> *) a
	.  t %r1 -> Ptr# a -(!e1)> a
	:- !e1 = !Read %r1
	:$ Obj -> Obj -> Obj

foreign import "_PEEKON"
 peekOnPtr
	:: forall (t :: % -> *) a
	.  Ptr# (t %r1) -> Ptr# a -(!e1)> a
	:- !e1 = !Read %r1
	:$ Obj -> Obj -> Obj


-- | Write a value to the address given by a pointer.
foreign import "_POKE"
 poke	:: forall a. Ptr# a -> a -> Void#


-- | Like `poke` but assign a write effect to the region holding the given object.
foreign import "_POKEON"
 pokeOn	:: forall (t :: % -> *) a
	.  t %r1 -> Ptr# a -> a -(!e1)> Void#
	:- !e1 = !Write %r1
	,  Mutable %r1
	:$ Obj -> Obj -> Obj -> Obj

foreign import "_POKEON"
 pokeOnPtr 
	:: forall (t :: % -> *) a
	.  Ptr# (t %r1) -> Ptr# a -> a -(!e1)> Void#
	:- !e1 = !Write %r1
	,  Mutable %r1
	:$ Obj -> Obj -> Obj -> Obj


-- Coercion -------------------------------------------------------------------
-- | A coersion is used to start treating something as though it has a given
--   representation.
--   Note that doing this may violate the alignment constraints of the data.
--   We can also lose region information, as we can instantiate it to something
--   like (coercePtr :: Ptr# (String# %r1) -> Ptr# (String# %r2)
--
foreign import  coercePtr	:: forall a b. Ptr# a -> Ptr# b
foreign import 	coercePtrToAddr	:: forall a.   Ptr# a -> Addr#
foreign import 	coerceAddrToPtr	:: forall a.   Addr# -> Ptr# a
	

