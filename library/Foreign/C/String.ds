{-# OPTIONS -no-implicit-prelude #-}

-- | Bindings for functions in string.h
module 	Foreign.C.String
import	Base
	DDC.Runtime.Store
	Class.Num

pragma	cc_includes ["string.h"]


-- Mem functions --------------------------------------------------------------
-- | Copy bytes from the second string into the first.
foreign import "memcpy" 
 memcpy	:: Ptr# Word8# -> Ptr# Word8# -> Int32# -> Int32#

-- | Write some characters into this string.
foreign import "memset"
 memset	:: Ptr# String# {write} -- destination string
	-> Int32# 		-- byte to use
	-> Int32# 		-- number of bytes to set
	-> Ptr# String#		-- same as desination string


-- Str functions --------------------------------------------------------------
-- | Get the length of a string.
foreign import "strlen"
 strlen	 :: Ptr# String# {read} -> Int#

-- | Copy the second string to the first.
--   TODO: This should really have a write effect
--	   but it's been omitted because FlatString.copy uses it, and that
--         needs to be pure. We can add the write effect when we have proper
--         effect masking working.
foreign import "strcpy"
 strcpy	:: Ptr# String# -> Ptr# String# {read} -> Void#

-- | Append a copy of the second string to the first.
foreign import "strcat"
 strcat	:: Ptr# String# {write} -> Ptr# String# {read} -> Void#

-- | Lexicographically compare null-terminated strings.
foreign import "strcmp"
 strcmp :: Ptr# String# {read} -> Ptr# String# {read} -> Int#

