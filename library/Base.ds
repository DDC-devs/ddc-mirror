{-# OPTIONS -no-implicit-prelude #-}
-- Key, wired in things
--  The compiler requires that all this stuff is in this module.
--  Don't change it or move it somewhere else unless you know what you're doing.
--
module Base

-- Abstract operational types -------------------------------------------------
-- TODO: Not sure if this is a good idea anymore.
--       Might want to ditch them.
data Obj
data Data
data Thunk


-- Unboxed Data types ---------------------------------------------------------
--  Single elements of unboxed type are passed by value, so they
--  don't need region annotations.
--
--  Functions which update data via a ptr like (Ptr# Word8#) will
--  have top level !Store effects which ensure synchronisation when
--  writing low level code.


-- | A Void# is used as the argument and/or return type for primitive functions
--   that do not take/return real values.
--   Don't use (Ptr# Void#) after C. Use Addr# for that instead.
--   The Void# constructor can be used as the parameter passed to a C function
--   whcih takes no parameters that is imported via the FFI.
data Void# = Void#


-- | A pointer to some thing.
--   A (Ptr# a) should always be a valid pointer, correctly aligned for
--   addressing some type 'a'. It should also point to an actual 'a', except
--   in the case where we've just deallocated memory with 'free' or similar.
--   Do not use to hold NULL pointers. Instead, test a possibly zero valued
--   Addr# before casting it to the appropriate Ptr# type.
data Ptr# a


-- | A raw store address, with enough precision to directly address any byte of
--   memory reachable from the process. Equivalent to (void*) from C.
--   An Addr# has a slightly different meaning to Ptr#, as the actual Addr#
--   value isn't nessessaraly expected to point to an actual object, or even to
--   memory owned by the running process.
foreign import data "Addr"	Addr#

-- Unboxed booleans.
foreign import data "Bool"	Bool#

-- Unboxed numeric types.
foreign import data "Word8"	Word8#
foreign import data "Word16"	Word16#
foreign import data "Word32"	Word32#
foreign import data "Word64" 	Word64#

foreign import data "Int8"	Int8#
foreign import data "Int16"	Int16#
foreign import data "Int32"	Int32#
foreign import data "Int64"	Int64#

foreign import data "Float32"	Float32#
foreign import data "Float64"	Float64#


-- Boxed Data Types -----------------------------------------------------------
data Unit = Unit

-- | The runtime system requires that False is the first constructor,
--   so it has a tag of 0. Don't swap them around.
data Bool
	= False
	| True

data Word8	:: % -> *
data Word16	:: % -> *
data Word32	:: % -> *
data Word64	:: % -> *

data Int8	:: % -> *
data Int16	:: % -> *
data Int32	:: % -> *
data Int64	:: % -> *

data Float32	:: % -> *
data Float64	:: % -> *

data Char32	:: % -> *

data Ref a
	= Ref { x :: a }


-- Region Classes -------------------------------------------------------------
class Const	:: % -> +
class Mutable	:: % -> +
class Lazy	:: % -> +
class Direct	:: % -> +


-- Effect Classes -------------------------------------------------------------
class Pure	:: ! -> +


-- Value Type Classes ---------------------------------------------------------
class ConstT	:: * -> +
class MutableT	:: * -> +
class DirectT	:: * -> +
class LazyT	:: * -> +
class LazyH	:: * -> +
class Shape2	:: * -> * -> +
class Shape3	:: * -> * -> * -> +
class Shape4	:: * -> * -> * -> * -> +
class Shape5	:: * -> * -> * -> * -> * -> +
class Shape6	:: * -> * -> * -> * -> * -> * -> +


-- Effects --------------------------------------------------------------------
effect !Sync	:: !		-- Total synchronisation.
effect !Read	:: % -> !	-- Read of some region.
effect !ReadT	:: * -> !	-- Deep read of an object.
effect !ReadH	:: * -> !	-- Read of top level constructor of an object.
effect !Write	:: % -> !	-- Write to some region.
effect !WriteT	:: * -> !	-- Write to whole object.


-- Strings --------------------------------------------------------------------
--  Unboxed strings are pointers to null-terminated blocks of utf8.
--  The blocks can be destructively updated, so we give the string a region.
foreign import data "String"  String# :: % -> *

-- | A FlatString contains null-terminated string along with length information
--   Layout: 0 maxLength :: Int32   -- max number of chars this string will hold.
--           4 length    :: Int32   -- number of chars currently used.
--           8 string    :: Word8.. -- string chars
data FlatString
	= FlatString

-- | Our string type supports fast append.
data String
	= SChunk  FlatString
	| SAppend String String


-- Exceptions -----------------------------------------------------------------
--  The Exception type carries information about what caused a particular
--  exception. All modules need this type decl, but we leave the code for the
--  top-level exeption handler in Control.Exception
--
data Exception
	-- | Some user defined string.
	= Exception String

	-- | Generated by the break keyword, to break out of an enclosing block.
	| ExceptionBreak

	-- | A generic IO exception.
	| ExceptionIO String

	-- | Thrown when pattern matching fails.
	| ExceptionCaseNoMatch
		FlatString	-- The name of the module that threw this error.
		Int 		-- Line number in the module.
		Int		-- Column number in the module.

	-- | Thrown when an array is accessed out of bounds.
	--   runtime/Prim/Array.c requires this constructor to have this
	--   specific type.
	| ExceptionArrayBounds
		Int	-- the actual size of the array
		Int	-- the requested index


-- Projections ----------------------------------------------------------------
--  These functions are used by the desugarer to make default data projections.
--  They are certainly not typesafe, and must be passed a forced object
--  (ie, not a suspension).
--
foreign import "primProjField"
 primProjField
 	:: forall a b
	.  a -> Int32# -(!e1)> b
	:- !e1 = !ReadH a
	:$ Data -> Int32# -> Obj

foreign import "primProjFieldR"
 primProjFieldR
 	:: forall a b
	.  a -> Int32# -(!e1)> b
	:- !e1 = !ReadH a
	:$ Data -> Int32# -> Obj


