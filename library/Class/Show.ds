
import	Base.Thunk
import	Data.List
import 	System.Console
import	Class.Out

class Show a where 
 show 	:: forall %r
	.  a -(!e1)> String %r
	:- !e1	= !{ !ReadT a }

instance Show Unit where
 show ss = "()"


instance Show String where
 show ss = "'" % copy ss % "'"

instance Show Int where
 show	= stringOfInt

instance Show Float where
 show	= stringOfFloat32

instance Show Bool where
 show b 
  = case b of 
	True	-> "True"
	False	-> "False"

-----------------------
infixr 7 %;
infixr 7 %%;

(%)  a b	= SAppend a b
(%%) a b	= a % " " % b

-----------------------
-- showListL
--
{-
showListL showX xx
 = case xx of {
	Nil -> "[]";
	Cons x xs
	 -> (%)@ "[" ((%)@ (showX@ x) (showListL2@ showX xs));
 };	 

showListL2 showX xx
 = case xx of {
 	Nil -> "]";
	Cons x xs 
	 -> (%)@ ", " ((%)@ (showX@ x) (showListL2@ showX xs));
 };

showListIntL 
	= showListL showInt;
-}
-----------------------
-- showList
--

instance Show (List Int) where
 show = showList show

showList  showX xx
 = "[" % showList2 showX xx;
 
showList2 showX xx
 = case xx of {
 	Nil	-> "]";
	
	Cons x xs
	 -> showX x 		% showList3 showX xs;
	 
	Append xs ys
	 -> showList2 showX xs 	% showList3 showX ys;
 };
 
showList3 showX xx
 = case xx of {
 	Nil 	-> "]";

	Cons x xs
	 -> ", " 	% showX x	% showList3 showX xs;
	 
	Append xs ys
	 -> showList3 showX xs 		% showList3 showX ys;
 };


showListInt :: [Int] -> String;
showListInt 
	= showList show;

print :: String -> ();
print xx
 = case xx of {
 	SChunk x	
	-> printString xx;

	SAppend s1 s2	
	-> do {	print s1;
		print s2; };
 };	

println :: String -> ();
println s	= print (s % "\n");

concats xx
 = case xx of {
	Nil		-> "";
 	Cons x xs	-> SAppend x (concats xs);
 };

parens :: String -> String
parens ss	= "(" % ss % ")"

-- We're using the Out class until dictionary passing comes online and we can
--	make 'print' polymoprhic.
instance Out Int where
 out x	= println $ show x

instance Out Float where
 out x	= println $ show x

instance Out String where
 out x	= println (show x)


