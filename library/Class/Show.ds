
import	Base.Thunk
import	Data.List
import 	System.Console
import	Class.Out

-- The show class for converting things to string
class Show a where 
 show 	:: forall %r
	.  a -(!e1)> String %r
	:- !e1	= !{ !ReadT a }


-- The string paste operator
infixr 7 %;
infixr 7 %%;

(%)  a b	= SAppend a b
(%%) a b	= a % " " % b


-- Instances for Show are defined here instead of in the Data.* modules so we don't 
--	have to worry about recursive module definitions.

-- Simple Instances 
instance Show Unit where
 show ss = "()"

instance Show Char where
 show ss = "'" % stringOfChar ss % "'"

instance Show String where
 show ss = "'" % copy ss % "'"

instance Show Int where
 show	= stringOfInt

instance Show Float where
 show	= stringOfFloat32

instance Show Bool where
 show True	= "True"
 show False	= "False"


-- Show a list lazilly
showListL showX xx
 = case xx of 
	Nil -> "[]"
	Cons x xs
	 -> (%) @ "[" ( (%) @ (showX @ x) (showListL2 @ showX xs))

showListL2 showX xx
 = case xx of 
 	Nil -> "]"
	Cons x xs 
	 -> (%)@ ", " ((%)@ (showX@ x) (showListL2@ showX xs))

-- Show a list of ints, lazilly
showListIntL :: [Int] -> String
showListIntL 
	= showListL show


-- Show a list
instance Show [Int] where
 show = showList show

instance Show [Char] where
 show = showList show

showList  showX xx
 = "[" % showList2 showX xx;
 
showList2 showX xx
 = case xx of 
 	Nil	-> "]"
	
	Cons x xs
	 -> showX x 		% showList3 showX xs
	 
 
showList3 showX xx
 = case xx of 
 	Nil 	-> "]"

	Cons x xs
	 -> ", " 	% showX x	% showList3 showX xs


-- | Show a lits of ints
showListInt :: [Int] -> String;
showListInt 
	= showList show


-- | Print a string to the console
putStr :: String -> ()
putStr ss = print ss


-- | Print a string to the console.
--	This will become polymorphic when type classes are finished
print :: String -> ()
print xx
 = case xx of 
 	SChunk x	
	-> primPrintStringChunk xx

	SAppend s1 s2	
	-> do 	print s1
		print s2


-- | Print a string to the console followed by a newline.
println :: String -> ();
println s	= print (s % "\n");


-- | Contatenate some strings
concats :: [String] -> String
concats xx
 = case xx of
	Nil		-> ""
 	Cons x xs	-> SAppend x (concats xs)


-- | Wrap a string in parens
parens :: String -> String
parens ss	= "(" % ss % ")"


-- Out ---------------------------------------------------------------------------------------------
-- We're using the Out class until dictionary passing comes online and we can
--	make 'print' polymoprhic.
instance Out Int where
 out x	= println $ show x

instance Out Float where
 out x	= println $ show x

instance Out String where
 out x	= println x

instance Out [Int] where
 out x	= println $ show x
