{-# OPTIONS -no-implicit-prelude #-}

module	Class.Monad
import	Base

infixl 1 >>, >>=

class Monad (m :: * -> *) where

 	return	:: forall a
		.  a -> m a

	(>>=)	:: forall a b !e0 $c0
		.  m a -> (a -(!e0 $c0)> m b) -(!e1 $c1)> m b
		:- !e1	= !e0 + !ReadT (m a)
		,  $c1	= ${x : m a}
 
	(>>)	:: forall a !e0 $c0
		.  m a -> m b -($c1)> m b
		:- !e1	= !ReadT (m a)
		,  $c1	= ${x : m a}
