{-# OPTIONS -no-implicit-prelude #-}

module Class.Integral
import Base

infixl 7  `quot`, `rem`, `div`, `mod`

class Integral a where

	quot	:: forall b c
		.  a -> b -(!e1 $c1)> c
		:- !e1 = !ReadT a + !ReadT b
		,  $c1 = ${x : a}
		,  Shape3 a b c

	rem	:: forall b c
		.  a -> b -(!e1 $c1)> c
		:- !e1 = !ReadT a + !ReadT b
		,  $c1 = ${x : a}
		,  Shape3 a b c

	div	:: forall b c
		.  a -> b -(!e1 $c1)> c
		:- !e1 = !ReadT a + !ReadT b
		,  $c1 = ${x : a}
		,  Shape3 a b c

	mod	:: forall b c
		.  a -> b -(!e1 $c1)> c
		:- !e1 = !ReadT a + !ReadT b
		,  $c1 = ${x : a}
		,  Shape3 a b c
