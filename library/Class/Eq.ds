
import Base;
import Data.Bool;

infix  5 ==, /=;

class Eq a where
{
	(==)	:: forall b !e1 $c1 %r1
		.  a -> b -(!e1 $c1)> Bool %r1
		:- !e1 = !{ !ReadT a; !ReadT b }
		,  $c1 = ${ x :: a }
		,  Shape2 a b;

	(/=)	:: forall b !e1 $c1 %r1
		.  a -> b -(!e1 $c1)> Bool %r1
		:- !e1 = !{ !ReadT a; !ReadT b }
		,  $c1 = ${ x :: a }
		,  Shape2 a b;


	(#==)	:: forall b !e1 $c1 %r1
		.  a -> b -(!e1 $c1)> Bool# %r1
		:- !e1 = !{ !ReadT a; !ReadT b }
		,  $c1 = ${ x :: a }
		,  Shape2 a b;

	(#/=)	:: forall b !e1 $c1 %r1
		.  a -> b -(!e1 $c1)> Bool# %r1
		:- !e1 = !{ !ReadT a; !ReadT b }
		,  $c1 = ${ x :: a }
		,  Shape2 a b;

}


