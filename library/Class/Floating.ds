{-# OPTIONS -no-implicit-prelude #-}

module Class.Floating
import Base

class Floating a where

	ftrunc	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	fround	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	ffloor	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	fmod	:: forall b c
		.  a -> b -(!e1 $c1)> c
		:- !e1 = !{ !ReadT a; !ReadT b}
		,  $c1 = x : a
		,  Shape3 a b c

	fpow	:: forall b c
		.  a -> b -(!e1 $c1)> c
		:- !e1 = !{ !ReadT a; !ReadT b }
		,  $c1 = x : a
		,  Shape3 a b c

	sqrt	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	log	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	sin	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	asin	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	cos	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	acos	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	tan	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

	atan	:: forall b
		.  a -(!e1)> b
		:- !e1 = !ReadT a
		,  Shape2 a b

