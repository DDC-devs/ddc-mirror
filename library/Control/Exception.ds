{-# OPTIONS -no-implicit-prelude #-}

module	Control.Exception
import	Base
	Data.Numeric.Int32
	Data.String
	Class.Show.Numeric
	System.Console
	Control.Imperative

-- Functions whic explicitly throw an exception have the Throw effect.
--  Non-exhaustive pattern match, and array bounds exceptions are not included
--  also throw exceptions, but don't have the effect.
--  TODO: I think we want to follow GHC and use imprecise excepions,
--        which don't use a throw effect.
effect !Throw	:: !


foreign import "primException_init"
 primExceptionInit
	:: forall %r1
	.  Int %r1 -> ()
	:$ Obj -> Obj

foreign import "primException_try"	
 primTry
	:: forall a %r !e1 !e2 $c1
	.  (() -(!e1 $c1)> a) -> (Exception %r -(!e2)> a) -(!e3 $c3)> a
	:- !e3 = !{ !e1; !e2 }
	,  $c3 = f : $c1
	:$ Obj -> Obj -> Obj
		
foreign import "primException_throw"
 primThrow
	:: forall a %r
	.  Exception %r -(!e1)> a
	:- !e1 = !{ !Throw }
	:$ Obj -> Obj

foreign import "primException_throw"
 primThrow_silent
	:: forall a %r
	.  Exception %r -> a
	:$ Obj -> Obj


foreign import "primException_handleUncaught"
 primHandleUncaught
	:: forall a %r
	.  Exception %r -> a
	:$ Obj -> Obj


foreign import "exit"
 exitU :: Int32# -> a
 

error :: String -> a
error ss = primThrow_silent @ (Exception ss)

-- TODO: This doesn't work due to inferencer bug.
-- undefined :: a
-- undefined = primThrow_silent @ (Exception "undefined")

exit code	
 = do	exitU (unboxInt32 code)
 	()

		
-- | This is the top level exception handler which wraps the main function.
--	It catches unhandled exceptions from the user program and prints a nice error message.
topHandle :: (() -> a) -> a
topHandle f
 =	try f ()
	catch 
		Exception msg	
		 -> 	print	$ "*** DDC RTS: Caught exception - " % msg % "\n"

		ExceptionIO	
		 -> 	print	$ "*** DDC RTS: Caught IO exception.\n"
		 		% "\n"

		ExceptionCaseNoMatch name line column
		 -> 	print	$ "*** DDC RTS: Non-exhaustive patterns in "
		 		% SChunk name
				% ":" % showInt32 line % ":" % showInt32 column
				% "\n\n"

		ExceptionArrayBounds size ix
		 ->	print	$ "*** DDC RTS: Array bounds exception.\n"
				% "      Tried to access array at index: " % showInt32 ix	% "\n"
				% "           which is outside of range: [0 .. " % showInt32 (size - 1) % "]\n"
				% "\n"
	with exit 1


-- A break gate.
--	Evaluate this function
--	if it throws a break exception then return normally.
gate :: (() -> ()) -> ()
gate f	
 = 	try f ()
 	catch	ExceptionBreak	-> ()


-- A looping break gate.
--	Evaluate this function endlessly
--	if it throws a break exception then return normally. 
gateLoop :: (() -> ()) -> ()
gateLoop f 
 = 	try loop f
 	catch	ExceptionBreak	-> ()


