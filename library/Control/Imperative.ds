
import	Base
import	Data.Bool

foreign import extern 
 primControl_while 
	:: forall a %r1 !e1 !e2
	.  (() -(!e1)> Bool %r1) -> (() -(!e2)> a) -(!e3)> ()
	:- !e3 	= !{ !Read %r1; !e1; !e2 }
	:$ Obj -> Obj -> Obj

foreign import extern
 primControl_break
	:: forall a
	. () -> a
	:$ Obj -> Obj

foreign import extern	
 primControl_when
	:: forall a %r1 !e1 !e2 
	.  (() -(!e1)> Bool %r1) -> (() -(!e2)> a) -(!e3)> ()
	:- !e3 	= !{ !Read %r1; !e1; !e2 }
	:$ Obj -> Obj -> Obj

foreign import extern
 primControl_unless
	:: forall a %r1 !e1 !e2
	.  (() -(!e1)> Bool %r1) -> (() -(!e2)> a) -(!e3)> ()
	:- !e3 	= !{ !Read %r1; !e1; !e2 }
	:$ Obj -> Obj -> Obj

-- | endlessly call this function
loop :: (() -> a) -> b
loop f
 = do	f ()
	loop f



