
module DDC.Type.Pretty
import DDC.Type.Exp

-- Name -----------------------------------------------------------------------
pprN :: Name -> String
pprN n		= n.string


-- Bind -----------------------------------------------------------------------
pprB :: Bind -> String
pprB (BVar n)	= pprN n


-- Bound ----------------------------------------------------------------------
pprU :: Bound -> String
pprU (UVar n)	= pprN n


-- Super ---------------------------------------------------------------------
pprS :: Super -> String
pprS ss
  = case ss of
	SProp		-> "+"
	SBox		-> "[]"
	SFun k1 s2	-> pprLeftK k1 % " -> " % pprS s2


-- KiCon ---------------------------------------------------------------------
pprKC :: KiCon -> String
pprKC kc
  = case kc of
	KiCon name			-> pprN name
	KiConBox			-> "[]"
	KiConValue			-> "*"
	KiConRegion			-> "%"
	KiConEffect			-> "!"
	KiConClosure			-> "$"
	KiConMutable			-> "Mutable"
	KiConDeepMutable		-> "DeepMutable"
	KiConConst			-> "Const"
	KiConDeepConst			-> "DeepConst"
	KiConLazy			-> "Lazy"
	KiConHeadLazy			-> "HeadLazy"
	KiConDirect			-> "Direct"
	KiConPure			-> "Pure"
	KiConEmpty			-> "Empty"


-- Kind -----------------------------------------------------------------------
pprK :: Kind -> String
pprK kk
 = case kk of
	KNil		-> "{- KNil -}"
	KCon kc		-> pprKC kc
	KFun k1 k2	-> pprLeftK k1 %% "->" %% pprK k2
	KApp k1 t2	-> pprK k1 %% pprT t2

pprLeftK :: Kind -> String
pprLeftK kk
 = case kk of
	KFun{}		-> parens $ pprK kk
	KApp{}		-> parens $ pprK kk
	_		-> pprK kk


-- Type -----------------------------------------------------------------------
pprT _ = "TYPE"
	
