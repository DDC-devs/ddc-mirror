{-# OPTIONS -no-implicit-prelude #-}

-- Hooks onto DDC's runtime primitives.
--	This gives direct access to the store.
--	Sooo many ways to crash and burn
--

-- All low level operations should have this effect.
--	But we can't mask it yet so its been left out.
--	Make sure your stmts have enough data dependencies, else badness.
module	DDC.Runtime.Store
import	Base

-- DataR -------------------------------------------------------------------------------------------
-- | Get the size of this entire DataR object.
foreign import "primStore_peekDataR_size"
 peekDataR_size	
 	:: forall a. a -> Int32#

	
-- | Get a pointer to the payload of this DataR object.
foreign import "primStore_peekDataR_payload"
 peekDataR_payload
 	:: forall a. a -> Ptr# Word8#


-- | Get a pointer to the payload of this DataR object.
foreign import "primStore_peekDataRS_payload"
 peekDataRS_payload
 	:: forall a. a -> Ptr# Word8#
	

-- Ptr ---------------------------------------------------------------------------------------------
-- | Advances the pointer by the given offset in bytes
foreign import "_PLUSPTR"
 plusPtr	:: Ptr# Word8# -> Int# -> Ptr# Word8#

foreign import "_PEEK"
 peek		:: forall a. Ptr# a -> a

foreign import "_POKE"
 poke		:: forall a. Ptr# a -> a -> Void#


-- Poke --------------------------------------------------------------------------------------------
foreign import "primStore_pokeInt32"
 pokeInt32 	:: Ptr# Int32# -> Int32# -> Void#


-- Casting -----------------------------------------------------------------------------------------
-- These should go somewhere else
--
foreign import "(Word8 *)"
 castToPtrWord8
 	:: forall a
	.  Ptr# a -> Ptr# Word8#

foreign import "(Char32 *)"
 castToPtrChar32
 	:: forall a 
 	.  Ptr# a -> Ptr# Char32#

foreign import "(Int32 *)"
 castToPtrInt32
 	:: forall a
	.  Ptr# a -> Ptr# Int32#

foreign import "(Word32 *)"
 castToPtrWord32
 	:: forall a
	.  Ptr# a -> Ptr# Word32#


-- TODO: redo these as peek/poke functions.
foreign import "primInt32U_read"
 primInt32U_read
 	:: forall a 
	.  a -> Int32# -> Int32#		-- obj, offset (in bytes), result.
	:$ Data -> Int32# -> Int32#
	
foreign import "primInt32U_write"
 primInt32U_write
 	:: forall a
	.  a -> Int32# -> Int32# -> Void#	-- obj, offset (in bytes), data.
	:$ Data -> Int32# -> Int32# -> Void#

foreign import "primFloat32U_read"
 primFloat32U_read
 	:: forall a
	.  a -> Int32# -> Float32#		-- obj, offset (in bytes), result.
	:$ Data -> Int32# -> Float32#
	
foreign import "primFloat32U_write"
 primFloat32U_write
 	:: forall a
	.  a -> Int32# -> Float32# -> Void#	-- obj, offset (in bytes), data.
	:$ Data -> Int32# -> Float32# -> Void#
