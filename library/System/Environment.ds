{-# OPTIONS -no-implicit-prelude #-}
import Data.Numeric.Addr
import Data.Numeric.Int32
import Data.String
import Data.StringU
import Data.FlatString
import Data.List

export	getArgs
	getProgName
	getEnv
	argCount
	getArgValue

effect !Environment :: !

-- | Number of arguments accepted on the command line.
foreign import "_ddcArgCount"
 argCountU :: Int32#

argCount = boxInt32 argCountU


-- | Get the value of a command line argument.
foreign import "primArgValue"
 getArgValueU 	:: Int32# -(!e1)> Ptr# String#
		:- !e1	= !Environment

getArgValue ix
 = boxString (getArgValueU (unboxInt32 ix))


-- | Get an environment variable.
foreign import "getenv"
 getEnvU	:: Ptr# String# {read} 		-- name of variable.
		-> Addr#			-- either zero or a pointer to a string.


getEnv 	:: String -> Maybe String
getEnv name
 | SChunk flat_name	<- (copy name).force
 = do	s	= getEnvU flat_name.unsafeUnbox
	case primAddrU_isZero s of
 	 true#  -> Nothing
	 false# -> Just (SChunk (box&{FlatString} (coerceAddrToPtr s)))


getArgs :: () -> [String]
getArgs ()
 = map getArgValue [ 1 .. argCount ]


getProgName :: () -> String
getProgName ()
 = getArgValue 0
