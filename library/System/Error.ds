
import 	Base
import	Base.Thunk
import	Data.Int
import	Data.String

effect !Error	:: !

-- | Throw an error exception
foreign import extern "primError"
	error
		:: forall a %r1
		.  String %r1	-(!e1)> a
		:- !e1	= !{ !Error }
		:$ Obj -> Obj

-- | Throw an error exception, asynchronosly
foreign import extern "primError"
	errorNoEff
	 	:: forall a %r1
		.  String %r1 -> a
		:$ Obj -> Obj

-- | Throw an error when this value is forced.
errorL str	= errorNoEff @ str

-- | End the program
foreign import extern "primExit"
	exit	:: forall a %r1
		.  Int %r1 -(!e1)> a
		:- !e1 = !{ !Error }
		:$ Obj -> Obj

