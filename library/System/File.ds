{-# OPTIONS -no-implicit-prelude #-}

import Base
import Data.Numeric.Addr
import Data.String
import Data.Maybe
import Foreign.Ptr
import Foreign.C.StdIO


-- | Try to open a file.
--   If the file can be opened then returns the address of the FILE#.
--   Otherwise returns 0#.
openFile_addr 
	:: String 		-- ^ File name.
	-> String 		-- ^ fopen mode string.
	-> Addr#

openFile_addr name mode
	| SChunk name_flat	<- (copy name).force
	, SChunk mode_flat	<- (copy mode).force
	= fopenU (name_flat.unsafeUnbox) (mode_flat.unsafeUnbox)


-- | Get the length of the file with this path.
--   If the file can't be opened then `Nothing`.
file_length :: String -> Maybe Int
file_length name
 = do 	addr	= openFile_addr name "r+"
	case primAddrU_isZero addr of
	 true#  -> Nothing
	 false# -> do
		file	= coerceAddrToPtr addr
		fseekU file 0# file_SEEK_END
		Just (boxInt32 (ftellU file))


-- | Read the contents of the file at this path.
--   If the file can't be opened then `Nothing`.
file_read :: String -> Maybe String
file_read name
 = do	addr	= openFile_addr name "r+"

	case primAddrU_isZero addr of
	 true#	-> Nothing
	 false# -> do
		file	= coerceAddrToPtr addr
		
		fseekU file 0# file_SEEK_END
		len 	= boxInt32 (ftellU file)
		
		fs	= new&{FlatString} len
		fseekU file 0# file_SEEK_SET
		len'	= freadU (fs.unsafeUnbox) (unboxInt32 len) 1# file

		if (boxInt32 len') /= 1 && boxInt32 (feofU file) /= 0
	 	 then Nothing
	 	 else do
			fs.setLength len
			Just (SChunk fs)

