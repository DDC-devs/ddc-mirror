
import Base;
import Data.String;
import Control.Exception;

data FILE# %r1	foreign "FILE";
effect !File	:: !;

-- fopen
foreign import extern "fopen"
 fopenU :: elaborate 
 	   		String# 		-- fileName 
	-> 		String# 		-- mode
	-(!File)> 	Ptr# FILE#;
 
-- fread
foreign import extern "fread"
 freadU :: elaborate
 	   (mutable	String#)		-- buffer to write into 
	-> 		Int32# 			-- size of member
	-> 		Int32# 			-- number of members to read
	-> 		Ptr# FILE# 		-- file to read from
	-(!File)>	Int32#; 		-- number of members read

-- fseek
foreign import extern "fseek"
 fseekU	:: elaborate
 			Ptr# FILE# 		-- file
	-> 		Int32#			-- offset
	-> 		Int32#			-- whence SEEK_SET, SEEK_END or SEEK_CUR
	-(!File)> 	Int32#;			-- 0 on success, -1 on fail and set errno

-- file position constants
foreign import extern "SEEK_SET"
 file_SEEK_SET :: elaborate Int32#;

foreign import extern "SEEK_CUR" 
 file_SEEK_CUR :: elaborate Int32#;

foreign import extern "SEEK_END" 
 file_SEEK_END :: elaborate Int32#;

-- ftell
foreign import extern "ftell"
 ftellU	
 	:: elaborate
			Ptr# FILE#		-- file
	-(!File)>	Int32#;			-- position in file


--- move along, nothing to see here...
foreign import extern "(Int32)"
 unsafe_castToInt32U 
 	:: forall a
	.  a -> Int32#;


-- | open a file
file_open 
	:: String 		-- ^ file name
	-> String 		-- ^ fopen mode string
	-> Ptr# FILE#

file_open name mode
 = do	name_flat	= name.flatten
 	mode_flat	= mode.flatten
 
 	file	= fopenU (dangerUnboxString name_flat) (dangerUnboxString mode_flat)

	case unsafe_castToInt32U file `primInt32U_eq` 0# of
		1#	-> throw ExceptionIO
		0#	-> ()
		
	file


-- | return the length of the file with this path
file_length :: String -> Int;
file_length name
 = do 	file	= file_open name "r+"

 	fseekU file 0# file_SEEK_END
	boxInt32 (ftellU file)
 
 
 -- | read the contents of the file at this path
file_read :: String -> String;
file_read name
 = do 	len	= file_length name
 	str	= newString len
	
	file	= file_open name "r+"
	
	freadU	(dangerUnboxString str) (unboxInt32 len) 1# file
	
	str




