{-# OPTIONS -no-implicit-prelude #-}

import Base
import Data.String
import Data.Ptr
import Control.Exception

-- the foreign file type
foreign import data "FILE" FILE# :: % -> *

-- The effect of functions that poke the file system
effect !File	:: !;

-- fopen
foreign import "fopen"
 fopenU ::  	String# {read} 		-- fileName 
	-> 	String# {read}		-- mode
	-(!e1)> Ptr# FILE#
 	:- !e1 = !File

-- fread
foreign import "fread"
 freadU :: 	String# 	{write}	-- buffer to write into 
	-> 	Int32# 		{read}	-- size of member
	-> 	Int32# 		{read}	-- number of members to read
	-> 	Ptr# FILE#  	{read}	-- file to read from
	-(!e)>	Int32#	 		-- number of members read
	:- !e = !File
	
-- fseek
foreign import "fseek"
 fseekU	:: Ptr# FILE# 		{read}	-- file
	-> 	Int32#		{read}	-- offset
	-> 	Int32#		{read}	-- whence SEEK_SET, SEEK_END or SEEK_CUR
	-(!e)> 	Int32#			-- 0 on success, -1 on fail and set errno
	:- !e = !File

-- file position constants
foreign import "SEEK_SET"
 file_SEEK_SET :: Int32#

foreign import "SEEK_CUR" 
 file_SEEK_CUR :: Int32#

foreign import "SEEK_END" 
 file_SEEK_END :: Int32#

-- ftell
foreign import  "ftell"
 ftellU	:: 	Ptr# FILE#	{read}	-- file
	-(!e)>	Int32#			-- position in file
	:- !e = !File

--- move along, nothing to see here...
foreign import  "(Int32)"
 unsafe_castToInt32U 
 	:: forall a
	.  a -> Int32#;


-- | open a file
file_open 
	:: String 		-- ^ file name
	-> String 		-- ^ fopen mode string
	-> Ptr# FILE#

file_open name mode
 = do	name_flat	= (copy name).flatten
 	mode_flat	= (copy mode).flatten
 
 	file	= fopenU (dangerUnboxString name_flat) (dangerUnboxString mode_flat)

	case castToVoidPtr file `primPtrVoid_eq` primPtrVoid_null of
		true#	-> throw ExceptionIO ("file_open: Can't open file " % name)
		false#	-> ()
		
	file


-- | return the length of the file with this path
file_length :: String -> Int
file_length name
 = do 	file	= file_open name "r+"

 	fseekU file 0# file_SEEK_END
	boxInt32 (ftellU file)
 
 
 -- | read the contents of the file at this path
file_read :: String -> String
file_read name
 = do 	len	= file_length name
 	str	= newString len
	
	file	= file_open name "r+"
	
	freadU	(dangerUnboxString str) (unboxInt32 len) 1# file
	str




