{-# OPTIONS -no-implicit-prelude #-}

import	Base
	Data.StringU
	Data.String
	Data.Function
	System.File

pragma cc_includes [ "unistd.h" ]

-- an effect on stdin/stderr/stdout
effect !Console	:: !

foreign import "usleep"
 usleep	:: Int32# -(!Console)> ()

-- TODO: we really want a way to change the !File to a !Console effect...
foreign import	"fputs"
 fputsU_console 
 	::	Ptr# String#	{read}	-- string to write to file
 	-> 	Ptr# File#	{read} 	-- file handle
 	-(!e)>	Int
	:- !e = !Console

-- | Print a string to the console
putStr :: String -> ()
putStr ss = print ss


-- | Print a string to the console, with a newline.
putStrLn :: String -> ()
putStrLn ss = print (ss % "\n")


-- | Print a string to the console.
--	This will become polymorphic when type classes are finished
print :: String -> ()
print xx
 = case xx of 
 	SChunk fs@FlatString
	-> do	fputsU_console (fs.unsafeUnbox) stdout
		()

	SAppend s1 s2	
	-> do 	print s1
		print s2


-- | Print a string to the console followed by a newline.
println :: String -> ();
println s	= print (s % "\n");


