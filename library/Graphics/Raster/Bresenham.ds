
import Prelude;


drawBresenhamLine 
	frame widthB height cB
	x0B y0B x1B y1B 
 = do {
	x0	= unboxInt32 x0B;
	y0	= unboxInt32 y0B;
	x1	= unboxInt32 x1B;
	y1	= unboxInt32 y1B;
	width	= unboxInt32 widthB;
	c	= unboxInt32 cB;

	-- setup dy
	dy	= y1	- y0;
	dyP	= case dy `primInt32U_lt` 0# of {
			1#	-> 0# - dy;
			0#	-> dy;
		};

	stepy	= case dy `primInt32U_lt` 0# of {
			1#	-> 0# - width;
			0#	-> width;
		};

	dy2	= dyP * 2#;

	-- setup dx
	dx	= x1	- x0;
	dxP	= case dx `primInt32U_lt` 0# of {
			1#	-> 0# - dx;
			0#	-> dx;
		};
		
	stepx	= case dx `primInt32U_lt` 0# of {
			1#	-> 0# - 1#;
			0#	-> 1#;
		};
		
	dx2	= dxP * 2#;

	-- 
	y0w	= y0 * width;
	y1w	= y1 * width;

	-- set first pixel
	arrayUI_poke frame (x0 + y0w) c;
	
	case dx2 `primInt32U_gt` dy2 of {
		1# -> do {
			fraction1	= dy2 - dxP;

			drawLoopH frame c
				stepx	stepy	dx2	dy2
				x0	x1	y0w	fraction1;
		};
		
		0# -> do {
			fraction 	= dx2 - dyP;

			drawLoopV frame c
				stepx 	stepy	dx2	dy2
				x0	y0w	y1w	fraction;
		};
	};
};


drawLoopH 
	frame	c
	stepx	stepy
	dx2	dy2
	x0	x1	y0w 
	fraction

 = match {
 	|# x0 `primInt32U_eq` x1
	= ();
	
	|# fraction `primInt32U_ge` 0#
	= do {
		x0' :: Int32#;
		x0'		= x0		+ stepx;

		y0w' :: Int32#;
		y0w'		= y0w 		+ stepy;
		fraction'	= fraction 	- dx2 + dy2;
			
		arrayUI_poke frame (x0' + y0w') c;
		drawLoopH frame c stepx stepy dx2 dy2 x0' x1 y0w' fraction';
	};
	
	\= do {
		x0'		= x0		+ stepx;
		fraction'	= fraction	+ dy2;
				
		arrayUI_poke frame (x0' + y0w) c;
		drawLoopH frame c stepx stepy dx2 dy2 x0' x1 y0w fraction';
	};
 };		

		
 	
drawLoopV 
	frame	c
	stepx 	stepy				
	dx2	dy2
	x0	y0w	y1w
	fraction

 = match {
	|# y0w `primInt32U_eq` y1w 
	= ();
	
	|# fraction `primInt32U_ge` 0# 
	= do {
		x0' :: Int32#;
		x0'		= x0		+ stepx;

		y0w' :: Int32#;
		y0w'		= y0w		+ stepy;
		fraction'	= fraction	+ dx2 - dy2;
				
		arrayUI_poke frame (x0' + y0w') c;
		drawLoopV frame c stepx stepy dx2 dy2 x0' y0w' y1w fraction';
	};
	
	\= do {
		y0w'		= y0w		+ stepy;
		fraction'	= fraction	+ dx2;

		arrayUI_poke frame (x0 + y0w') c;
		drawLoopV frame c stepx stepy dx2 dy2 x0 y0w' y1w fraction';
	};
 };

				
				
	
{-
drawBresenhamLine 
	frame width height c 
	x0i y0i x1i y1i 
 = do {
	x0	= x0i + 0;
	y0	= y0i + 0;
	x1	= x1i + 0;
	y1	= y1i + 0;

	dy	= y1  - y0;
	dx	= x1  - x0;
        stepx	= 0;
	stepy	= 0;

        if dy < 0 
	then do { 
		dy	:= 0 - dy; 
		stepy	:= 0 - width; 
	} 
	else 	stepy	:= width;

        if dx < 0 
	then do { 	
		dx 	:= 0 - dx; 
		stepx 	:= 0 - 1; 
	} 
	else 	stepx	:= 1;

	dy	:= dy * 2;
 	dx	:= dx * 2;

	y0	:= y0 * width;
	y1	:= y1 * width;

	arrayUI_set frame (x0 + y0) c;

        if dx > dy
	then do {
		fraction	= dy - (dx / 2);

    		while (x0 /= x1) 
		do {
	                when (fraction >= 0) 
			do {
	                	y0		:= y0 		+ stepy;
	                	fraction	:= fraction 	- dx;
	                };
			
			x0		:= x0 + stepx;
			fraction	:= fraction + dy;
			
			arrayUI_set frame (x0 + y0) c;
            	};
	}

	else do {
		fraction 	= dx - (dy / 2);

            	while (y0 /= y1) 
		do {     
			when (fraction >= 0) 
			do {
				x0		:= x0		+ stepx;
				fraction	:= fraction	- dy;
			};
			
			y0 		:= y0 +  stepy;
			fraction	:= fraction + dx;

			arrayUI_set frame (x0 + y0) c;
		};
	};
};


-}
