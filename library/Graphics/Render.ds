
import Graphics.Primitive;
import Graphics.Frame;
import Math.Matrix33;

import Data.List;

-- | render some primitives in this frame
--   DANGER: 	Prims aren't clipped to the window. 
--		If you draw prims outside the window you'll corrupt the heap. 
--
renderPrims :: Frame -> [Primitive] -> ()
renderPrims frame prims
 	= renderPrims_withStack 
		frame 
		[(id&{Matrix33} (), Color 255 255 255)] 
		prims

renderPrims_withStack :: Frame -> [(Matrix33, Primitive)] -> [Primitive] -> ()
renderPrims_withStack frame ctmStack prims
 = do	foldl (renderPrim frame)
		ctmStack
		prims
	()

renderPrim frame ((ctm, co) : cs) prim
 = case prim of 
	Prims ps
	 -> 	foldl	(renderPrim frame)
	 		(Cons (ctm, co) cs)
			ps

	-- Shapes
 	Line{}	
	 -> do 	line'	= transformLine ctm prim
		renderLine frame co line'
		Cons (ctm, co) cs

	-- Transforms
 	Translate dx dy	
	 -> do 	ctm'	= ctm.mul (translate&{Matrix33} dx dy)
		Cons (ctm', co) cs

	Rotate theta	
	 -> do 	ctm'	= ctm.mul (rotate&{Matrix33} theta);
		Cons (ctm', co) cs

	Scale x  y	
	 -> do 	ctm'	= ctm.mul (scale&{Matrix33} x y)
		Cons (ctm', co) cs

	-- Color
	Color{}
	 -> 	Cons (ctm, prim) cs

	-- Stack
	Local ps
	 ->	foldl	(renderPrim frame)
			(Cons (ctm, co) cs)
			[ Push, Prims ps, Pop ]

	Push		-> Cons (ctm, co) (Cons (ctm, co) cs)
	Pop		-> cs


-- render a line in this frame
renderLine :: Frame -> Primitive -> Primitive -> ()
renderLine frame
	(Color r g b)
	(Line (Vec2 x0 y0) (Vec2 x1 y1))

 = 	frame.line
		(truncate x0)
		(truncate y0)
		(truncate x1)
		(truncate y1)
		(color&{Frame} r g b)


transformLine :: Matrix33 -> Primitive -> Primitive
transformLine ctm
	(Line (Vec2 x0 y0) (Vec2 x1 y1))
 = do 
 	p0'	= ctm.mulVec (Vec3 x0 y0 1.0)
	p1'	= ctm.mulVec (Vec3 x1 y1 1.0)
	
	Line (Vec2 p0'.x p0'.y) (Vec2 p1'.x p1'.y)

