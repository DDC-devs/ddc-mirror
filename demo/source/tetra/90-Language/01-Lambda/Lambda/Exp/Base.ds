
module Lambda.Exp.Base
export
{       show_Exp;
        show_Subst;
}
import Class.Show
import Data.Text
import Data.Tuple
where


-- | Represent names as text.
type Name = Text


-- | Untyped lambda calculus expressions.
data Exp where
        XVar    : Name  -> Exp
        XAbs    : Subst -> Name -> Exp -> Exp
        XApp    : Exp   -> Exp -> Exp

data Subst where
        Subst   : List (Tup2 Name Exp) -> Subst


show_Exp: Show Exp
 =  Show $ λxx
 -> case xx of
        XVar n     
         -> parens $ "XVar" %% show n
        
        XAbs ss n x
         -> parens $ "XAbs" %% show ss %% show n %% show x
        
        XApp x1 x2
         -> parens $ "XApp" %% show x1 %% show x2


show_Subst: Show Subst
 =  Show $ λxx
 -> case xx of
        Subst ls 
         -> parens $ "Subst" %% show ls

