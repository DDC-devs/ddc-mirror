
module Lambda.Eval.Step
export
{       show_SStep;
        step
}
import Lambda.Exp
import Data.Text
where


-- | Result of performing a single step for an expression.
data SStep (a: Data) where
        StepNone        : SStep a
        StepSome        : a -> SStep a
        StepError       : SStep a


show_SStep {Show a}: Show (SStep a)
 =  Show $ \xx
 -> case xx of
        StepNone        -> "StepNone"
        StepSome x      -> parens $ "StepSome" %% show x
        StepError       -> "StepError"


-- | Perform a single step reduction of the given expression.
step (xx: Exp): SStep Exp
 = case xx of
        XVar _          -> StepNone
        XAbs _ _ _      -> StepNone

        XApp (XAbs (Subst ps) nBind xBody) xArg
         -> let ss' = Subst (Cons (T2 nBind xArg) ps)
            in  StepSome $ applySubst ss' xBody

        XApp x1 x2
         -> case step x1 of
                StepNone
                 -> case step x2 of
                        StepNone        -> StepNone
                        StepSome x2'    -> StepSome $ XApp x1 x2'
                        StepError       -> StepError

                StepSome x1'            -> StepSome $ XApp x1' x2
                StepError               -> StepError

