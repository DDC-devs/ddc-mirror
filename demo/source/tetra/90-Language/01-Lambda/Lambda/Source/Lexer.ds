
module Lambda.Source.Lexer
export lexTokens
import Lambda.Source.Token
import Lambda.Exp.Base
import Control.Parsec
import Class.Show
import Data.Tuple
import Data.Text
where


-- | Lex a sequence of tokens.
lexTokens (xx: List Char): List Token
 = case lexToken xx of
        Nothing         -> Nil
        Just (T2 k xs)  -> Cons k (lexTokens xs)


-- | Lex a single token.
lexToken (xx: List Char): Maybe (Tup2 Token (List Char))
 = case xx of
    Nil                 -> Nothing
    Cons c xs
        -- Skip leading whitespace.
        | eq# c ' '     -> lexToken xs

        -- Punctuation.
        | eq# c '('     -> Just (T2 KBra    xs)
        | eq# c ')'     -> Just (T2 KKet    xs)
        | eq# c '\\'    -> Just (T2 KLambda xs)
        | eq# c '.'     -> Just (T2 KDot    xs)

        -- Names.
        | isLower c     -> lexKName xx
        | otherwise     -> Nothing


-- | Lex a variable name.
lexKName (xx: List Char)
        : Maybe (Tup2 Token (List Char))
 = go Nil xx
 where  
        go acc Nil              
         = do   name    = textOfCharList (reverse acc)
                Just $ T2 (KName name) Nil

        go acc (Cons x xs)   
         | isLower x
         = go (Cons x acc) xs

         | otherwise            
         = do   name    = textOfCharList (reverse acc)
                Just $ T2 (KName name) (Cons x xs)

