
module Main 
import System.IO.Console
import Data.List
where


-- | Unbounded streams, 
--   wraps a function that produces elements on demand.
data Stream (s a : Data) where
        MkStream : (s -> Step s a) -> s -> Stream s a

data Step (s a : Data) where
        Yield   : a -> s -> Step s a
        Skip    : s -> Step s a 
        Done    : Step s a

data Tup2 (a b : Data) where
        T2      : a -> b -> Tup2 a b


-- | Convert a list to a stream.
streamOfList (xx: List a): Stream (List a) a
 = MkStream step xx
 where  
        step (s1: List a)
         = case s1 of
                Nil       -> Done
                Cons x xs -> Yield x xs


-- | Convert a stream to a list.
listOfStream : Stream s a -> List a
listOfStream (MkStream f s0)
 = case f s0 of
        Yield x s1      -> Cons x (listOfStream (MkStream f s1))
        Skip  s1        -> listOfStream (MkStream f s1)
        Done            -> Nil


-- | Apply a function to every element of a stream.
smap : (a -> b) -> Stream s a -> Stream s b
smap f (MkStream stepA sA0)
 = MkStream stepB sA0
 where  
        stepB q 
         = case stepA q of
                Yield x sA1     -> Yield (f x) sA1
                Skip sA2        -> Skip sA2
                Done            -> Done


-- | Take the given number of elements from a stream.
stake : Nat -> Stream s a -> Stream (Tup2 s Nat) a
stake n (MkStream fA sA0)
 = MkStream stepB (T2 sA0 0)
 where  
        stepB (T2 sA ix)
         | ix >= n      
         = Done

         | otherwise     
         = case fA sA of
                Yield x sA2 -> Yield x (T2 sA2 (ix + 1))
                Skip sA3    -> Skip  (T2 sA3 ix)
                Done        -> Done


main ()
 = do   
        xx1     = enumFromTo 0 100
        ss1     = streamOfList xx1
        ss2     = stake 10 (smap (add 1) ss1)
        xx2     = listOfStream ss2
        writel (showNat (foldl add 0 xx2))

