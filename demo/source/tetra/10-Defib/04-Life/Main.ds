
module Main
import Cell
import World
import Data.Array
import Data.List
import System.IO.Console
import System.Posix.Unistd
import System.Runtime
where



-------------------------------------------------------------------------------
main ()
 = private r with {Read r; Write r; Alloc r}
   in do   
        world   = newWorld [r] 30 30
        setCell world 10 10 CellAlive
        setCell world 11 10 CellAlive
        setCell world 12 10 CellAlive
        setCell world 13 10 CellAlive
        setCell world 14 10 CellAlive
        setCell world 15 10 CellAlive
        setCell world 16 10 CellAlive
        setCell world 17 10 CellAlive

        animate world 0 100

        ()


animate (world:     World r)
        (frame max: Nat)
        : S (Read r + Alloc r + Sleep + Console + Runtime) Unit
 | frame >= max
 = do   writel $ showWorld world

 | otherwise
 = do   writel "world"

-- runtimeTraceHeap True
--        runtimeTraceObj  True True world

        writel  $ showWorld world
        world'  = stepWorld world
--        usleep 200000
        animate world' (frame + 1) max



