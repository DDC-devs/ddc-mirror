
module Main
import Cell
import World
import Data.Array
import Data.List
import System.IO.Console
import System.Posix.Unistd
import System.Runtime
where


main ()
 = private r with {Read r; Write r; Alloc r}
   in do   
        world   = newWorld [r] 60 40

        setCell world 30 20 CellAlive
        setCell world 29 20 CellAlive
        setCell world 30 21 CellAlive
        setCell world 30 19 CellAlive
        setCell world 31 19 CellAlive

        -- TODO: If we set this to 1000 frames then we eventually run out of space.
        -- The generated code for 'animate' allocates shadow stack slots for every
        -- iteration and slots deeper in the stack hold onto all the intermediate
        -- frames.
        animate world 0 100

        ()


animate (world:     World r)
        (frame max: Nat)
        : S (Read r + Alloc r + Sleep + Console + Runtime) Unit
 | frame >= max
 = do   writel $ showWorld world

 | otherwise
 = do   
        writel  $ showWorld world
        world'  = stepWorld world
--        usleep 100000
        animate world' (frame + 1) max

