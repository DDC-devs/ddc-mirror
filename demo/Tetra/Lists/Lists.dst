
module Lists where

data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a


singleton (x : a) : List a
 = Cons x Nil


append  (xx : List a) (yy : List a) : List a
 = case xx of
        Nil       -> yy
        Cons x xs -> Cons x (append xs yy)


reverse (xx : List a) : List a
 = case xx of
        Nil       -> Nil
        Cons x xs -> append (reverse xs) (singleton x)


map     (f : a -> b) (xx : List a) : List b
 = case xx of
        Nil       -> Nil
        Cons x xs -> Cons (f x) (map f xs)


mapS    [a b : Data] [e : Effect]
        (f : a -> S e b) (xx : List a) : S e (List b)
 = box case xx of
        Nil       -> Nil
        Cons x xs -> Cons (run f x) (run mapS f xs)

