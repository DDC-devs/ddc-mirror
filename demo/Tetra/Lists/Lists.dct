module Lists 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  singleton : [a : Data].a -> List a
    = /\(a : Data).
       \(x : a).
      Cons [a] x (Nil [a]);
  
  append : [a : Data].List a -> List a -> List a
    = /\(a : Data).
       \(xx yy : List a).
      case xx of {
        Nil  
         -> yy;
        Cons (x : a) (xs : List a) 
         -> Cons [a] x (append [a] xs yy)
      };
  
  reverse : [a : Data].List a -> List a
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> Nil [a];
        Cons (x : a) (xs : List a) 
         -> append [a] (reverse [a] xs) (singleton [a] x)
      };
  
  map : [a b : Data].(a -> b) -> List a -> List b
    = /\(a b : Data).
       \(f : a -> b).\(xx : List a).
      case xx of {
        Nil  
         -> Nil [b];
        Cons (x : a) (xs : List a) 
         -> Cons [b] (f x) (map [a] [b] f xs)
      };
  
  mapS : [a b : Data].[e : Effect].(a -> S e b) -> List a -> S e (List b)
    = /\(a b : Data)./\(e : Effect).
       \(f : a -> S e b).\(xx : List a).
      box
      case xx of {
        Nil  
         -> Nil [b];
        Cons (x : a) (xs : List a) 
         -> Cons [b]
                (run f x)
                (run mapS [a] [b] [e] f xs)
      }
}
