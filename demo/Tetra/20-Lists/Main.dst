
-- Demonstration of list combinators and combining commutable effects.
-- 
-- This module can be type-checked with "ddc -check <file>" but will not
-- compile to object code yet because back-end support for higher order
-- functions is not complete.
--
module Main 
export main 

-- | We assign the Console effect to computations that affect stdin or stdout.
import foreign abstract type
 Console  :: Effect

-- | Import basic functions from C land.
import foreign c value
 putStrLn :: [r : Region]. Ptr# r String# -> S Console Void#
 putStr   :: [r : Region]. Ptr# r String# -> S Console Void#
 showNat  :: [r : Region]. Nat#           -> Ptr# r String#

where

-- Define configurable syntax.
add x y = add# [Nat#] x y       -- used for (+)
sub x y = sub# [Nat#] x y       -- used for (-)
eq  x y = eq#  [Nat#] x y       -- used for (==)
ge  x y = ge#  [Nat#] x y       -- used for (>=)


-------------------------------------------------------------------------------
-- | Cons lists.
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a


-- | Construct a list containing a single element.
singleton (x : a) : List a
 = Cons x Nil


-- | Construct a range of values.
enumFromTo (start : Nat#) (end : Nat#)
 = case start >= end of
        True#           -> singleton start
        False#          -> Cons start (enumFromTo (start + 1) end)


-- | Apply a worker function to all elements of a list, 
--   yielding a new list.
mapS (f : a -> S e b) (xx : List a) : S e (List b)
 = box case xx of
        Nil             -> Nil
        Cons x xs       -> Cons (run f x) (run mapS f xs)


-- | Apply a function to all elements of a list, 
--   yielding nothing.
forS (xx : List a) (f : a -> S e Unit) : S e Unit
 = box case xx of
        Nil     -> ()

        Cons x xs       
         -> do  run f x
                run forS xs f


-- | Reduce a list to a single value.
foldS (f : a -> b -> S e b) (z : b) (xx0 : List a) : S e b
 = letrec 
        go (acc : b) (xx : List a) : S e b
         = box case xx of
                Nil             -> acc
                Cons x xs       -> run go (run f x acc) xs
   in   go z xx0    


-- | Keep elements of a list that match the given predicate.
filterS (f : a -> S e Bool#) (xx : List a) : S e (List a)
 = box case xx of
        Nil             -> Nil
        Cons x xs       
         -> case run f x of
                True#   -> Cons x (run filterS f xs)
                False#  -> run filterS f xs


main (_ : Unit) : S Console Unit
 = box private r with { Alloc r; Read r; Write r } in 
   do
        -- Create a demo list.
        xx      = enumFromTo 0 100

        -- Select only the even elements
        xx'     = run filterS (\(x : Nat#). box mod# x 2 == 0) xx

        -- Mutable reference to hold list length.
        ref     = run allocRef# [r] 0

        -- Eat the list, updating the mutable counter while printing
        -- the elements to the console.
        run forS xx' (\(x : Nat#).
         box do run writeRef# ref ((run readRef# ref) + 1)
                run putStrLn (showNat [r] x)
                ())
        
        -- Print out the final list length.
        run putStrLn (showNat [r] (run readRef# ref))
        ()

