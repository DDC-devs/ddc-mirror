
-- Demonstration of list combinators and combining commutable effects.
module Main 
export main 
import Data.Numeric.Nat
import Data.Ref; Data.List; Data.Maybe
import IO.Console
where

main (_ : Unit) : S Console Unit
 = box private r with { Alloc r; Read r; Write r } in 
   do
        -- Create a demo list.
        xx      = enumFromTo 0 100

        -- Select only the even elements
        xx'     = run filterS (\(x : Nat#). box rem# x 2 == 0) xx

        -- Mutable reference to hold list length.
        ref     = run allocRef [r] [Nat#] 0

        -- Eat the list, updating the mutable counter while printing
        -- the elements to the console.
        run forS xx' (\(x : Nat#).
         box do run writeRef ref ((run readRef ref) + 1)
                run putStrLn (showNat [r] x)
                ())
        
        -- Print out the final list length.
        run putStrLn (showNat [r] (run readRef ref))
        ()

