
-- Demonstration of list combinators and combining commutable effects.
module Main 
import Data.Numeric.Nat
import Data.Function; Data.Maybe; Data.List
import Data.Ref
import System.IO.Console
where

main (_: Unit): S Console Unit
 = private r with { Alloc r; Read r; Write r } in 
   do
        -- Create a demo list.
        xx      = enumFromTo 0 100

        -- Select only the even elements
        xx'     = filter (λx: Nat. rem# x 2 == 0) xx

        -- Mutable reference to hold list length.
        ref     = allocRef [r] [Nat] 0

        -- Eat the list, updating the mutable counter while printing
        -- the elements to the console.
        forS xx' (λx: Nat.
          do    writeRef ref ((readRef ref) + 1)
                writel (showNat x))
        
        -- Print out the final list length.
        writel $ showNat (readRef ref)



