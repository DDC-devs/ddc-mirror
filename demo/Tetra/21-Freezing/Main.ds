
-- Demonstration of type-safe freezing using capabilities.
module Main 
import Data.Numeric.Nat
import Data.Ref; Data.List; Data.Maybe
import System.IO.Console
where


-- Take the length of a list, using a local mutable reference.
-- The reference is allocated into an extension region, destructively 
-- initialized, then merged into the original region 'r1'. 
-- The fact that the reference is destructively initialized is not 
-- visible to the caller.
rlength [a : Data] [r1 : Region] 
        (xx : List a) 
        : S (Alloc r1) (Ref r1 Nat#)
 = box extend r1 using r2 with {Read r2; Write r2; Alloc r2} in     
   do   
        -- Allocate the reference into the extension region.
        ref       = run allocRef [r2] 0

        -- Destructively initialize the reference.
        run forS xx (\(_ : a). box
         do     x       = run readRef ref
                run writeRef ref (x + 1)
                ())

        -- Return the reference.
        ref


main (_ : Unit) : S Console Unit
 = box private r with { Alloc r; Read r } in 
   do
        -- Create a demo list.
        xx      = enumFromTo 0 100

        -- Count the length of the list.
        -- From this calling context, the fact that the ref is destructively
        -- initialized is not visible. 
        ref     = run rlength [Nat#] [r] xx

        -- Print out the final list length.
        run writel (showNat (run readRef ref))
        ()
