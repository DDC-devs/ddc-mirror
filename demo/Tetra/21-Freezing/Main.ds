
-- Demonstration of type-safe freezing using capabilities.
-- 
-- This module can be type-checked with "ddc -check" and "ddc -load"
-- but will not compile to object code yet because back-end support for
-- higher order functions is not complete.
--
module Main 
export main 

-- | We assign the Console effect to computations that affect stdin or stdout.
import foreign abstract type
 Console  : Effect

-- | Import basic functions from C land.
import foreign c value
 putStrLn : [r : Region]. Ptr# r String# -> S Console Void#
 putStr   : [r : Region]. Ptr# r String# -> S Console Void#
 showNat  : [r : Region]. Nat#           -> Ptr# r String#

where

-- Define configurable syntax.
add x y = add# [Nat#] x y           -- used for (+)
sub x y = sub# [Nat#] x y           -- used for (-)
eq  x y = eq#  [Nat#] [Bool#] x y   -- used for (==)
ge  x y = ge#  [Nat#] x y           -- used for (>=)


-------------------------------------------------------------------------------
-- | Cons lists.
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a


-- | Construct a list containing a single element.
singleton (x : a) : List a
 = Cons x Nil


-- | Construct a range of values.
enumFromTo (start : Nat#) (end : Nat#)
 = case start >= end of
        True#           -> singleton start
        False#          -> Cons start (enumFromTo (start + 1) end)


-- | Apply a function to all elements of a list, 
--   yielding nothing.
forS (xx : List a) (f : a -> S e Unit) : S e Unit
 = box case xx of
        Nil     -> ()

        Cons x xs       
         -> do  run f x
                run forS xs f


-- | Take the length of a list, using a local mutable reference.
--   The reference is allocated into an extension region, destructively 
--   initialized, then merged into the original region 'r1'. 
--   The fact that the reference is destructively initialized is not 
--   visible to the caller.
length  [a : Data] [r1 : Region] 
        (xx : List a) 
        : S (Alloc r1) (Ref# r1 Nat#)
 = box extend r1 using r2 with {Read r2; Write r2; Alloc r2} in     
   do   
        -- Allocate the reference into the extension region.
        ref       = run allocRef# [r2] 0

        -- Destructively initialize the reference.
        forS xx (\(_ : a). box
         do     x       = run readRef# ref
                run writeRef# ref (x + 1))

        -- Return the reference.
        ref


main (_ : Unit) : S Console Unit
 = box private r with { Alloc r; Read r } in 
   do
        -- Create a demo list.
        xx      = enumFromTo 0 100

        -- Count the length of the list.
        -- From this calling context, the fact that the ref is destructively
        -- initialized is not visible. 
        ref     = run length [Nat#] [r] xx

        -- Print out the final list length.
        run putStrLn (showNat [r] (run readRef# ref))
        ()

