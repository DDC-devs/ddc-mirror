module Main 
export main

import foreign abstract type
 Console  :: Effect

import foreign c value
 putStrLn :: [r : Region]. Ptr# r String# -> S Console Void#
 showNat  :: [r : Region]. Nat#           -> Ptr# r String#

where

-- Define configurable syntax.
add x y = add# [Nat#] x y       -- used for (+)
sub x y = sub# [Nat#] x y       -- used for (-)


-------------------------------------------------------------------------------
ack (m : Nat#) (n : Nat#) : Nat#
 = case m of
        0       -> n + 1
        _       -> case n of
                        0       -> ack (m - 1) 1
                        _       -> ack (m - 1) (ack m (n - 1))

main (_ : Unit) : S Console Unit
 = private r in
   box do
        run putStrLn (showNat [r] (ack 3 2))
        ()

