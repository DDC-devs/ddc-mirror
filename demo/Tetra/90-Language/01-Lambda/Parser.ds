module Parser
export
{       parseExp;
        pExp;
        pExpApp;
        pExpAtom;
}
import Exp
import Lexer
import Control.Parsec
import Data.Maybe
where


-- | Parse an expression from the given list of tokens.
parseExp (ts: List Token): Maybe Exp
 = case parse pExp ts of
        Nil               -> Nothing
        Cons (T2 xx _) _  -> Just xx


-- | Parse an expression.
pExp : Parser Token Exp
 = alt  (bind   monad_Parser (satisfies (eqToken KLambda)) $ λ kLam  → 
         bind   monad_Parser (from takeKName)              $ λ n     →
         bind   monad_Parser (satisfies (eqToken KDot))    $ λ kDot  →
         bind   monad_Parser pExp                          $ λ xBody →
         return monad_Parser (XAbs emptySubst n xBody))

 $       pExpApp


-- | Parse an application.
pExpApp  : Parser Token Exp
 = do   (bind   monad_Parser pExpAtom                      $ λ xFun   →
         bind   monad_Parser (some pExpAtom)               $ λ xsArgs →
         return monad_Parser (makeXApps xFun xsArgs))


-- | Parse an atomic expression.
pExpAtom : Parser Token Exp
 = alt  (bind   monad_Parser (satisfies (eqToken KBra))    $ λ xBra  →
         bind   monad_Parser pExp                          $ λ xx    →
         bind   monad_Parser (satisfies (eqToken KKet))    $ λ xKet  →
         return monad_Parser xx)

 $      (bind   monad_Parser (from takeKName)              $ λ n     →
         return monad_Parser (XVar n))


