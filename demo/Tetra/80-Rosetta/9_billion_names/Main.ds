-- 9 billion names of God the integer.
-- http://rosettacode.org/wiki/9_billion_names_of_God_the_integer
--
-- This task is a variation of the short story by Arthur C. Clarke. 
-- (Solvers should be aware of the consequences of completing this task.) 
-- In detail, to specify what is meant by a “name”:
--  The integer 1 has 1 name “1”.
--  The integer 2 has 2 names “1+1”, and “2”.
--  The integer 3 has 3 names “1+1+1”, “2+1”, and “3”.
--  The integer 4 has 5 names “1+1+1+1”, “2+1+1”, “2+2”, “3+1”, “4”.
--  The integer 5 has 7 names “1+1+1+1+1”, “2+1+1+1”, “2+2+1”, “3+1+1”,
--                            “3+2”, “4+1”, “5”.
--
-- Task:
-- The task is to display the first 25 rows of a number triangle which begins:
--
--                                    1
--                                  1   1
--                                1   1   1 
--                              1   2   1   1
--                            1   2   2   1   1
--                          1   3   3   2   1   1
--
-- Where row n corresponds to integer n, and each column C in row m from left
-- to right corresponds to the number of names begining with C.
--
-- A function G(n) should return the sum of the n-th row. Demonstrate this
-- function by displaying: G(23), G(123), G(1234), and G(12345).
--
module Main 
import Data.List
import Data.Numeric.Nat
import System.IO.Console
where


-- | Make a triangle of the given size.
make    (n: Nat#) (acc: List (List Nat#)) (prev: List Nat#)
        : List (List (Nat#))
 = case n of
    0 -> Nil
    _ -> do
        prev'   = scanl add 0 prev
        acc'    = map (tail1 0) (Cons prev' acc)
        row     = map (head  0) acc'
        Cons row (make (n - 1) acc' row)


-- | Make some rows.
rows n  = Cons (singleton 1) (make n Nil (singleton 1))

-- | Make cumulative sums.
cumu n  = map (scanl add 0) (rows n)

-- | Get sum of the nth row.
sums n  = foldl add 0 (last (Nil [Nat#]) (rows n))

-- | Write a list to the console.
writeListl xs
 = do   forS xs (λn : Nat#. write ((showNat n) % " "))
        write "\n"

main (_ : Unit): S Console Unit
 = do   forS   (rows 20) writeListl
        writel (showNat (sums 23))
        writel (showNat (sums 123))

        -- writel (showNat (sums 1234))     -- runs out of space.
        -- writel (showNat (sums 12345))    -- runs out of space.

