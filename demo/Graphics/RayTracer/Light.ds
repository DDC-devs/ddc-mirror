
export type Light

import Object
import Math.Vec3

-- | A primitive light
data Light

	-- | A point light source, intensity drops off with distance from the point.
	= LightPoint {
		point	:: Vec3 Float;
		color	:: Color;
	}
	
	-- | Ambient light source, applied to all objects all the time.
	| LightAmbient {
		color	:: Color;
	}

project Light with 
	apply

-- | Compute the direct lighting at a particular point
apply 	:: [Object] 	-- possible occluding objects, used for shadows.
	-> Vec3 Float 	-- point which is being lit
	-> Vec3 Float 	-- surface normal at this point
	-> Light 
	-> Color

apply objs pt n (LightPoint lpt color)
 = do
 	-- vector from the light to the surface point
	dir	= (lpt - pt) .normalise

	-- distance from light source to surface
	dist	= (lpt - pt) .magnitude
	
	-- magnitude of reflection
	mag	= (n .dot dir) / (dist * dist)

	-- eliminate negative lights
	final	= (color .muls mag) .clamp 0.0 999999.0
	
	-- check for occluding objects between the light and the surface point
	case findNearest&{Object} objs pt dir of
		Just (_, opt)
		 -> if (opt - pt) .magnitude < dist
		 	then Color 0.0 0.0 0.0
			else final 
			
		Nothing	-> final
		 
apply opt pt n (LightAmbient color)
	= color
