-- A simple ray-tracer
--	Adapted from Haskell version on http://cdsmith.wordpress.com 10/6/2008
--	
--	The output is a bit noisy due to numerical error incurred by the 32bit floats.
--	This should be fixed up when we move to 64bit as default.
--

import Color
import Shape
import Object
import Light
import World
import Trace

import Math.Vec2
import Math.Vec3
import Graphics.Frame

-- Window setup
windowSize	= Vec2 800 600

main ()
 = do	-- make new window 
 	frame	= new&{Frame} "RayTracer" windowSize.x windowSize.y
	
	-- render the image into the window
	drawFrame 
		frame 
		(windowSize.x - 1)
		(windowSize.y - 1)
		0 0	

	-- comment this back in to keep the window open after rendering
	-- coma frame

-- | busy wait for esc keypress
coma :: Frame -> ()
coma frame
 = do	frame .update
	coma frame
	
-- | Draw the whole scene
drawFrame :: Frame -> Int -> Int -> Int -> Int -> ()
drawFrame frame xMax yMax x y
	| y >= yMax	= ()
	| x >= xMax	= drawFrame frame xMax yMax 0 (y+1)
	| otherwise
	= do	drawPixel frame x y
		drawFrame frame xMax yMax (x+1) y
		
-- | Trace and draw a single pixel into the frame.
drawPixel :: Frame -> Int -> Int -> ()
drawPixel frame x y
 = do	-- plot a pixel into the frame
	color	= tracePixel x y
 	frame .point x y 
		(colorf&{Frame} color.red color.green color.blue)
		
	-- only copy the frame to the screen evey ten lines
	when (x == 0 
	   && y `mod` 10 == 0)
		frame .update
	
tracePixel x y
 = do	x'	= toFloat x - toFloat windowSize.x / 2.0
 	y'	= toFloat y - toFloat windowSize.y / 2.0
 
	trace objs lights 
		eyePos
 		(Vec3 x' y' 0.0 - eyePos) .normalise
		10

