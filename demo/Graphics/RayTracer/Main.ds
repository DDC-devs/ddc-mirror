-- A simple ray-tracer
--	Adapted from Haskell version on http://cdsmith.wordpress.com 10/6/2008
--	
--	The output is a bit noisy due to numerical error incurred by the 32bit floats.
--	This should be fixed up when we move to 64bit as default.
--

import Color
import Shape
import Object
import Light
import World
import Trace

import Math.Vec2
import Math.Vec3
import Graphics.Frame
import Graphics.Window

-- Window setup
windowSize	= Vec2 800 600

main ()
 = do 	frame	= new&{Frame} windowSize.x windowSize.y

	match 
	 | argCount > 0
	 = do	window	= newWithFrame&{Window} "RayTracer" frame
		drawFrame frame (Just window)
			(windowSize.x - 1)
			(windowSize.y - 1)
			0 0	

	 | otherwise
	 = do	drawFrame frame Nothing
			(windowSize.x - 1)
			(windowSize.y - 1)
			0 0	
		frame.putPPM

	
-- | Draw the whole scene
drawFrame :: Frame -> Maybe Window -> Int -> Int -> Int -> Int -> ()
drawFrame frame mWindow xMax yMax x y
	| y >= yMax	= ()
	| x >= xMax	= drawFrame frame mWindow xMax yMax 0 (y+1)
	| otherwise
	= do	drawPixel frame mWindow x y
		drawFrame frame mWindow xMax yMax (x+1) y
		
-- | Trace and draw a single pixel into the frame.
drawPixel :: Frame -> Maybe Window -> Int -> Int -> ()
drawPixel frame mWindow x y
 = do	-- plot a pixel into the frame
	color	= tracePixel x y
 	frame .point x y 
		(colorf&{Frame} color.red color.green color.blue)
		
	-- only copy the frame to the screen evey ten lines
	match 
	 	| Just window	<- mWindow
	 	, x == 0
	 	, y `mod` 10 == 0
	 	= window.update

		| otherwise
		= ()
	
tracePixel x y
 = do	x'	= toFloat x - toFloat windowSize.x / 2.0
 	y'	= toFloat y - toFloat windowSize.y / 2.0
 
	trace objs lights 
		eyePos
 		(Vec3 x' y' 0.0 - eyePos) .normalise
		10

