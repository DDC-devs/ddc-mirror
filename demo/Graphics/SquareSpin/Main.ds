
import Graphics.Render
import Graphics.Window
import Graphics.Shape

main ()
 = topHandle simple

simple ()
 = do 	frame	= new&{Frame} 600 600

	match
	 | argCount > 0	
	 = do	mWindow	= Just (newWithFrame&{Window} "SquareSpin" frame)
		gate (\z -> squareSpin frame mWindow 1.0)
			
	 | otherwise	
	 = do	gate (\z -> squareSpin frame Nothing 1.0)
		frame.putPPM

-- main loop 
squareSpin :: Frame -> Maybe Window -> Float -> ()
squareSpin frame mWindow rot
 = do 	arrayUI_fill frame.array 0

	renderPrims frame
		$  [ Translate 300.0 300.0 ]
		++ frac 3 rot

	match 
 	 | Just window	<- mWindow	= window.update
	 | otherwise			= ()

	when (rot > 4.0) break

	squareSpin frame mWindow (rot + 0.01)


-- generate the fractal
frac ::	Int %r2 -> Float -> [Primitive %r1]
	:- Direct %r1
	,  Const %r2

frac 0 r
	= rectangle_centered (Vec2 0.0 0.0) 50.0 50.0
	
frac n r
 = do
	c	= Color (n * 40 + 50) (n * 40 + 50) (n * 60 + 50)
		
	rectangle_centered (Vec2 0.0 0.0) 50.0 50.0
	  ++ 	[ Local	[ Translate (0.0 + 50.0) (0.0 + 50.0)
			, Rotate    r
			, c
	  		, Prims (frac (n - 1) (r * 1.1)) ]

		, Local [ Translate (0.0 + 50.0) (0.0 - 50.0)
			, Rotate    r
			, c
			, Prims (frac (n - 1) (r * 1.1)) ]
	
		, Local [ Translate (0.0 - 50.0) (0.0 + 50.0)
			, Rotate    r
			, c
			, Prims (frac (n - 1) (r * 1.1)) ]

		, Local [ Translate (0.0 - 50.0) (0.0 - 50.0)
			, Rotate    r
			, c
			, Prims (frac (n - 1) (r * 1.1)) ]
		]




