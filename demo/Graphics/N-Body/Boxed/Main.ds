
import Math.Vec2
import Body
import Graphics.Render
import Data.Array
import DDC.Runtime


-- Main -----------------------------------------------------------------------------
main ()
 = do 	frame	= new&{Frame} "N-Body" worldSize.x worldSize.y

	case initBodies () of
		Tuple2 body0 body1 -> run frame body0 body1

newBody :: Vec2 Float -> Vec2 Float -> Body
newBody pos vel		= Body 100.0 pos vel (Vec2 0.0 0.0)

-- | Main loop.
run :: 	Frame -> Array Body -> Array Body -> ()
run 	a b c
	-- bail out if we've reached the maximum frame count.
 	| frameCount_max /= 0
	, frameCount > frameCount_max
	= ()

run	frame body0 body1	
 = do	-- update all the positions
	body1 .mapIx_	(\ix x -> x.update body0 ix)
	body1 .map_	(\x -> x.clampPos)

	-- clear the buffer and draw the new forces
	frame.clear (color&{Frame} 0 0 0)
	draw_force frame body1 0 0

	body1 .map_	(\x -> x.draw frame)

	-- flip the buffer
 	frame.update

	frameCount += 1
	run frame body1 body0;



-- | Initialise the world world.
initBodies ()
 = do
 	-- all the bodies have static starting positions.
	bodies 
	 = 	[ newBody (Vec2 200.0 300.0) (Vec2 (0.0 - 0.5) 0.0)
		, newBody (Vec2 280.0 350.0) (Vec2  0.5		0.0)
		, newBody (Vec2 520.0 200.0) (Vec2  0.0         1.0)
	 	, newBody (Vec2 100.0 300.0) (Vec2  0.0        (0.0 - 1.0))
		, newBody (Vec2 280.0 450.0) (Vec2  1.0         1.0)
		, newBody (Vec2 020.0 200.0) (Vec2  0.0         0.0) ]


	-- make a new array of bodies.
	body0	= array_new (length bodies) (errorL @ "elem not initialised")
	zipWith_ (\b i -> body0 #(i) #= b) 
		bodies [0 .. array_size body0 - 1]


	-- an array to hold the body positions for the next frame.
	body1	= array_new (length bodies) (errorL @ "elem not initialised")

	map_	(\i -> body1 #(i) #= newBody (Vec2 0.0 0.0) (Vec2 0.0 0.0))
		[0.. array_size body1 - 1]
		
	(body0, body1)


-- | Draw the forces (unoptimised version)
--   Creates an intermediate list of Vec2s and then sums them.
--
draw_force :: Frame -> Array Body -> Int -> Int -> ()
draw_force frame body x y
 	| x >= worldSize.x 	
	= draw_force frame body 0 (y + draw_force_step)

	| y >= worldSize.y	
	= ()
	
draw_force frame body x y
 = do
	-- calculate the force vector at this point.
	forceV	= sum&{Vec2 Float}
		$ body .mapToList
			(\b -> forceVec
					1.0 (b.mass)
					(toFloat x) (toFloat y)
					b.pos.x     b.pos.y)
		

	-- determine the color of the point based on the magnitude of the force.
	forceS	= forceV.magnitude
	fS	= log forceS + 6.0
	color	= forceColor fS

	-- draw the point				
	frame.point
		x (frame.sizeY - y)
		color
			
	draw_force frame body (x + draw_force_step) y


-- | Choose a color to render this force
forceColor fS
	| fS < 0.0	= color&{Frame} 0 0 0

	| fS < 1.0	
	= do 	x	= fS
		c	= truncate (x * 255.0)
		color&{Frame} 0 0 c
		
	| fS < 2.0
	= do 	x	= fS - 1.0
		c	= truncate (x * 255.0)
		color&{Frame} 0 c (255 - c)

	| fS < 3.0
	= do 	x	= fS - 2.0
		c	= truncate (x * 255.0)
		color&{Frame} c (255 - c) 0

	| fS < 4.0
	= do 	x	= fS - 3.0
		c	= truncate (x * 255.0)
		color&{Frame} (255 - c) c c

	| fS < 5.0
	= do 	x	= fS - 4.0
		c	= truncate (x * 255.0)
		color&{Frame} c (255 - c) c
				
	\= 	color&{Frame} 255 255 255
					

