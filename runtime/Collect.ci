
#ifndef _DDC_Collect_I
#define _DDC_Collect_I

#include <stdlib.h>

#include "Macro.h"
#include "Profile.h"
#include "State.h"
#include "Error.h"
#include "Lint.h"

// Get a pointer from the GC stack, indexed relative to the current frame.
#define _S(index)	_localSlotBase [index]

// Take the name of a CAF pointer.
//   This points to the slot in the slot stack that holds the pointer
//   to the real object.
#define	_CAFPTR(name)	_ddcCAF_##name

// Take the pointer of the CAF object with this name.
//   As the pointer to the actual object is held on the slot stack, 
//   we have to dereference this one to get at it.
#define _CAF(name)	*_ddcCAF_##name


// Push some slots on the GC stack.
//	We also have to set them to zero incase the GC is activated
//	before they are initialised.
#if _DDC_PROFILE_SLOT
#  define _ENTER(countS) \
		Obj** _localSlotBase = _ddcSlotPtr;\
		_ddcSlotPtr	+= countS; \
		if (_ddcSlotPtr >= _ddcSlotMax)\
			_panicOutOfSlots();\
		for (uint32_t _i = 0; _i < countS; _i++)\
			_localSlotBase [_i]	= 0; \
		if (_ddcSlotPtr > _ddcProfile ->slot.highWater) \
			_ddcProfile ->slot.highWater = _ddcSlotPtr;
#else
#  define _ENTER(countS) \
		Obj** _localSlotBase = _ddcSlotPtr;\
		_ddcSlotPtr	+= countS; \
		if (_ddcSlotPtr >= _ddcSlotMax)\
			_panicOutOfSlots();\
		for (uint32_t _i = 0; _i < countS; _i++)\
			_localSlotBase [_i]	= 0;
#endif


// Pop some slots from the GC stack.
#define _LEAVE(countS) \
		_ddcSlotPtr	= _localSlotBase;


#endif

