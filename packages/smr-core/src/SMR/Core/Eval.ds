
module SMR.Core.Eval
export 
{       reduce_cbn;
        reduce_no;
}
import SMR.Core.Exp
import SMR.Core.Meta
where


-- | Call-by-name reduction.
reduce_cbn 
        (prim:  p -> List (Exp s p) -> Maybe (Exp s p))     
                                  -- ^ Fn to evaluate a prim application.
        (decls: List (Decl s p))  -- ^ External declarations.
        (xx:     Exp s p)         -- ^ Expression to reduce.
        : Maybe (Exp s p)
 = case unfoldRef decls xx of
        XVar  _ _       -> Just xx
        XAbs  _ _       -> Just xx
        _               -> Just xx

{-
        -- TODO: unfold decls in takeXApps
        XApp x1 x2
         |  Just (T2 (XRef (RPrm p)) args) <- takeXApps xx
         ,  Just xx'            <- prim p args
         -> case reduce_cbn prim decls xx' of
                Just xx''       -> Just xx''
                Nothing         -> Just xx'

         |  Just x1'            <- reduce_cbn prim decls x1
         -> case unfold decls x1' of
                XAbs n11 x12    -> reduce_cbn prim decls (subst n11 0 x2 x12)
                _               -> Just (XApp x1' x2)

         | otherwise    -> Just xx

        XRef _          -> Just xx
-}




-- | Normal-order reduction.
reduce_no 
        (prim:  p -> List (Exp s p) -> Maybe (Exp s p))     
                                  -- ^ Fn to evaluate a primitive application.
        (decls: List (Decl s p))  -- ^ External declarations.
        (xx: Exp s p)             -- ^ Expression to reduce.
        : Maybe (Exp s p)
 = case unfoldRef decls xx of
        XVar  _ _       -> Just xx

        XAbs  ns1 x2
         -> case reduce_no prim decls x2 of
                Just x2' -> Just (XAbs ns1 x2')
                Nothing  -> Just xx

        _               -> Just xx

{-
        -- TODO: unfold decls in takeXApps
        XApp  x1 x2
         |  Just (T2 (XRef (RPrm p)) args) <- takeXApps xx
         ,  Just xx'            <- prim p args
         -> case reduce_no prim decls xx' of
                Just xx''       -> Just xx''
                Nothing         -> Just xx'

         |  Just x1'            <- reduce_cbn prim decls x1 
         -> case unfold decls x1' of
                XAbs n11 x12    -> reduce_no prim decls (subst n11 0 x2 x12)

                _ |  Just x1''  <- reduce_no prim decls x1'
                  ,  Just x2'   <- reduce_no prim decls x2
                  -> Just (XApp x1'' x2')

         | otherwise    -> Just xx

        XRef _          -> Just xx
-}
