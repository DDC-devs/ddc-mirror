
module SMR.Core.Meta
export { unfoldRef; lift; subst }
import SMR.Core.Exp
where


-- | Unfold a macro declaration.
unfoldRef (decls: List (Decl s p)) (xx: Exp s p): Exp s p
 = case xx of
        XRef (RMac n)   
         -> case lookupDecl n decls of
                Nothing         -> xx
                Just xx'        -> unfoldRef decls xx'
        _                       -> xx




-- | Lift references to the given name.
lift    (n:  Name)              -- ^ Name of variable to lift references to.
        (d:  Nat)               -- ^ Current binding depth in the expression.
        (xx: Exp s p)           -- ^ Expression to lift references in.
        : Exp s p
 = case xx of
        XVar  n1 ix
         | n == n1
         , d <= ix      -> XVar n1 (ix + 1)

         | otherwise    -> xx

--      XAbs n1 x2
--       | n == n1      -> XAbs n1 (lift n (d + 1) x2)
--       | otherwise    -> XAbs n1 (lift n  d      x2)

        XApp x1 xs2     -> XApp (lift n d x1) (map (lift n d) xs2)

        XRef _          -> xx
        _               -> xx


-- | Substitute a name for an expression in an expression.
subst   (n:  Name)              -- ^ Name of variable to lift references ot.
        (d:  Nat)               -- ^ Depth of name to substitute for.
        (x:  Exp s p)           -- ^ Expression to substitute.
        (xx: Exp s p)           -- ^ Expression to substitute into.
        : Exp s p
 = case xx of
        XVar n1 ix   
         | n  == n1
         , ix == d      -> x

         | n == n1
         , ix >  d      -> XVar n1 (ix - 1)

         | otherwise    -> xx

--      XAbs n1 x2
--       | n == n1      -> XAbs n1 (subst n (d + 1) (lift n1 0 x) x2)
--       | otherwise    -> XAbs n1 (subst n  d      (lift n1 0 x) x2)

        XApp x1 xs2     -> XApp    (subst n d x x1) (map (subst n d x) xs2)

        XRef _          -> xx
        _               -> xx

