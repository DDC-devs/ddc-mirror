
module SMR.Source.Token
export
{       eq_Token; show_Token;
        eq_Space; show_Space;
        isToken;  isKPunc;
        takeNameOfToken;
        takeNatOfToken;
}
import SMR.Core.Exp
import Data.Text
import Data.Maybe
where


-- | Tokens for for the source language.
data Token where
        KEnd    : Token                         -- ^ End-of-input.
        KPunc   : Char  -> Token                -- ^ Punctuation character.
        KName   : Space -> Name -> Token        -- ^ A scoped name.
        KNat    : Nat   -> Token                -- ^ A natural number.


-- | Name space of a name.
data Space where
        SVar    : Space                         -- ^ Local variable.
        SMac    : Space                         -- ^ Macro name.
        SSet    : Space                         -- ^ Set name.
        SSym    : Space                         -- ^ Symbol name.
        SPrm    : Space                         -- ^ Primitive name.


-- | Check if two tokens are equal.
eq_Token: Eq Token
 = Eq eq' neq'
 where  
        eq' t1 t2
         = case T2 t1 t2 of
                T2 KEnd    KEnd                 -> True
                T2 (KPunc c1) (KPunc c2)        -> c1 == c2
                T2 (KName s1 n1) (KName s2 n2)  -> s1 == s2 âˆ§ n1 == n2
                T2 (KNat n1) (KNat n2)          -> n1 == n2
                _                               -> False

        neq' t1 t2
         = not (eq' t1 t2)


-- | Check if two name space tags are equal.
eq_Space: Eq Space
 = Eq eq' neq'
 where
        eq' s1 s2
         = case T2 s1 s2 of
                T2 SVar SVar            -> True
                T2 SMac SMac            -> True
                T2 SSet SSet            -> True
                T2 SSym SSym            -> True
                T2 SPrm SPrm            -> True
                _                       -> False

        neq' t1 t2
         = not (eq' t1 t2)


-- | Show dictionary for tokens.
show_Token: Show Token
 =  Show $ \kk
 -> case kk of
        KEnd            -> "KEnd"
        KPunc c         -> parens $ "KPunc" %% show (textOfChar c)
        KName s n       -> parens $ "KName" %% show s %% show n
        KNat  n         -> parens $ "KNat"  %% show n


-- | Show dictionary for namespaces.
show_Space: Show Space
 =  Show $ \ss
 -> case ss of
        SVar            -> "SVar"
        SMac            -> "SMac"
        SSet            -> "SSet"
        SSym            -> "SSym"
        SPrm            -> "SPrm"


-- | Check if a token is equal to the give none.
isToken (k1: Token): Token -> Bool
 = \k2 -> k1 == k2


-- | Check is token is punctuation using the given character.
isKPunc (c: Char) (k: Token): Bool
 = case k of
        KPunc c' -> c == c'
        _        -> False


-- | Take the name from a token, if any.
takeNameOfToken (ss1: Space) (kk: Token): Maybe Name
 = case kk of
        KName ss2 n     
         | ss1 == ss2   -> Just n
         | otherwise    -> Nothing

        _               -> Nothing


-- | Take the natural number from a token, if any.
takeNatOfToken (kk: Token): Maybe Nat
 = case kk of
        KNat n          -> Just n
        _               -> Nothing
