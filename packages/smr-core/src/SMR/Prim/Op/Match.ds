
module SMR.Prim.Op.Match
export makePrimOpsMatch
import SMR.Prim.Op.Base
where


makePrimOpsMatch {eqs: Eq s} (_: Unit): List (PrimEval s Prim)
 = Cons primOpSeq
 $ Cons (primOpMatch {eqs})
 $ Cons primOpWildcard
 $ Nil


-- | Primitive 'seq' operator, to force a value to whnf.
primOpSeq: PrimEval s Prim
 = PrimEval
        (PrimOp "seq")
        "force evaluation of an expression to whnf"
        (Cons Val (Cons Val Nil))
        fn'
 where
        fn' as0
         | Just (T2 x1 as1)     <- takeArgExp as0
         , Just (T2 x2 Nil)     <- takeArgExp as1
         = Just $ XApp x2 (Cons x1 Nil)

         | otherwise
         = Nothing


-- | Primitive 'match' operator, to pattern match on terms.
primOpMatch {Eq s}: PrimEval s Prim
 = PrimEval
        (PrimOp "match")
        "match on an expression"
        (Cons Val (Cons Val (Cons Exp (Cons Exp Nil))))
        fn'
 where
        fn' as0
         | Just (T2 xScrut   as1) <- takeArgExp as0
         , Just (T2 xPat     as2) <- takeArgExp as1
         , Just (T2 xMatch   as3) <- takeArgExp as2
         , Just (T2 xDefault Nil) <- takeArgExp as3
         = case matchPattern xScrut xPat of
                Just xsArgs     -> Just $ makeXApps xMatch xsArgs
                Nothing         -> Just $ xDefault

         | otherwise           
         = Nothing


-- | Primitive wildcard 'o' constructor.
primOpWildcard: PrimEval s Prim
 = PrimEval
        (PrimOp "o")
        "match wildcard"
        Nil
        (\as -> Nothing)


-- | Try to match the scrutinee against the given pattern.
matchPattern 
        {Eq s}
        (xScrut': Exp s Prim)   -- ^ Scrutinee.
        (xPat':   Exp s Prim)   -- ^ Pattern to match against.
        :         Maybe (List (Exp s Prim))

 | XRef (RPrm (PrimOp name))    <- xPat'
 , name == "o"
 =      Just (Cons xScrut' Nil)

 | XRef (RSym s1)       <- xScrut'
 , XRef (RSym s2)       <- xPat'
 = if s1 == s2
        then Just Nil
        else Nothing
 | Just (T2 x11 xs12)   <- takeXApps xScrut'
 , Just (T2 x21 xs22)   <- takeXApps xPat'
 , Just lst1            <- matchPattern x11 x21
 , Just lst2            <- fmap concat $ sequence $ zipWith matchPattern xs12 xs22
 = Just (append lst1 lst2)

 | otherwise
 = Nothing

