
module SMR.Prim.Op.Base
export
{       prim_Eq;    prim_Show;
        takeArgExp;
        makeXBool; takeXBool;   takeArgBool;
        makeXNat;  takeXNat;    takeArgNat;
        nameOfPrimEval;
        primEvalOp1; primEvalOp2
}
import  SMR.Core.Exp
where


-------------------------------------------------------------------------------
-- | Primitive values and operators.
data Prim where
        PrimOp          : Text          -> Prim
        PrimLitBool     : Bool          -> Prim
        PrimLitNat      : Nat           -> Prim


prim_Show: Show Prim
 = Show $ \pp
 -> case pp of
        PrimOp      tx  -> parens $ "PrimOp"      %% show tx
        PrimLitBool b   -> parens $ "PrimLitBool" %% show b
        PrimLitNat  n   -> parens $ "PrimLitNat"  %% show n

prim_Eq: Eq Prim
 =  Eq eq' neq'
 where
        eq' p1 p2
         = case (p1, p2) of
                (PrimOp t1,      PrimOp t2)      -> t1 == t2
                (PrimLitBool b1, PrimLitBool b2) -> b1 == b2
                (PrimLitNat  n1, PrimLitNat  n2) -> n1 == n2
                _                                -> False

        neq' p1 p2
         = not $ eq' p1 p2


-- Exp ----------------------------------------------------
takeArgExp
        (xx: List  (Exp s Prim))
        :    Maybe (Exp s Prim, List (Exp s Prim))
 = case xx of
        Cons x1 xs      -> Just (x1, xs)
        _               -> Nothing


-- Bool ---------------------------------------------------
-- | Take a literal Bool from an expression.
takeXBool (xx: Exp s Prim): Maybe Bool
 = case xx of
        XRef (RPrm (PrimLitBool b))     -> Just b
        _                               -> Nothing

-- | Make a literal Bool expression.
makeXBool (b: Bool): Exp s Prim
 = XRef (RPrm (PrimLitBool b))


-- | Split a literal Bool from an argument list.
takeArgBool
        (xx: List  (Exp s Prim))
        :    Maybe (Bool, List (Exp s Prim))
 = case xx of
        Cons (XRef (RPrm (PrimLitBool b))) xs
          -> Just (b, xs)
        _ -> Nothing


-- Nat ----------------------------------------------------
-- | Take a literal Nat from an expression.
takeXNat (xx: Exp s Prim): Maybe Nat
 = case xx of
        XRef (RPrm (PrimLitNat n))      -> Just n
        _                               -> Nothing

-- | Make a literal Nat expression.
makeXNat  (n: Nat): Exp s Prim
 = XRef (RPrm (PrimLitNat n))


-- | Split a literal Nat from an argument list.
takeArgNat
        (xx: List (Exp s Prim))
        :    Maybe (Nat, List (Exp s Prim))
 = case xx of
        Cons (XRef (RPrm (PrimLitNat n))) xs
          -> Just (n, xs)
        _ -> Nothing


-------------------------------------------------------------------------------
-- | Argument passing method.
data PrimArg where
        Val     : PrimArg       -- ^ Call-by-value.
        Exp     : PrimArg       -- ^ Call-by-name / unevaluated expression.


-- | Primitive evaluator.
data PrimEval (s p: Data) where
        PrimEval
         :  p                   -- ^ Op name.
         -> Text                -- ^ Op description.
         -> List PrimArg        -- ^ Argument passing method.
         -> (List (Exp s p) -> Maybe (Exp s p))
                                -- ^ Evaluation function.
         -> PrimEval s p


-- | Get the name of a `PrimEval`.
nameOfPrimEval [s p: Data] ((PrimEval name _ _ _): PrimEval s p): p
 = name


-- | Construct a primitive evaluator for a call-by-value arity-1 operator.
primEvalOp1
        (name: p) (desc: Text) (args: List PrimArg)
        (fn:   List (Exp s p) -> Maybe (Exp s p))
        :      PrimEval s p
 = PrimEval name desc
        (Cons Val Nil) fn


-- | Construct a primitive evaluator for a call-by-value arity-2 operator.
primEvalOp2
        (name: p) (desc: Text) (args: List PrimArg)
        (fn:   List (Exp s p) -> Maybe (Exp s p))
        :      PrimEval s p
 = PrimEval name desc
        (Cons Val (Cons Val Nil)) fn


