
module SMR.Prim.Name
export 
{       pretty_Prim;
        prettyPrim; parsePrim
}
import SMR.Prim.Name.Nat
import System.Posix.Stdlib
import Class.Show
import Class.Pretty
where


-- | Primitive values and operators.
data Prim where        
        PrimOp          : Text          -> Prim
        PrimLitBool     : Bool          -> Prim
        PrimLitNat      : Nat           -> Prim


-- | Pretty dictionary for primitives.
pretty_Prim: Pretty Prim
 = Pretty prettyPrim


-- | Pretty print a primitive name, without the leading '#'.
prettyPrim (pp: Prim): Text
 = case pp of
        PrimOp op               -> op

        PrimLitBool True        -> "true"
        PrimLitBool False       -> "false"

        PrimLitNat n            -> "nat'" % showNat n


-- | Parse a primitive name, without the leading '#'.
parsePrim (tx: Text): Maybe Prim

 -- Literal Bools.
 | tx == "true"         = Just $ PrimLitBool True
 | tx == "false"        = Just $ PrimLitBool False

 -- Literal Nats.
 | cs   <- charListOfText tx
 , textOfCharList (take 4 cs) == "nat'"
 , ds   <- drop 4 cs
 , all isDigit ds
 = case readNat (textOfCharList ds) of
        Nothing         -> Nothing
        Just nat        -> Just $ PrimLitNat nat

 -- Other primitives.
 | isPrimNameNat tx     = Just $ PrimOp tx

 -- Unrecognized.
 | otherwise            = Nothing



