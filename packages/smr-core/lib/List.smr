

@list-case xx alt-nil alt-cons
 = #match xx  %list-nil         alt-nil
 $ #match xx (%list-cons #o #o) alt-cons
 $ %fail;


@list-replicate n x
 = #bool-if
        (#nat-eq #nat'0 n)
        %list-nil
        (#seq (#nat-sub n #nat'1) $ \n'.
         %list-cons x (@list-replicate n' x));


@list-range a b
 = #bool-if
        (#nat-gt a b)
        %list-nil
        (#seq (#nat-add a #nat'1) $ \n'.
         %list-cons a (@list-range n' b));


@list-length xx
 = @list-case
        xx
        #nat'0
        (\x. \xs. #nat-add #nat'1 (@list-length xs));


@list-foldl f z xx
 = @list-case
        xx 
        z 
        (\x xs. #seq (f z x) $ \z' .
                @list-foldl f z' xs);


@list-sum xx
 = @list-foldl #nat-add #nat'0 xx;


@list-reverse xx
 = @list-foldl (\x. \xs. %list-cons xs x) %list-nil xx;

