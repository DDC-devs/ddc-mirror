{-# OPTIONS -no-implicit-prelude #-}

module	Data.Numeric.Int32

import	DDC.Runtime.Store
	DDC.Runtime.Alloc
	Foreign.Ptr
	Class.Eq
	Class.Ord
	Class.Copy
	Class.Update
	Class.Num
	Class.Integral
	Base.Thunk


-- Builtin Primitives ---------------------------------------------------------
-- There aren't any corresponding C functions for these.
-- They're implemented directly by the core language and backends.

-- Casting
foreign import primCast_Int32U_Int8U		:: Int32# -> Int8#
foreign import primCast_Int32U_Int16U		:: Int32# -> Int16#
foreign import primCast_Int32U_Int64U		:: Int32# -> Int64#
foreign import primCast_Int32U_Word32U		:: Int32# -> Word32#
foreign import primCast_Int32U_Float32U		:: Int32# -> Float32#

-- Arithmetic
foreign import primInt32U_neg 			:: Int32# -> Int32#
foreign import primInt32U_add			:: Int32# -> Int32# -> Int32#
foreign import primInt32U_sub			:: Int32# -> Int32# -> Int32#
foreign import primInt32U_mul			:: Int32# -> Int32# -> Int32#
foreign import primInt32U_div			:: Int32# -> Int32# -> Int32#
foreign import primInt32U_mod			:: Int32# -> Int32# -> Int32#

-- Comparisons
foreign import primInt32U_eq			:: Int32# -> Int32# -> Bool#
foreign import primInt32U_neq			:: Int32# -> Int32# -> Bool#
foreign import primInt32U_gt			:: Int32# -> Int32# -> Bool#
foreign import primInt32U_ge			:: Int32# -> Int32# -> Bool#
foreign import primInt32U_lt			:: Int32# -> Int32# -> Bool#
foreign import primInt32U_le			:: Int32# -> Int32# -> Bool#


-- Boxing ---------------------------------------------------------------------

boxInt32 :: Int32# -> Int32
boxInt32 u = Int32 u

unboxInt32 :: Int32 -> Int32#
unboxInt32 (Int32 w) = w

-- Unboxed Instances ----------------------------------------------------------
instance Eq Int32# where
	(==) x y	= boxBool (primInt32U_eq  x y)
	(/=) x y	= boxBool (primInt32U_neq x y)


instance Ord Int32# where
	(>)  x y	= boxBool (primInt32U_gt x y)
	(<)  x y	= boxBool (primInt32U_lt x y)
	(>=) x y	= boxBool (primInt32U_ge x y)
	(<=) x y	= boxBool (primInt32U_le x y)

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
			\= GT


instance Num Int32# where
 	(+) 		= primInt32U_add
	(-) 		= primInt32U_sub
	(*) 		= primInt32U_mul
	negate		= primInt32U_neg


instance Integral Int32# where
	div 		= primInt32U_div
	mod		= primInt32U_mod


-- Boxed Instances ------------------------------------------------------------
instance Eq Int32 where
	(==) 		= primInt32_eq
	(/=) 		= primInt32_neq

-- Note: The primFloat32* functions shouldn't be inlined because Core.Prim
--       needs these specific names for our pretend cross-module inlining setup.
primInt32_eq  x y	= boxBool   (primInt32U_eq   (unboxInt32 x) (unboxInt32 y))
primInt32_neq x y	= boxBool   (primInt32U_neq  (unboxInt32 x) (unboxInt32 y))


instance Ord Int32 where
	(>) 		= primInt32_gt
	(<) 		= primInt32_lt
	(>=)		= primInt32_ge
	(<=)		= primInt32_le

	compare x y
	 | x == y	=  EQ
	 | x <  y	=  LT
	 		\= GT

	min x y		= if x <= y then x else y
	max x y		= if x >= y then x else y

-- Note: The primFloat32* functions shouldn't be inlined because Core.Prim
--       needs these specific names for our pretend cross-module inlining setup.
primInt32_gt x y	= boxBool   (primInt32U_gt  (unboxInt32 x) (unboxInt32 y))
primInt32_lt x y	= boxBool   (primInt32U_lt  (unboxInt32 x) (unboxInt32 y))
primInt32_ge x y	= boxBool   (primInt32U_ge  (unboxInt32 x) (unboxInt32 y))
primInt32_le x y	= boxBool   (primInt32U_le  (unboxInt32 x) (unboxInt32 y))


instance Copy Int32 where
 	copy x 		= boxInt32 (unboxInt32 x)


instance Updatable Int32 where
	(:=) w1 w2
	 = do	w1'	= force w1
		pokeOn w1 (coerceAddrToPtr (peekDataRS_payload w1')) (unboxInt32 w2)
		()


instance Num Int32 where
	negate x 	= boxInt32 (primInt32U_neg (unboxInt32 x))
	(+) 		= primInt32_add
	(-) 		= primInt32_sub
	(*) 		= primInt32_mul

	pow x n = pow' n 1i32
	 where	pow' :: Int32 -> Int32 -> Int32
		pow' 0i32 acc = acc
		pow' n    acc = pow' (n - 1i32) (acc * x)

-- Note: The primFloat32* functions shouldn't be inlined because Core.Prim
--       needs these specific names for our pretend cross-module inlining setup.
primInt32_add x y	= boxInt32 (primInt32U_add (unboxInt32 x) (unboxInt32 y))
primInt32_sub x y	= boxInt32 (primInt32U_sub (unboxInt32 x) (unboxInt32 y))
primInt32_mul x y	= boxInt32 (primInt32U_mul (unboxInt32 x) (unboxInt32 y))


instance Integral Int32 where
	div x y		= boxInt32 (primInt32U_div (unboxInt32 x) (unboxInt32 y))
	mod x y		= boxInt32 (primInt32U_mod (unboxInt32 x) (unboxInt32 y))


instance Accum Int32 where
	(+=) a b	= a := (a + b)

