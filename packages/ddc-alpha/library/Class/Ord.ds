{-# OPTIONS -no-implicit-prelude #-}

module	Class.Ord
import	Base
	Data.Bool

infix  5 <, <=, >=, > 

data Ordering %r1
	= LT | GT | EQ

-- The class of types which support ordering
class Ord a where 
	compare :: forall b %r1 !e1 $c1
		. a -> b -(!e1 $c1)> Ordering %r1
		:- !e1 :> !ReadT a + !ReadT b
		,  $c1 :> ${x : a}
		,  Shape2 a b

	(>)	:: forall b %r1 !e1 $c1
		.  a -> b -(!e1 $c1)> Bool %r1
		:- !e1 :> !ReadT a + !ReadT b 
		,  $c1 :> ${x : a}
		,  Shape2 a b

	(<)	:: forall b %r1 !e1 $c1
		.  a -> b -(!e1 $c1)> Bool %r1
		:- !e1 :> !ReadT a + !ReadT b
		,  $c1 :> ${x : a}
		,  Shape2 a b

	(>=)	:: forall b %r1 !e1 $c1
		.  a -> b -(!e1 $c1)> Bool %r1
		:- !e1 :> !ReadT a + !ReadT b
		,  $c1 :> ${x : a}
		,  Shape2 a b

	(<=)	:: forall b %r1 !e1 $c1
		.  a -> b -(!e1 $c1)> Bool %r1
		:- !e1 :> !ReadT a + !ReadT b
		,  $c1 :> ${x : a}
		,  Shape2 a b

	min	:: forall !e1 $c1
		. a -> a -(!e1 $c1)> a
		:- !e1 :> !ReadT a
		,  $c1 :> ${x : a}

	max	:: forall !e1 $c1
	 	.  a -> a -(!e1 $c1)> a
		:- !e1 :> !ReadT a
		,  $c1 :> ${x : a}
		