
#ifndef _DDC_Prim_Boxing_ci
#define _DDC_Prim_Boxing_ci

#include "../Runtime.h"
#include "../Storage/Alloc.ci"

// NOTE: These boxing functions are defined here for use by the runtime system
//       and external C glue code only. The compiled Disciple programs treat 
//       boxing and unboxing as primitives and expand out their own code for it.

// -- macros + token pasting == polymorphism.
#define MAKE_BOXFUN(Type,TypeSize) \
	static inline \
	Obj* _box##Type (Type v) \
	{ 	DataRS* data	= (DataRS*)_allocDataRS (_tagBase, TypeSize); \
		Type* x		= (Type*) data->payload; \
		*x		= v; \
		_PROFILE_BOXING ( b##Type.count ++); \
		_PROFILE_BOXING ( b##Type.bytes += sizeof(DataRS) + TypeSize); \
		return (Obj*)data; \
	}

#define MAKE_GETFUN(Type) \
	static inline \
	Type _unbox##Type (Obj* obj) \
	{ 	DataRS* data	= (DataRS*) _force (obj); \
		Type* x		= (Type*) data->payload; \
		Type v		= *x; \
		_PROFILE_BOXING ( b##Type.gets ++); \
		return	(Type)v; \
	}

// -- Box up a naked value.
#define _box(Type,data) \
	_box##Type(data)

// -- Force and unbox a value.
#define _unbox(Type,data) \
	_unbox##Type(data)

// -- Unbox a value without forcing it.
//	This object MUST be direct (not a suspension) else badness.
#define _unboxDirect(Type,data) \
	*((Type*) ((DataRS*)data)->payload)


// -- Boxing Functions
//    Pack smaller values into larger objects to keep the objects aligned.
MAKE_BOXFUN (Word8,	sizeof(Word32));
MAKE_BOXFUN (Word16,	sizeof(Word32));
MAKE_BOXFUN (Word32,    sizeof(Word32));
MAKE_BOXFUN (Word64,    sizeof(Word64));

MAKE_BOXFUN (Int8,	sizeof(Int32));
MAKE_BOXFUN (Int16,	sizeof(Int32));
MAKE_BOXFUN (Int32,	sizeof(Int32));
MAKE_BOXFUN (Int64,	sizeof(Int64));

MAKE_BOXFUN (Float32,	sizeof(Float32));
MAKE_BOXFUN (Float64,	sizeof(Float64));

// -- Unboxing Functions
MAKE_GETFUN (Word8)
MAKE_GETFUN (Word16)
MAKE_GETFUN (Word32)
MAKE_GETFUN (Word64)

MAKE_GETFUN (Int8);
MAKE_GETFUN (Int16);
MAKE_GETFUN (Int32);
MAKE_GETFUN (Int64);

MAKE_GETFUN (Float32);
MAKE_GETFUN (Float64);


// Enum
static inline
Obj*	_boxEnum (Word32 tag)
{
	if (_ddcHeapPtr + sizeof (Obj32) > _ddcHeapMax)
		_allocCollect (sizeof (Obj32));

	Obj32*	obj	= (Obj32*)_ddcHeapPtr;
	_ddcHeapPtr	+= sizeof (Obj32);

	obj->tagFlags	= (tag << 8) | 0x021;		// (tag << 8) | _ObjFixedData
	obj->u32.i	= 0;

	return (Obj*)obj;
}


static inline uint32_t _unboxEnum(Obj* obj)
{
	Obj* data	= _force(obj);
	return		_getObjTag(data);
}


static inline
Obj* 	primProjField  (Obj* obj, Int32 ix)
{
	Data* data	= (Data*)obj;
	return	data ->a[ix];
}


static inline
Obj*	primProjFieldR (Obj* obj, Int32 ix)
{
	Data* data	= (Data*)obj;
	return	_boxRef (obj, &(data ->a[ix]));
}


#endif


