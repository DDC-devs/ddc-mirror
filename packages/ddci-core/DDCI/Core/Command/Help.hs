
module DDCI.Core.Command.Help where


help :: String
help    = unlines
        [ "-------------------------------------------------------------------- Usage --"
        , " On the command line"
        , "   Prefix commands with '-'"
        , "      $ ddci-core -check \"\\(x : Unit). x\""
        , ""
        , "   Read input from a file with ':'"
        , "      $ ddci-core -set lang Sea -load: SomeFile.dce"
        , ""
        , " Interactively"
        , "   Prefix commands with ':'"
        , "      > :check \\(x : Unit). x"
        , ""
        , "   Split commands over multiple lines with '..', terminating with ';;'"
        , "      > :check.. \\(x : Unit)."
        , "      x;;"
        , ""
        , "   Read input from a file with '-'"
        , "      > :load- SomeFile.dce"
        , ""
        , "----------------------------------------------------------------- Commands --"
        , "General"
        , "    quit                Exit DDCi-core" 
        , "    help                Display this help" 
        , ""
        , "Modes"
        , "    set                 Display active modes and transform"
        , "    set +MODE           Enable a mode"
        , "    set /MODE           Disable a mode"
        , "    set lang  FRAG      Set the current language fragment."
        , "    set trans TRANS     Set the current transform."
        , ""
        , "   MODE ::="
        , "    Indent              Pretty print expressions with indenting."
        , "    TraceEval           Show the expression at every step"
        , "    TraceStore          Show the store at every step." 
        , ""
        , "   FRAG ::="
        , "    Zero                No features, no primops."
        , "    Eval                The fragment accepted by the evaluator."
        , ""
        , "   TRANS ::="
        , "    None | Anonymize | ANormal | Beta"
        , ""
        , "Type Commands"
        , "    kind    TYPE        Show the kind of a type."
        , "    tequiv  TYPE TYPE   Check if two types are equivalent."
        , ""
        , "Witness Commands"
        , "    wtype   WITNESS     Show the type of a witness expression."
        , ""
        , "Expression Commands"
        , "    check   EXP         Show the type, effect and closure of an exp."
        , "    type    EXP         Show the type    of an expression."
        , "    effect  EXP         Show the effect  of an expression."
        , "    closure EXP         Show the closure of an expression." 
        , "    eval    EXP         Evaluate an expression."
        , "    trans   EXP         Transform the given expression."
        , "    trun    EXP         Transform the given expression then evaluate it."
        , "    ast     EXP         Show the abstract syntax tree of a exp." 
        , ""
        , "Module Commands"
        , "    load    MODULE      Type check and desugar a module."
        , "    sea     MODULE      Convert a Core Sea module to C code."
        , "    llvm    MODULE      Convert a Core Sea module to LLVM code."
        , ""
        ]





