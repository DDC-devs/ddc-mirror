
module Runtime with letrec {

getTag          (obj : Ptr# Obj) : Tag#
 = do { ptr             = castPtr# [Word32#] [Obj] obj;
        header          = peek# [Word32#] ptr 0;
        tag32           = shr#  [Word32#] header 8w32#;
        tag             = truncate# [Tag#] [Word32#] tag32;
        return# [Tag#] tag;
      };


allocBoxed      (tag : Tag#) (arity : Nat#) : Ptr# Obj
 = do { bytesPayload    = shl# [Nat#] 2 arity;
        bytesObj        = add# [Nat#] 8 bytesPayload;
        addr            = alloc# bytesObj;

        tag32           = promote# [Word32#] [Tag#] tag;
        format          = 42w32#;
        header          = bor# [Word32#] (shl# [Word32#] tag32 8w32#) format;
        write# [Word32#] addr 0 header;

        arity32         = promote# [Word32#] [Nat#] arity;
        write# [Word32#] addr 4 arity32;

        return# [Ptr# Obj] (makePtr# [Obj] addr);
      };


fieldOfBoxed    (obj : Ptr# Obj) (index : Nat#) : Ptr# Obj
 = do { offset          = add# [Nat#] 8 (shl# [Nat#] index 2);
        return# [Ptr# Obj] (plusPtr# [Obj] obj offset);
      };


allocMixed      (tag : Tag#) (arity : Nat#) (bytesRaw : Nat#) : Ptr# Obj
 = do { bytesPtrs       = shl# [Nat#] 2 arity;
        bytesObj        = add# [Nat#] 16 (add# [Nat#] bytesPtrs bytesRaw);
        addr            = alloc# bytesObj;

        tag32           = promote# [Word32#] [Tag#] tag;
        format          = 42w32#;
        header          = bor# [Word32#] (shl# [Word32#] tag32 8w32#) format;
        write# [Word32#] addr 0 header;
        write# [Word32#] addr 4 0w32#;

        bytesObj32      = promote# [Word32#] [Nat#] bytesObj;
        write# [Word32#] addr 8 bytesObj32;

        arity32         = promote# [Word32#] [Nat#] arity;
        write# [Word32#] addr 12 arity32;

        return# [Ptr# Obj] (makePtr# [Obj] addr);
      };


fieldOfMixed    (obj : Ptr# Obj) (index : Nat#) : Ptr# Obj
 = do { offset          = add# [Nat#] 16 (shl# [Nat#] index 2);
        return# [Ptr# Obj] (plusPtr# [Obj] obj offset);
      };


payloadOfMixed  (obj : Ptr# Obj) : Addr#
 =      return# [Addr#] (plusAddr# (takePtr# [Obj] obj) 16);


allocRaw        (tag : Tag#) (bytesPayload : Nat#) : Ptr# Obj
 = do { bytesObj        = add# [Nat#] 8 bytesPayload;
        addr            = alloc# bytesObj;

        tag32           = promote# [Word32#] [Tag#] tag;
        format          = 42w32#;
        header          = bor# [Word32#] (shl# [Word32#] tag32 8w32#) format;
        write# [Word32#] addr 0 header;

        bytesObj32      = promote# [Word32#] [Nat#] bytesObj;
        write# [Word32#] addr 4 bytesObj32;

        return# [Ptr# Obj] (makePtr# [Obj] addr);
     };


payloadOfRaw    (obj : Ptr# Obj) : Addr#
 =      return# [Addr#] (plusAddr# (takePtr# [Obj] obj) 8);


allocRawSmall   (tag : Tag#) (bytesPayload : Nat#) : Ptr# Obj
 = do { bytesObj        = add# [Nat#] 4 bytesPayload;
        addr            = alloc# bytesObj;

        tag32           = promote# [Word32#] [Tag#] tag;
        bytesPayload32  = promote# [Word32#] [Nat#] bytesPayload;
        wordsPayload32  = shr# [Word32#] bytesPayload32 2w32#;
        format          = 42w32#;
        header          =  bor# [Word32#] (shl# [Word32#] tag32          8w32#) 
                          (bor# [Word32#] (shl# [Word32#] wordsPayload32 4w32#) 
                                                          format);
        write# [Word32#] addr 0 header;

        return# [Ptr# Obj] (makePtr# [Obj] addr);
     };


payloadOfRawSmall (obj : Ptr# Obj) : Addr#
 =      return# [Addr#] (plusAddr# (takePtr# [Obj] obj) 4);
 
};

