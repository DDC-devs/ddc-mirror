
module SMR.Prim.Eval
export evalPrim
import SMR.Prim.Eval.Bool
import SMR.Prim.Eval.Nat
import SMR.Prim.Name
import Data.Maybe
where


-- | Evaluate a primitive application.
evalPrim 
        (eval:  Exp s Prim -> Maybe Prim)       -- ^ Evaluation function for whole expressions.
        (p:     Prim)                           -- ^ Primitive being applied.
        (xs:    List (Exp s Prim))              -- ^ List of arguments to the primitive.
        : Maybe (Exp s Prim)
 = case p of
        PrimBool pb     -> evalPrimBool eval pb xs
        PrimNat  pn     -> evalPrimNat  eval pn xs


