

module Main 
import DDC.Core.Exp
import DDC.Core.Codec.SExp.Pretty
import DDC.Core.Codec.SExp.Lexer
import DDC.Core.Codec.SExp.Lexer.Token
import DDC.Core.Codec.SExp.Parser
import System.IO.Console
import Data.Function
where

data Frag where
        FTyNat  : Frag

ppAnnot (_: Frag): Text = "()"
ppFrag  FTyNat  = "ty_Nat"

main ()
 = do   exp     = XAbs  (MExp (Bind  (Name "x")) (XAtom (AFrag FTyNat)))
                        (XVar (Bound (Name "x") 0))
        
        writel $ ppExp ppAnnot ppFrag exp


        toks    = lexText "(abs (exp (atom (frag ty_Nat))) (var (bound (name \"x\") (nat \"0\"))))"
        writel $ show (show_list show_token) toks

