
module DDC.Core.Codec.SExp.Pretty.Base
export  { sexp1;  sexp2;  sexp3
        ; ppTup2; ppList; ppMaybe }
import Data.Text
where


-- | Make an S-expression of one argument.
sexp1 n t        = parens $ n %% t


-- | Make an S-expression of two arguments.
sexp2 n t1 t2    = parens $ n %% t1 %% t2


-- | Make an S-expression of three arguments.
sexp3 n t1 t2 t3 = parens $ n %% t1 %% t2 %% t3


-- | Pretty print a tuple of things.
ppTup2  (ppA:   a -> Text)
        (ppB:   b -> Text)
        ((T2 xa xb): Tup2 a b)
        : Text
 = sexp2 "tup2" (ppA xa) (ppB xb)


-- | Pretty print a list of things.
ppList  (ppA:   a -> Text)
        (xx:    List a)
        : Text
 = sexp1 "list" (foldl pastes "" $ map ppA xx)


-- | Pretty print a maybe.
ppMaybe (ppA:   a -> Text)
        (xx:    Maybe a)
        : Text
 = case xx of
        Nothing -> "nothing"
        Just x  -> sexp1 "just" (ppA x)
