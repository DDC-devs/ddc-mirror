
module DDC.Core.Codec.SExp.Pretty.Base
export  { sexp1;  sexp2;  sexp3
        ; ppr
        ; pretty_Tup2; pretty_List; pretty_Maybe }
import Data.Text
where

data Pretty (a: Data) where
        Pretty  : (a -> Text) -> Pretty a

ppr     {(Pretty ppr'): Pretty a} (x: a): Text
 = ppr' x


-- | Make an S-expression of one argument.
sexp1 n t        = parens $ n %% t


-- | Make an S-expression of two arguments.
sexp2 n t1 t2    = parens $ n %% t1 %% t2


-- | Make an S-expression of three arguments.
sexp3 n t1 t2 t3 = parens $ n %% t1 %% t2 %% t3


-- | Pretty dictionary for Tup2.
pretty_Tup2  {Pretty a} {Pretty b}: Pretty (Tup2 a b)
 = Pretty pp
 where  pp ((T2 xa xb): Tup2 a b)
         = sexp2 "tup2" (ppr xa) (ppr xb)


-- | Pretty dictionary for List.
pretty_List  {ppA: Pretty a}: Pretty (List a)
 =  Pretty $ \xx
 ->     sexp1 "list" (foldl pastes "" $ map (ppr [a] {ppA}) xx)
        -- TODO: the args to ppr should have been resolved.


-- | Pretty dictionary for Maybe.
pretty_Maybe {Pretty a}: Pretty (Maybe a)
 =  Pretty $ \xx
 -> case xx of
        Nothing -> "nothing"
        Just x  -> sexp1 "just" (ppr x)

