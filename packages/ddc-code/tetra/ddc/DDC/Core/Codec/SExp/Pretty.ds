
-- | S-expression pretty printer for core expressions.
module DDC.Core.Codec.SExp.Pretty 
export  { pretty_Nat;   pretty_Name
        ; pretty_Bound; pretty_Bind
        ; pretty_Exp;   pretty_Atom; pretty_Param; pretty_Arg
        ; pretty_Lets;  pretty_Alt;  pretty_Pat;   pretty_Cast; pretty_Prim }
import DDC.Core.Codec.SExp.Pretty.Base
import DDC.Core.Exp
import Data.Text
where


pretty_Nat: Pretty Nat
 =  Pretty $ \n 
 -> sexp1 "nat" (showNat n)


pretty_Name: Pretty Name
 =  Pretty $ \(Name n)
 -> sexp1 "name"("\"" % n % "\"")


pretty_Bound: Pretty Bound
 =  Pretty $ \(Bound n i)
 -> sexp2 "bound" (ppr n) (ppr i)


pretty_Bind: Pretty Bind
 =  Pretty $ \(Bind n)
 -> sexp1 "bind" (ppr n)


pretty_Exp 
        {ppA: Pretty a} {ppP: Pretty p}
        : Pretty (Exp a p)
 =  Pretty $ \xx
 -> case xx of
        XAnnot a x      -> sexp2 "annot"    (ppr a) 
                                            (ppr {pretty_Exp}   x)

        XAtom  m        -> sexp1 "atom"     (ppr {pretty_Atom}  m)

        XVar   b        -> sexp1 "var"      (ppr b)

        XAbs   m x      -> sexp2 "abs"      (ppr {pretty_Param} m) 
                                            (ppr {pretty_Exp}   x)

        XApp   x a      -> sexp2 "app"      (ppr {pretty_Exp}   x) 
                                            (ppr {pretty_Arg}   a)

        XLet   lts x    -> sexp2 "let"      (ppr {pretty_Lets}  lts)
                                            (ppr {pretty_Exp}   x)

        XCase  x alts   -> sexp2 "case"     (ppr {pretty_Exp}   x) 
                                            (ppr {pretty_List   {pretty_Alt}} alts)

        XCast  c x      -> sexp2 "cast"     (ppr {pretty_Cast}  c)
                                            (ppr {pretty_Exp}   x)


pretty_Atom {ppP: Pretty p}: Pretty (Atom p)
 =  Pretty $ \atom
 -> case atom of
        APrim m         -> sexp1 "prim"     (ppr m)
        ACtor n         -> sexp1 "ctor"     (ppr n)
        AFrag p         -> sexp1 "frag"     (ppr p)


pretty_Param 
        {ppA: Pretty a} {ppP: Pretty p}
        : Pretty (Param a p)
 =  Pretty $ \mm
 -> case mm of
        MExp b x        -> sexp1 "exp"      (ppr {pretty_Exp} x)
        MImplicit b x   -> sexp1 "implicit" (ppr {pretty_Exp} x)


pretty_Arg
        {ppA: Pretty a} {ppP: Pretty p}
        : Pretty (Arg a p)
 =  Pretty $ \arg
 -> case arg of
        RArg x          -> sexp1 "arg"      (ppr {pretty_Exp} x)
        RImplicit x     -> sexp1 "implicit" (ppr {pretty_Exp} x)


pretty_Lets
        {ppA: Pretty a} {ppP: Pretty p}
        : Pretty (Lets a p)
 =  Pretty $ \lts
 -> case lts of
        LLet b x
         -> sexp2 "let"
                (ppr b)
                (ppr {pretty_Exp} x)

        LRec bxs
         -> sexp1 "rec"
                (ppr {pretty_List  {pretty_Tup2 {pretty_Bind} {pretty_Exp}}} bxs)

        LPrivate bs mt bxs 
         -> sexp3 "private"
                (ppr {pretty_List  {pretty_Bind}}            bs)
                (ppr {pretty_Maybe {pretty_Exp}} mt)
                (ppr {pretty_List  {pretty_Tup2 {pretty_Bind} {pretty_Exp}}} bxs)


pretty_Alt
        {ppA: Pretty a} {ppP: Pretty p}
        : Pretty (Alt a p)
 =  Pretty $ \alt
 -> case alt of
        AAlt w x        -> sexp2 "alt"     (ppr {pretty_Pat} w)
                                           (ppr {pretty_Exp} x)


pretty_Pat: Pretty (Pat a p)
 =  Pretty $ \pat
 -> case pat of
        PDefault        -> "default"
        PData n bs      -> sexp2 "data"    (ppr {pretty_Name} n) 
                                           (ppr {pretty_List} bs)


pretty_Cast
        {ppA: Pretty a} {ppP: Pretty p}
        : Pretty (Cast a p)
 =  Pretty $ \cc
 -> case cc of
        CEffect x       -> sexp1 "effect"   (ppr {pretty_Exp} x)
        CBox            -> "box"
        CRun            -> "run"


pretty_Prim: Pretty Prim
 =  Pretty $ \pp
 -> case pp of
        -- Type constructors.
        PrimTyVoid      -> "ty_Void"
        PrimTyUnit      -> "ty_Unit"
        PrimTyArr       -> "ty_Arr"

        -- Data constructors.
        PrimDaUnit      -> "da_Unit"


