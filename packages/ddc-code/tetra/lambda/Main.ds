
module Main
import Lambda.Simple.Core.Exp
import Lambda.Simple.Core.Eval
import Lambda.Simple.Deep.Exp
import Lambda.Simple.Deep.Church
import Lambda.Simple.Source.Pretty
import Lambda.Simple.Source.Token
import Lambda.Simple.Source.Parser
import System.IO.Console
import Data.Maybe
where


show_Unit: Show Unit
 = Show $ Î»xx -> "()"

asUnit (xx: Exp Unit): Exp Unit
 = xx

-- TODO: need explicit run/box 
getLine: S Console Text
 = box do   
        txt     = run readl 2014
        textOfCharList $ init Nil $ charListOfText txt        


-- | Read-Eval-Print loop.
--   TODO: need to put the explicit box.
--
--   TODO: If we remove the unit parameter and use direct recursion
--         we get an LLVM code-gen error.
-- 
--   TODO: closing stdin with control-D causes prompt to print infinitely.
--
repl (_: Unit): S Console Unit
 = box do   
        -- Write the prompt.
        write "> "
        flush

        -- Get the line and convert it to tokens.
        str     = getLine

        case lexTokens $ charListOfText str of
         -- If only whitespace was provided then show the prompt again.
         T2 Nil  Nil    -> repl ()

         -- Parse the tokens.
         T2 toks Nil    -> repl_toks toks

         -- We couldn't lex all the characters into tokens.
         T2 _    cs   
          -> do writel "error: lexical error."
                repl ()


-- | Given some tokens, try to parse an expression and evaluate it.
repl_toks (toks: List Token): S Console Unit
 = case parseExp toks of
         Nothing
          -> do writel "error: parse error."
                repl ()

         Just x
          -> case reduce_no $ asUnit x of
                Nothing 
                 -> do  writel "error: runtime error."
                        repl ()

                Just x' 
                 -> do  writel (ppr x')
                        repl ()


-- TODO: need explict run/box.
main ()
 = box do
        run repl ()

