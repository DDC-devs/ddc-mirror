
module Lambda.Simple.Source.Parser
export
{       parseExp;
        pExp;
        pExpApp;
        pExpAtom;
}
import Lambda.Simple.Source.Lexer
import Lambda.Simple.Core.Exp
import Control.Parsec
import Data.Maybe
where


-- | Parse an expression from the given list of tokens.
parseExp (ts: List Token): Maybe (Exp p)
 = case parse pExp ts of
        Nil               -> Nothing
        Cons (T2 xx _) _  -> Just xx


-- | Parse an expression.
pExp : Parser Token (Exp p)
 = alt  (bind   (satisfies (isToken KLambda))   $ λ kLam  -> 
         bind   (from takeNameOfToken)          $ λ n     ->
         bind   (satisfies (isToken KDot))      $ λ kDot  ->
         bind   pExp                            $ λ xBody ->
         return (XAbs n xBody))

 $       pExpApp


-- | Parse an application.
pExpApp  : Parser Token (Exp p)
 = do   (bind   pExpAtom                        $ λ xFun   ->
         bind   (some pExpAtom)                 $ λ xsArgs ->
         return (makeXApps xFun xsArgs))


-- | Parse an atomic expression.
pExpAtom : Parser Token (Exp p)
 = alt  (bind   (satisfies (isToken KBra))      $ λ xBra   ->
         bind   pExp                            $ λ xx     ->
         bind   (satisfies (isToken KKet))      $ λ xKet   ->
         return xx)

 $      (bind   (from takeNameOfToken)          $ λ n      ->
         return (XVar n 0))


