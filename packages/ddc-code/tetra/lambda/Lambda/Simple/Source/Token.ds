
module Lambda.Simple.Source.Token
export
{       eq_Token; show_Token;
        isToken;
        takeNameOfToken
}
import Lambda.Simple.Core.Exp
import Data.Text
import Data.Maybe
where


-- | Tokens for lambda calculus language.
data Token where
        KName   : Name  -> Token        -- ^ Variable name.
        KBra    : Token                 -- ^ Open  Bracket '('
        KKet    : Token                 -- ^ Close Bracket ')'
        KLambda : Token                 -- ^ Lambda symbol '\'
        KDot    : Token                 -- ^ Dot symbol '.'


-- | Check if two tokens are equal.
eq_Token: Eq Token
 = Eq eq' neq'
 where  
        eq' t1 t2
         = case T2 t1 t2 of
                T2 KBra    KBra         -> True
                T2 KKet    KKet         -> True
                T2 KLambda KLambda      -> True
                T2 KDot    KDot         -> True
                _                       -> False

        neq' t1 t2
         = not (eq' t1 t2)


-- | Show dictionary for tokens.
show_Token: Show Token
 =  Show $ \kk
 -> case kk of
        KName n         -> parens $ "KName" %% show n
        KBra            -> "KBra"
        KKet            -> "KKet"
        KLambda         -> "KLambda"
        KDot            -> "KDot"


-- | Check if a token is equal to the give none.
isToken (k1: Token): Token -> Bool
 = \k2 -> k1 == k2


-- | Take the name from a token, if any.
takeNameOfToken (kk: Token): Maybe Name
 = case kk of
        KName n         -> Just n
        _               -> Nothing

