
module Lambda.Simple.Core.Eval
export 
{       lift; subst;
        reduce_cbn;
        reduce_no
}
import Lambda.Simple.Core.Exp
where


-- | Lift references to the given name.
lift    (n:  Name)      -- ^ Name of variable to lift references to.
        (d:  Nat)       -- ^ Current binding depth in the expression.
        (xx: Exp p)     -- ^ Expression to lift references in.
        : Exp p
 = case xx of
        XPrim _                 -> xx

        XVar  n1 ix
         | n == n1, d <= ix     -> XVar n1 (ix + 1)
         | otherwise            -> xx

        XAbs n1 x2
         | n == n1              -> XAbs n1 (lift n (d + 1) x2)
         | otherwise            -> XAbs n1 x2

        XApp x1 x2              -> XApp (lift n d x1) (lift n d x2)


-- | Substitute a name for an expression in an expression.
subst   (n:  Name)      -- ^ Name of variable to lift references ot.
        (d:  Nat)       -- ^ Depth of name to substitute for.
        (x:  Exp p)     -- ^ Expression to substitute.
        (xx: Exp p)     -- ^ Expression to substitute into.
        : Exp p
 = case xx of
        XPrim _                 -> xx

        XVar n1 d'   
         | n == n1, d == d'     -> x
         | otherwise            -> xx

        XAbs n1 x2
         | n == n1              -> XAbs n1 (subst n (d + 1) x x2)
         | otherwise            -> XAbs n1 (subst n d       x x2)

        XApp x1 x2              -> XApp    (subst n d x x1) (subst n d x x2)


-- | Call-by-name reduction.
reduce_cbn (xx: Exp p):    Maybe (Exp p)
 = case xx of
        XPrim _         -> Just xx
        XVar  _ _       -> Just xx
        XAbs  _ _       -> Just xx

        XApp x1 x2      
         -> case reduce_cbn x1 of
                Just (XAbs n11 x12)
                  |  Just x'     <- reduce_cbn (subst n11 0 x2 x12)
                  -> Just x'

                Just x1'
                  -> Just (XApp x1' x2)

                _ -> Nothing


-- | Normal-order reduction.
reduce_no (xx: Exp p): Maybe (Exp p)
 = case xx of
        XPrim _         -> Just xx
        XVar  _ _       -> Just xx

        XAbs  n1 x2
         -> case reduce_no x2 of
                Just x2'
                  -> Just (XAbs n1 x2')

                _ -> Nothing

        XApp  x1 x2
         -> case reduce_cbn x1 of
                Just (XAbs n11 x12)
                  |  Just x'     <- reduce_no (subst n11 0 x2 x12)
                  -> Just x'

                Just x1'
                  |  Just x1''   <- reduce_no x1'
                  ,  Just x2'    <- reduce_no x2
                  -> Just (XApp x1'' x2')

                _ -> Nothing

