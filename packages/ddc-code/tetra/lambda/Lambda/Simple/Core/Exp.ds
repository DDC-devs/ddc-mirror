
module Lambda.Simple.Core.Exp
export
{       show_Exp;
        makeXApps;
}
import Class.Show
import Data.Text
import Data.Tuple
where


-- | Represent names as text.
type Name = Text


-- | Untyped lambda calculus expressions.
data Exp (p: Data) where
        XPrim   : p     -> Exp p
        XVar    : Name  -> Nat   -> Exp p
        XAbs    : Name  -> Exp p -> Exp p
        XApp    : Exp p -> Exp p -> Exp p


show_Exp {Show p}: Show (Exp p)
 =  Show $ Î»xx
 -> case xx of
        XPrim p
         -> parens $ "XPrim" %% show p

        XVar n b     
         -> parens $ "XVar"  %% show n  %% show b
        
        XAbs n x
         -> parens $ "XAbs"  %% show n  %% show x
        
        XApp x1 x2
         -> parens $ "XApp"  %% show x1 %% show x2


-- | Make an application of a function to the given list of arguments.
makeXApps (xFun: Exp p) (xsArgs: List (Exp p)): Exp p
 = build (reverse xsArgs)
 where  
        build xs
         = case xs of
                Nil             -> xFun
                Cons x1 xsArgs' -> XApp (build xsArgs') x1
