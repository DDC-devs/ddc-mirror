
module Data.Graphics.SVG.Tiny 
export {render; render_SVG}
import Class.Show
import Data.Function
import Data.List
import Data.Text
where

-- | SVG Documents.
data SVG where
        SVG     :  Nat          -- ^ Width
                -> Nat          -- ^ Height
                -> List Shape
                -> SVG


-- | SVG Shape elements.
data Shape where
        Circle 
                :  Nat          -- ^ x-axis coordinate of centre of circle.
                -> Nat          -- ^ y-axis coordinate of centre of circle.
                -> Nat          -- ^ radius of circle.
                -> Shape


-- | SVG Attribute values.
data Value where
        VNat    : Nat -> Value


-- | Class of values that can be rendered to text.
data Render (a: Data) where
        Render: (a -> Text) -> Render a

render {(Render render'): Render a} (x: a): Text
 = render' x


-- | Render a SVG Document.
--   TODO: shouldn't need to pass explicit dictionary.
render_SVG: Render SVG
 =  Render $ \svg 
 -> case svg of
        SVG width height shapes
         -> "<?xml version=\"1.0\"?>\n"
          % "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.2\" baseProfile=\"tiny\">\n"
          % (foldl paste "" $ map (render {render_Shape}) shapes)
          % "</svg>"


-- | Render a SVG Shape.
render_Shape: Render Shape
 =  Render $ \shape
 -> case shape of
        Circle x y r
         -> renderElement "circle"
                $ Cons (T2 "cx" (VNat x))
                $ Cons (T2 "cy" (VNat y))
                $ Cons (T2 "r"  (VNat r))
                $ Nil


-- | Render a value.
render_Value: Render Value
 =  Render $ \val
 -> case val of
        VNat n  -> "\"" % show n % "\""


-- | Render an element of the given name and value.
renderElement 
        (name: Text) 
        (attrs: List (Tup2 Text Value))
        : Text
 = "<" % name %% (foldr paste "" $ map renderAttr attrs) % "/>"
 % "\n"


-- | Render an attribute of the given name and value.
renderAttr (attr: Tup2 Text Value): Text
 | T2 name val  <- attr
 = name % "=" % render val % " "

