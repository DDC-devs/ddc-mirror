
module Data.Maybe
export  { isNothing; isJust; fromMaybe }
import Class.Functor
import Class.Applicative
import Class.Monad
import Data.Numeric.Bool
where


-- | A `Maybe` may contain a value, or not.
data Maybe (a: Data) where
        Nothing : Maybe a
        Just    : a -> Maybe a


-- Functor --------------------------------------------------------------------
functor_maybe
 = Functor 
        maybe_fmap

maybe_fmap [a b: Data] (f: a -> b) (xx: Maybe a): Maybe b
 = case xx of
        Nothing -> Nothing
        Just x  -> Just (f x)


-- Applicative ----------------------------------------------------------------
applicative_maybe
 = Applicative 
        functor_maybe 
        maybe_pure
        maybe_ap

maybe_pure [a: Data]   (x: a): Maybe a
 = Just x

maybe_ap   [a b: Data] (mf: Maybe (a -> b)) (ma: Maybe a): Maybe b
 | Just xf      <- mf
 , Just xa      <- ma
 = Just (xf xa)

 | otherwise
 = Nothing


-- Monad ----------------------------------------------------------------------
monad_maybe
 = Monad
        applicative_maybe
        maybe_return
        maybe_bind


maybe_return [a: Data]   (x: a): Maybe a
 = Just x

maybe_bind   [a b: Data] (ma: Maybe a) (f: a -> Maybe b): Maybe b
 = case ma of
        Nothing -> Nothing
        Just xa -> f xa


-- Predicates -----------------------------------------------------------------
-- | Check if the given value is a `Nothing`.
isNothing (m: Maybe a): Bool
 = case m of
        Nothing -> True
        Just x  -> False


-- | Check if the given value is a `Just`.
isJust (m: Maybe a): Bool
 = case m of
        Nothing -> False
        Just x  -> True


-- Destructors ----------------------------------------------------------------
-- | Take the value from a `Just`, or return a default value.
fromMaybe (def: a) (m: Maybe a): a
 = case m of
        Nothing -> def
        Just x  -> x


-- | Apply a function to the value in a `Just`, or return a default value.
maybe (def: b) (f: a -> b) (m: Maybe a): b
 = case m of
        Nothing -> def
        Just x  -> f x

