
module Data.Text 
export  { textLit; paste; pastes
        ; showBool
        ; showNat; showBinaryNat; showDecimalNat; showHexNat; showBaseNat
        ; digitBinary; digitDecimal; digitHex }
import Data.Numeric.Nat
import Data.Numeric.Bool
where


-------------------------------------------------------------------------------
-- Names used by the Source Tetra desugarer to implement string literals.
textLit (x : TextLit#) : Text
 = TextLit x

paste  (x y : Text) : Text
 = TextApp x y

pastes (x y : Text) : Text
 = x % " " % y


-------------------------------------------------------------------------------
data Text where
        TextLit : TextLit# -> Text
        TextApp : Text -> Text -> Text


-- | Convert a Bool to a String.
showBool (x : Bool#) : Text
 = if x then "True" 
        else "False"


-- | Show a natural number.
showNat (x: Nat#): Text
 = showBaseNat 10 digitDecimal 0 "X" x


-------------------------------------------------------------------------------
-- | Show a natural number, in binary.
showBinaryNat (x: Nat#): Text
 = showBaseNat 2 digitBinary 0 "X" x

digitBinary (n: Nat#): Text
 = case n of
        0       -> "0"
        1       -> "1"
        _       -> "X"


-- | Show a natural number in decimal.
showDecimalNat (x: Nat#): Text
 = showBaseNat 10 digitDecimal 0 "X" x

digitDecimal (n: Nat#): Text
 = case n of
        0       -> "0"
        1       -> "1"
        2       -> "2"
        3       -> "3"
        4       -> "4"
        5       -> "5"
        6       -> "6"
        7       -> "7"
        8       -> "8"
        9       -> "9"
        _       -> "X"


-- | Show a natural number in hex.
showHexNat (x: Nat#): Text
 = showBaseNat    16 digitHex 0 "X" x

digitHex (n: Nat#): Text
 = case n of
        0       -> "0"
        1       -> "1"
        2       -> "2"
        3       -> "3"
        4       -> "4"
        5       -> "5"
        6       -> "6"
        7       -> "7"
        8       -> "8"
        9       -> "9"
        10      -> "a"
        11      -> "b"
        12      -> "c"
        13      -> "d"
        14      -> "e"
        15      -> "f"
        _       -> "X"


-------------------------------------------------------------------------------
-- | Show a natural number using an arbitrary base encoding.
showBaseNat 
        (base:  Nat#)           -- ^ Base of encoding.
        (digit: Nat# -> Text)   -- ^ Show a digit in this base.
        (width: Nat#)           -- ^ Width of output, or 0 to not pad.
        (pad:   Text)           -- ^ Character to pad output with.
        (x:     Nat#)           -- ^ Number to print.
        : Text

 = do   s       = showBaseNat' base digit width pad True x
        if x < 0 
         then "-" % s 
         else s

showBaseNat' base digit width pad first x
 | and (x == 0) first
 = showBaseNat' base digit (width - 1) pad False x
 % "0"

 | and (x == 0) (width > 0)
 = showBaseNat' base digit (width - 1) pad False x
 % pad

 | x == 0
 = ""

 | otherwise
 = showBaseNat' base digit (width - 1) pad False (div x base) 
 % digit (rem x base) 

