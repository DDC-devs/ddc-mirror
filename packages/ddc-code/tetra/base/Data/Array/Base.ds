
module Data.Array.Base
export {
        array_rep;
        array_def;
        array_size;
        array_index;
}
import Data.Numeric.Nat
import Data.Function
import Class.Ord

where


-- | Generic array interface.
data Array (rep: Data) (elem: Data) where
 MkArray
        :  rep                  -- ^ Representation.
        -> elem                 -- ^ Default.
        -> Nat                  -- ^ Size.
        -> (Nat -> elem)        -- ^ Lookup.
        -> Array rep elem


array_rep   (arr: Array rep elem): rep
 = case arr of
        MkArray rep _ _ _       -> rep


array_def   (arr: Array rep elem): elem
 = case arr of
        MkArray _ def _ _       -> def


array_size  (arr: Array rep elem): Nat
 = case arr of
        MkArray _ _ size _      -> size


array_index [rep: Data] [elem: Data] 
        (arr: Array rep elem) (ix: Nat): elem
 = case arr of
        MkArray _ _ _ index     -> index ix

