
module Data.Stream
export { srepeat; streamOfList; listOfStream; smap; stake }
import Data.Numeric.Nat
import Data.Maybe
import Data.List
where

-- | Unbounded streams, 
--   wraps a function that produces elements on demand.
data Stream (s a : Data) where
        MkStream : (s -> Step s a) -> s -> Stream s a

data Step (s a : Data) where
        Yield   : a -> s -> Step s a
        Skip    : s -> Step s a 
        Done    : Step s a

data Tup2 (a b : Data) where
        T2      : a -> b -> Tup2 a b

-- | Create a stream that returns copies of the same value.
srepeat (x : a) : Stream a a
 = MkStream (\(s : a). Yield s s) x


-- | Convert a list to a stream.
--   BROKEN: shifting stepper into let binding doesn't work.
streamOfList (xx : List a) : Stream (List a) a
 = MkStream 
        (\(s1 : List a).
         case s1 of
                Nil     -> Done
                Cons x xs -> Yield x xs)
        xx


-- | Convert a stream to a list.
listOfStream  (ss : Stream s a) : List a
 = case ss of
        MkStream f s0
         -> case f s0 of
                Yield x s1      -> Cons x (listOfStream (MkStream f s1))
                Skip  s1        -> listOfStream (MkStream f s1)
                Done            -> Nil


-- | Apply a function to every element of a stream.
smap (f : a -> b) (ss : Stream s a) : Stream s b
 = case ss of  
        MkStream stepA sA0
         -> let stepB q 
                 = case stepA q of
                        Yield x sA1     -> Yield (f x) sA1
                        Skip sA2        -> Skip sA2
                        Done            -> Done
            in  MkStream stepB sA0


-- | Take the given number of elements from a stream.
stake (n : Nat) (ss : Stream s a) : Stream (Tup2 s Nat) a
 = case ss of
        MkStream fA sA0
         -> let stepB q
                 = case q of
                        T2 sA ix 
                         | ix >= n   -> Done
                         | otherwise 
                         -> case fA sA of
                                Yield x sA2 -> Yield x (T2 sA2 (ix + 1))
                                Skip sA3    -> Skip  (T2 sA3 ix)
                                Done        -> Done
            in   MkStream stepB (T2 sA0 0)
