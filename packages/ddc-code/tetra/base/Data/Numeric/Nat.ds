
module Data.Numeric.Nat
export  
{       shl; shr; band; bor; bxor;
        divMod;

        add_Nat; sub_Nat; mul_Nat; div_Nat; rem_Nat;
}
import Data.Tuple
import Class.Numeric
where

type Nat = Nat#


-------------------------------------------------------------------------------
-- Instances for numeric classes.
add_Nat: Add Nat
 = Add (\x y -> add# [Nat#] x y)

sub_Nat: Sub Nat 
 = Sub (\x y -> if gt# [Nat#] y x
                 then 0
                 else sub# [Nat#] x y)

mul_Nat: Mul Nat 
 = Mul (\x y -> mul# [Nat#] x y)

div_Nat: Div Nat 
 = Div (\x y -> div# [Nat#] x y)

rem_Nat: Rem Nat 
 = Rem (\x y -> rem# [Nat#] x y)


-------------------------------------------------------------------------------
-- Aliases for other arithmetic functions
shl  x y        = shl#  [Nat#] x y
shr  x y        = shr#  [Nat#] x y
band x y        = band# [Nat#] x y
bor  x y        = bor#  [Nat#] x y
bxor x y        = bxor# [Nat#] x y 


divMod (n m: Nat): Tup2 Nat Nat
 = T2 (div n m) (rem n m)


