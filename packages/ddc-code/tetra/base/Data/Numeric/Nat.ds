
module Data.Numeric.Nat
export  
{       eq_Nat;  ord_Nat;
        add_Nat; sub_Nat; mul_Nat; div_Nat; rem_Nat;

        shl; shr; band; bor; bxor;
}
import Class.Numeric
where


-- | Default Nat type is an alias for the primitive Nat type.
type Nat = Nat#


-------------------------------------------------------------------------------
-- | Eq dictionary for Nat.
eq_Nat:  Eq Nat
 = Eq eq' neq'
 where  eq'  a b        = eq#  [Nat#] a b
        neq' a b        = neq# [Nat#] a b


-- | Ord dictionary for Nat.
ord_Nat:  Ord Nat        
 = Ord  compare'
 where  compare' n1 n2
         | gt# [Nat#] n1 n2     = GT
         | lt# [Nat#] n1 n2     = LT
         | otherwise            = EQ


-- | Add dictionary for Nat.
add_Nat: Add Nat
 = Add (\x y -> add# [Nat#] x y)


-- | Sub dictionary for Nat.
sub_Nat: Sub Nat 
 = Sub (\x y -> if gt# [Nat#] y x
                 then 0
                 else sub# [Nat#] x y)


-- | Mul dictionary for Nat.
mul_Nat: Mul Nat 
 = Mul (\x y -> mul# [Nat#] x y)


-- | Div dictionary for Nat.
div_Nat: Div Nat 
 = Div (\x y -> div# [Nat#] x y)


-- | Rem dictionary for Nat.
rem_Nat: Rem Nat 
 = Rem (\x y -> rem# [Nat#] x y)


-------------------------------------------------------------------------------
-- Aliases for other arithmetic functions
shl  x y        = shl#  [Nat#] x y
shr  x y        = shr#  [Nat#] x y
band x y        = band# [Nat#] x y
bor  x y        = bor#  [Nat#] x y
bxor x y        = bxor# [Nat#] x y 

