
module Class.Applicative
export  
{       dFunctorOfApplicative;
        pure; ap;
        liftA; liftA2; liftA3
}
import Class.Functor
where


-- TODO: if we add an extra 'b' arg to the type of pure
--       we end up with an existential in the interface file,
--       which cannot be parsed.
data Applicative (f: Data -> Data) where
        Applicative
         :  Functor f 
         -> ([a: Data].   a -> f a)                     -- pure
         -> ([a b: Data]. f (a -> b) -> f a -> f b)     -- ap
         -> Applicative f

dFunctorOfApplicative
        ((Applicative dFunctor _ _): Applicative f)
        : Functor f
 = dFunctor


pure    ((Applicative _ pure' _): Applicative f) 
        (x: a): f a
 = pure' x


ap      ((Applicative _ _ ap'):   Applicative f)
        (xfab: f (a -> b)) (xfa: f a): f b
 = ap' xfab xfa


-- TODO: cannot elide the binding of f.
-- without providing the return type.
liftA   [f: Data -> Data] [a b: Data] 
        (dapp: Applicative f) (f: a -> b) (xa: f a)
 = ap dapp (pure dapp f) xa


liftA2  (dapp: Applicative f)
        (f: a -> b -> c) (xa: f a) (xb: f b): f c
 = let  dfun    = dFunctorOfApplicative dapp
   in   ap dapp (fmap dfun f xa) xb


liftA3  (dapp: Applicative f) 
        (f: a -> b -> c -> d) (xa: f a) (xb: f b) (xc: f c): f d
 = let  dfun    = dFunctorOfApplicative dapp
   in   ap dapp (ap dapp (fmap dfun f xa) xb) xc

