
-- | The Garbage Collector
module Collect

export value

  ddcPerformGC : Unit -> Unit

  ddcCollectHeap 
        :  Addr# -- ^ Start of root chain.
        -> Addr# -- ^ @Word**@  From Base -- first byte in from space.
        -> Addr# -- ^ @Word**@  From Top  -- addr of next byte to be allocated.
        -> Addr# -- ^ @Word**@  From Max  -- addr of last byte that can be allocated.
        -> Addr# -- ^ @Word**@  To   Base -- first byte that can be allocated.
        -> Addr# -- ^ @Word**@  To   Top  -- addr of next byte to be allocated (during evac)
        -> Addr# -- ^ @Word**@  To   Max  -- addr of last byte that can be allocated.
        -> Unit

import foreign c value
  malloc                : Nat# -> Addr#

  ddcFormatOfObject     : Addr# -> Nat#
  ddcSizeOfObject       : Addr# -> Nat#

  ddcReadBrokenHeart    : Addr# -> Addr#
  ddcWriteBrokenHeart   : Addr# -> Addr# -> Void#

  ddcIsAnchored         : Addr# -> Bool#

  ddcArgsThunk          : Addr# -> Nat# 
  ddcGetThunk           : Addr# -> Nat# -> Addr#
  ddcSetThunk           : Addr# -> Nat# -> Nat# -> Addr# -> Void#

  ddcArityOfBoxed       : Addr# -> Nat#
  ddcGetBoxed           : Addr# -> Nat# -> Addr#
  ddcSetBoxed           : Addr# -> Nat# -> Addr# -> Void#

  ddcArityOfMixed       : Addr# -> Nat#
  ddcGetMixed           : Addr# -> Nat# -> Addr#

  ddcLlvmRootIsEnd      : Addr# -> Bool#

  ddcTraceAlloc         :  Bool# -> Addr#
                        -> Addr# -> Addr# -> Addr#
                        -> Addr# -> Addr# -> Addr#
                        -> Unit

  ddcTraceHeap          : Bool# -> Unit

  ddcTraceObj           : Bool# -> Bool# -> Addr# -> Nat#
  ddcTraceRoots         : Bool# -> Unit

  ddcLlvmRootGetStart   : Nat#  -> Addr#

  primPutString         : TextLit# -> Void#
  primShowAddr          : Addr#    -> TextLit#
  primShowNat           : Nat#     -> TextLit#
  primShowWord32        : Word32#  -> TextLit#

  exit                  : Int# -> Void#

with letrec


-- | Force garbage collection of the current heap.
ddcPerformGC (u: Unit): Unit
 = do   
        ddcCollectHeap  
                (ddcLlvmRootGetStart 0#)
                heapBase#     heapTop#     heapMax#
                heapBackBase# heapBackTop# heapBackMax#
        u


-- | Perform garbage collection on the specified heap.
--   This is a simple Cheney-scan collection.
ddcCollectHeap
        (aRootStart                      : Addr#)
        (aaHeapBase aaHeapTop aaHeapMax  : Addr#)
        (aaBackBase aaBackTop aaBackMax  : Addr#) : Unit
 = do
        primPutString "* ddc-runtime.ddcCollectHeap start\n"#

        -- Trace the allocator state before we start.
        ddcTraceAlloc
                True#
                aRootStart
                aaHeapBase aaHeapTop aaHeapMax
                aaBackBase aaBackTop aaBackMax

        ddcTraceHeap True#

        -- Reset the top of the to-heap as we're about to overwrite 
        -- what's already there.
        aBackBase'      = read# [Addr#] aaBackBase 0#
        write# aaBackTop 0# aBackBase'

        -- Evacuate all the root objects to the to-space.
        ddcEvacuateRoots
                aRootStart
                (read# aaBackBase 0#)
                aaBackTop 
                (read# aaBackMax  0#)

        -- Recursively follow pointers in to-space,
        --   copying out any reachable objects from the from-space.
        ddcScanHeap 
                aaBackTop
                (read# aaBackBase 0#)

        -- Flip the front and back heaps.
        aHeapBase       = read# [Addr#] aaHeapBase 0#
        aHeapTop        = read# [Addr#] aaHeapTop  0#
        aHeapMax        = read# [Addr#] aaHeapMax  0#

        aBackBase       = read# [Addr#] aaBackBase 0#
        aBackTop        = read# [Addr#] aaBackTop  0#
        aBackMax        = read# [Addr#] aaBackMax  0#

        write# [Addr#] aaHeapBase 0# aBackBase
        write# [Addr#] aaHeapTop  0# aBackTop
        write# [Addr#] aaHeapMax  0# aBackMax

        write# [Addr#] aaBackBase 0# aHeapBase
        write# [Addr#] aaBackTop  0# aHeapTop
        write# [Addr#] aaBackMax  0# aHeapMax


        -- Trace the allocator after we've finished.
        -- This also checks that the result heap is well formed.
        primPutString "* ddc-runtime.ddcCollectHeap dump\n"#
        fieldAddr  " aHeapBase (new) "#  aBackBase
        fieldAddr  " aHeapTop  (new) "#  aBackTop
        fieldAddr  " aBackBase (new) "#  aHeapBase
        fieldAddr  " aBackTop  (new) "#  aHeapTop

        ddcTraceAlloc
                True#
                aRootStart
                aaHeapBase aaHeapTop aaHeapMax
                aaBackBase aaBackTop aaBackMax

        ddcTraceHeap True#
        primPutString "* ddc-runtime.ddcCollectHeap end\n"#

        ()


-- | Recursively follow pointers in the to-space, copying
--   out any reachable objects in the from-space.
ddcEvacuateRoots
        (aRootStart     : Addr#)
        (aBackBase      : Addr#)
        (aaBackTop      : Addr#)
        (aBackMax       : Addr#) : Unit
 = do
        ddcEvacuateStackEntry
                aaBackTop
                aRootStart

        ()

-- | Evacuate the roots from the given stack entry.
ddcEvacuateStackEntry
        (aaBackTop      : Addr#)
        (aEntry         : Addr#) : Unit
 = do
        -- Address of next entry in the chain.
        aEntryNext      = read#     [Addr#] aEntry       0#

        -- Address of frame that hold the number of roots, and meta-data.
        aEntryFrame     = read#     [Addr#] aEntry            (size# [Addr#])

        -- Address of array of roots for this frame.
        aEntryRoots     = plusAddr# aEntry      (add# (size# [Addr#]) (size# [Addr#]))

        -- Number of roots without meta-data in the frame.
        numRoots        = read#     [Word32#] aEntryFrame  0#

        -- Number of roots with meta-data in the frame.
        numMeta         = read#     [Word32#] aEntryFrame (size# [Word32#])

        ddcEvacuateRootFrame 
                aaBackTop
                aEntryRoots
                0#
                (promote# numRoots)

        -- If we have not reached the end of the chain then go
        -- to the next frame.
        case ddcLlvmRootIsEnd aEntryNext of
         True#  -> ()
         False# -> ddcEvacuateStackEntry aaBackTop aEntryNext


-- Evacuate all the roots in the given stack frame.
ddcEvacuateRootFrame 
        (aaBackTop:     Addr#)  -- Top of back heap.
        (aaObj:         Addr#)  -- Current address in frame.
        (ix:            Nat#)   -- Number of roots evacuated so far.
        (n:             Nat#)   -- Total number of roots to evacuate.
        : Unit
 = case sub# n ix of
    0#  -> ()
    _   -> do
        ddcEvacuateRoot 
                aaBackTop
                aaObj

        ddcEvacuateRootFrame
                aaBackTop
                (plusAddr# aaObj (size# [Addr#]))
                (add# ix 1#)
                n


-- Evacuate the object pointed to by a single root.
ddcEvacuateRoot
        (aaBackTop:     Addr#)
        (aaObj:         Addr#)
        : Unit
 = do
        -- Read the pointer to the object from the root slot.
        aObj    = read# aaObj 0#

        -- Skip slot stack values that have been assigned null values.
        case eq# aObj (promote# 0#) of
         True#  -> ()
         False# 
          -> do 
                -- Evacuate an object, returning its new address in the to-space.
                aObjNew = ddcEvacuateObject aaBackTop aObj

                -- Update the slot entry to point to the new location.
                write# aaObj 0# aObjNew

                ()


-- | Evacuate a single object and update the to-space
--   to point to the word _after_ the new copy.
ddcEvacuateObject
        (aaBackTop      : Addr#)        -- Address of the back heap top pointer.
        (aObj           : Addr#)        -- Address of the object to evacuate.
                        : Addr#         -- Address that the object has been evacuated to.
 = do
        format  = ddcFormatOfObject aObj

        -- If this object is a broken heart then return the forwarding pointer.
        --   We have a "broken heart" because the object we were expecting
        --   to be here has aready been copied out to the to-space. The old 
        --   header in the from-space will have been over-written by the
        --   address of where it is now in the to-space.
        case format of 
         1# -> ddcReadBrokenHeart aObj

         _  -> case ddcIsAnchored aObj of
                -- If the object is anchored then leave it alone.
                --   Anchored objects are allocated outside of our heap,
                --   and are outside our juristiction.
                True# 
                 ->     aObj

                -- This is a real object in the from-space,
                -- so evacuate it to the to-space.
                False#
                 ->     ddcEvacuateCopy aaBackTop aObj 


-- | Copy a single object from the from-space to the to-space.
ddcEvacuateCopy 
        (aaBackTop      : Addr#)        -- Address of the back heap top pointer.
        (aObj           : Addr#)        -- Address of the object to copy.
                        : Addr#         -- Address that the object has been copied to.

 = do   -- Get the size of the whole object.
        size    = ddcSizeOfObject aObj

        -- Where we're going to copy it to in the to-space.
        aObjNew = read# aaBackTop 0#

        -- Copy the sucker.
        copy# aObjNew aObj size

        -- Advance the to-pointer to point to the first byte of
        -- where the next object could be copied to.
        write# aaBackTop 0# (plusAddr# aObjNew size)

        -- Overwrite the object header with a broken heart.
        --   This records the fact that we've copied the object,
        --   so if we come back here again we'll know where it's gone.
        ddcWriteBrokenHeart aObj aObjNew 

        aObjNew


-- Scan functions ---------------------------------------------------------------------------------
--   "Scanning" means to look at the other objects this one points to and also
--   copy those to the to-space.
--
--   There is one scan function for each object format in the heap.

-- | Scan all the objects in the to space.
--     This copies in the data that is reachable from the object already there.
ddcScanHeap
        (aaToSpaceTop   : Addr#)        -- ^ Address of the pointer to the top of the to-space.
        (aObjScan       : Addr#)        -- ^ Address of the next object we need to scan.
                        : Unit
 = case ge# aObjScan (read# aaToSpaceTop 0#) of
    -- When the next object pointer is past the top of the to-space
    -- then the scanning process is complete.
    True#  -> ()

    False# -> do

        -- Scan an object in the to-space and copy any object that
        -- it refers to from the from-space to the to-space.
        ddcScanObject aaToSpaceTop aObjScan

        -- Go to the next object to scan.
        size            = ddcSizeOfObject aObjScan
        aObjNext        = plusAddr# aObjScan size

        ddcScanHeap aaToSpaceTop aObjNext


-- | Scan an arbitrary object.
--   This examines the tag of the object to determine what sort it is,
--   then calls the scan function specific to that object.
ddcScanObject
        (aaToSpaceTop   : Addr#)        -- ^ Address of the pointer to the top of the to-space.
        (aObjScan       : Addr#)        -- ^ Address of the next object we need to scan.
                        : Unit
  =     case ddcFormatOfObject aObjScan of
          0# -> fail#   -- unknown object.
          1# -> fail#   -- broken heart.
  
          2# -> ddcScanThunk aaToSpaceTop aObjScan
          3# -> ddcScanBoxed aaToSpaceTop aObjScan

          4# -> ()      -- raw data contains no pointers to scan.
          5# -> fail#   -- ddcScanMixed aaToSpaceTop aObjScan           TODO: implement mixed
          6# -> ()      -- small raw data contains no pointers to scan.
       -- 7# -> ???     -- ISSUE #341: SuspIndir not implemented
          _  -> fail#   -- invalid format


---------------------------------------------------------------------------------------------------
-- | Scan a thunk.
ddcScanThunk
        (aaToSpaceTop   : Addr#)        -- ^ Address of the pointer to the top of the to-space.
        (aObjScan       : Addr#)        -- ^ Address of the thunk being scanned.
                        : Unit          -- ^ Number of thunk arguments we still need to evacuate.
 =      ddcScanThunk_arg 
                aaToSpaceTop 
                aObjScan 
                0#
                (ddcArgsThunk aObjScan)


-- | Scan a thunk argument.
ddcScanThunk_arg
        (aaToSpaceTop   : Addr#)        -- ^ Address of the pointer to the top of the to-space.
        (aObjScan       : Addr#)        -- ^ Address of the thunk being scanned.
        (iArg nArgs     : Nat#)
                        : Unit
 = case ge# iArg nArgs of
    True#  -> ()
    False# -> do
        -- Address where thunk argument is in the from-space.
        aArgFrom    = ddcGetThunk aObjScan iArg

        -- Evacuate the argument to the to-space.
        aArgTo      = ddcEvacuateObject aaToSpaceTop aArgFrom

        -- Update the thunk to point to the copied object in the to-space.
        ddcSetThunk aObjScan 0# iArg aArgTo

        ddcScanThunk_arg aaToSpaceTop aObjScan (add# iArg 1#) nArgs


---------------------------------------------------------------------------------------------------
-- | Scan a boxed data object.
ddcScanBoxed
        (aaToSpaceTop   : Addr#)        -- ^ Address of the pointer to the top of the to-space.
        (aObjScan       : Addr#)        -- ^ Address of the boxed object being scanned.
                        : Unit
 = do   ddcScanBoxed_arg 
                aaToSpaceTop
                aObjScan
                0#
                (ddcArityOfBoxed aObjScan)


-- | Scan an argument of a boxed object.
ddcScanBoxed_arg
        (aaToSpaceTop   : Addr#)        -- ^ Address of the pointer to the top of the to-space.
        (aObjScan       : Addr#)        -- ^ Address of the boxed object being scanned.
        (iArg           : Nat#)
        (nArgs          : Nat#)
                        : Unit
 = case ge# iArg nArgs of
    True#  -> ()
    False# -> do
        -- Address where the object argument is in the from-space.
        aArgFrom  = ddcGetBoxed aObjScan iArg

        -- Evacuate the argument to the to-space.
        aArgTo    = ddcEvacuateObject aaToSpaceTop aArgFrom

        -- Update the argument field boxed object to the copied version of the argument.
        ddcSetBoxed aObjScan iArg aArgTo

        ddcScanBoxed_arg aaToSpaceTop aObjScan (add# iArg 1#) nArgs


---------------------------------------------------------------------------------------------------
{-
-- | Scan a mixed data object.
ddcScanMixed
        [r          : Region]
        (pObj       : Ptr# r Obj)
        (ppBackTopA : Addr#)
                    : Unit
 =      ddcScanMixed_arg pObj (ddcArityOfMixed pObj) ppBackTopA

-- | Scan a boxed argument.
ddcScanMixed_arg
        [r             : Region]
        (pObj          : Ptr# r Obj)
        (argsRemaining : Nat#)
        (ppBackTopA    : Addr#)
                       : Unit
 = do
        case eq# argsRemaining 0# of
          True#  -> ()
          False# -> do
            argIx   = sub# argsRemaining 1#
            pFieldA = takePtr# (ddcGetMixed pObj argIx)

            ddcEvacuateObject pFieldA ppBackTopA

            ddcScanMixed_arg pObj argIx ppBackTopA
-}

---------------------------------------------------------------------------------------------------
-- | Print an Addr# field to stdout.
fieldAddr (name: TextLit#) (val: Addr#): Void#
 = do   primPutString name
        primPutString (primShowAddr val)
        primPutString ";\n"#


-- | Print a Nat# field to stdout.
fieldNat (name: TextLit#) (val: Nat#): Void#
 = do   primPutString name
        primPutString (primShowNat val)
        primPutString ";\n"#


-- | Print a Word32# field to stdout.
fieldWord32 (name: TextLit#) (val: Word32#): Void#
 = do   primPutString name
        primPutString (primShowWord32 val)
        primPutString ";\n"#

            