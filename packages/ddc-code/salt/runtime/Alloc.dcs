
-- | The Allocation System
module Alloc

export value
  ddcAllocCollect       :  Nat# -- ^ How much space must be left after collection.
                        -> Unit

import foreign c value
  ddcCollectHeap        :  Addr#
                        -> Addr# -> Addr# -> Addr#
                        -> Addr# -> Addr# -> Addr#
                        -> Unit

  ddcLlvmRootGetStart   : Nat#  -> Addr#

  primFailString        : TextLit# -> Void# 
  primPutString         : TextLit# -> Void# 

with letrec


-- | Perform a garbage collection.
--     If we don't free up at least as much space as requested, the runtime
--     system will panic.
ddcAllocCollect (byteCount : Nat#) : Unit
 = do
        -- Run a garbage collection cycle.
        --   This copies live objects from the front heap to the back heap
        --   then flips the heap. Once it's done the live objects are in the
        --   front heap.
        ddcCollectHeap  
                (ddcLlvmRootGetStart 0#)
                heapBase#     heapTop#     heapMax#
                heapBackBase# heapBackTop# heapBackMax#

        -- Check that we've recovered enough space to perform the
        -- required allocation. If not then we're screwed.
        -- If not then 
        aNewTop         = read# heapTop#  0#
        aNewMax         = read# heapMax#  0#

        case gt# (plusAddr# aNewTop byteCount) aNewMax of
         True#  -> do   primFailString "Out of space\n"# 
                        fail#

         False# -> do   -- primPutString "* GC completed\n"#
                        ()

