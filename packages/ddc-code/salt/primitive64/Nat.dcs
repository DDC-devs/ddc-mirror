
-- | Nat primitives for 64-bit machines.
module Nat
export value
        boxNat    : [r : Region]. Nat#   -> Ptr# r Obj
        unboxNat  : [r : Region]. Ptr# r Obj -> Nat#
        addNat    : [r1 r2 r3 : Region]. Ptr# r1 Obj -> Ptr# r2 Obj -> Ptr# r3 Obj
        subNat    : [r1 r2 r3 : Region]. Ptr# r1 Obj -> Ptr# r2 Obj -> Ptr# r3 Obj
        mulNat    : [r1 r2 r3 : Region]. Ptr# r1 Obj -> Ptr# r2 Obj -> Ptr# r3 Obj

import value
        allocRawSmall :: [r : Region]. Tag# -> Nat# -> Ptr# r Obj

with letrec 

boxNat [r : Region] (x : Nat#) : Ptr# r Obj
 = do   obj     = allocRawSmall TAG0# 8#
        addr    = takePtr# obj
        write# addr 4# x
        obj


unboxNat [r : Region] (obj : Ptr# r Obj) : Nat#
 = do   addr    = takePtr# obj
        read#  addr 4#


addNat [r1 r2 r3 : Region] (x : Ptr# r1 Obj) (y : Ptr# r2 Obj) : Ptr# r3 Obj
 = boxNat (add# (unboxNat x) (unboxNat y))


subNat [r1 r2 r3 : Region] (x : Ptr# r1 Obj) (y : Ptr# r2 Obj) : Ptr# r3 Obj
 = boxNat (sub# (unboxNat x) (unboxNat y))


mulNat [r1 r2 r3 : Region] (x : Ptr# r1 Obj) (y : Ptr# r2 Obj) : Ptr# r3 Obj
 = boxNat (mul# (unboxNat x) (unboxNat y))

