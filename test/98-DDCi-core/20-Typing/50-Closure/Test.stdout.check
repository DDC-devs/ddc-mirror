-- The inner function uses a value in region R0#.
let x : Int R0# = 5 {R0#} () in \(z : Unit).addInt {R0#} {R0#} {R1#} x x
::  Unit -(Read R0# + Alloc R1# | Use R0#)> Int R1#
:!: Alloc R0#
:$: $0

-- The inner function uses a value in region R0#.
let x : Int R0# = 5 {R0#} () in \(z : Unit).addInt {R0#} {R0#} {R1#} x x
::  Unit -(Read R0# + Alloc R1# | Use R0#)> Int R1#
:!: Alloc R0#
:$: $0

-- Inner function uses the bound value, but it is not free in the closure.
\(x : Int R0#).addInt {R0#} {R0#} {R1#} x x
::  Int R0# -(Read R0# + Alloc R1# | $0)> Int R1#
:!: !0
:$: $0

-- Inner function uses the bound value, and it is free in the closure.
\(x :Int R0#).\(y :Int R1#).addInt {R0#} {R1#} {R2#} x y
::  Int R0# -> Int R1# -(Read R0# + Read R1# + Alloc R2# | Use R0#)> Int R2#
:!: !0
:$: $0

-- Multiple levels of binding.
\(x :Int R0#).\(y :Int R1#).\(z :Int R2#).addInt {R3#} {R0#} {R4#} (addInt {R1#} {R2#} {R3#} y z) x
::  Int R0# -> Int R1# -(!0 | Use R0#)> Int R2# -(Read R1# + Read R2# + Read R3# + Read R0# + Alloc R3# + Alloc R4# | Use R0# + Use R1#)> Int R4#
:!: !0
:$: $0

-- Inner function has a value in the closure whose type contains
-- a higher kinded type variable.
\(a :% ~> *).\(x :a R1#).\(f :a R1# -> a R1#).f x
::  [a : % ~> *].a R1# -> a R1# -> a R1# -(!0 | DeepUse (a R1#))> a R1#
:!: !0
:$: $0

-- Inner funtion has a value in the clousre whose type contains
-- a closure variable.
\(e :!).\(c :$).\(f :Unit -(e | c)> Unit).\(x :Unit).f x
::  [e :!].[c :$].(Unit -(e | c)> Unit) -> Unit -(e | c)> Unit
:!: !0
:$: $0

-- Like above, and we've also instantiated the variable with a
-- pre-trimmed closure.
(\(e :!).\(c :$).\(f :Unit -(e | c)> Unit).\(x :Unit).f x) {Read R0#} {Use R1#}
::  (Unit -(Read R0# | Use R1#)> Unit) -> Unit -(Read R0# | Use R1#)> Unit
:!: !0
:$: $0

-- Like above, and we've also instantiated the variable with a closure that
-- could be trimmed, but because it's explicit in the term we don't do so. 
(\(e :!).\(c :$).\(f :Unit -(e | c)> Unit).\(x :Unit).f x) {Read R0#} {DeepUse (Int R1#)}
::  (Unit -(Read R0# | DeepUse (Int R1#))> Unit) -> Unit -(Read R0# | DeepUse (Int R1#))> Unit
:!: !0
:$: $0

