

-- Error: types of alternatives are not identical.
:check\
  case 5 {R0#} () of {\
        0 -> 0 {R0#} ();\
        1 -> ();\
}

-- Error: discriminant type is not a data type.
:check\
 case \(x : Unit). x of {\
     _ -> ()\
 }

-- Error: pattern and discriminant types don't match.
:check\
 let xx0  = Nil  {R0#} {Int R0#} () in\
 let xx1  = Cons {R0#} {Int R0#} (5 {R0#} ()) xx0 in\
 case xx1 of {\
     ()  -> ()\
 }

-- Error: pattern binds more fields than provided by constructor.
:check\
  let xx = Nil {R0#} {Int R0#} () in\
  case xx of {\
    Nil          -> ();\
    Cons x xs ys -> ();\
  }
