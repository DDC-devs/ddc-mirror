

-- Simply recursive factorial.
letrec\
 fac : [r:%]. Int r -> Int r\
   = \(r:%). \(n : Int r).\
     case n of {\
      0       -> 1 {r} ();\
      _       -> mulInt {:r r r:} n\
                      (fac {r} (subInt {:r r r:} n\
                                       (1 {r} ())));\
     }\
in fac {R1#} (5 {R1#} ())


-- Tail recursive factorial.
letrec\
 fac : [r:%]. Int r -> Int r -> Int r\
  = \(r:%). \(acc : Int r). \(n : Int r).\
    case n of {\
     0   -> acc;\
     _   -> fac {r}\
                (mulInt {:r r r:} acc n)\
                (subInt {:r r r:} n (1 {r} ()))\
    }\
in fac {R1#} (1 {R1#} ()) (5 {R1#} ())
