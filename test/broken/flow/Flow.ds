
-- 
module Flow
import Data.Numeric.Bool
import Data.Numeric.Nat
import Data.Array
import Data.Text
where

-------------------------------------------------------------------------------
-- | A bundle of stream sources. 
--    The individual streams are indexed by a value of type 'i'.
--    Pulling from a stream element causes effect 'e',
--    and produces a element of type 'a'.
--
data Sources (i: Data) (e: Effect) (a: Data) where
        Sources 
         :   i                                                  -- arity
         -> (i -> (a -> S e Unit) -> S e Unit -> S e Unit)      -- pull
         -> Sources i e a


-- | A bundle of stream sinks.
--     The individual streams are indexed by a value of type 'i'.
--     Pushing a stream element causes an effect 'e',
--     and the elements themselves have type 'a'.
--
data Sinks   (i: Data) (e: Effect) (a: Data) where
        Sinks
         :   i                                                  -- arity
         -> (i -> a -> S e Unit)                                -- push
         -> (i -> S e Unit)                                     -- eject
         -> Sinks i e a


-------------------------------------------------------------------------------
-- | Pull all available values from the sources and push them to the sinks.
--   Streams in the bundle are processed sequentially, from first to last.
--
--   If the provided sources and sinks have different numbers of streams then
--   we only evaluate the common subset.
--
drain   [a: Data]   [e: Effect]
        (srcs: Sources Nat e a) (snks: Sinks Nat e a)
        : S e Unit
 | Sources n1 pulls            <- srcs
 , Sinks   n2 pushs ejects     <- snks
 = loop_drain 0
 where  
        loop_drain (ix: Nat): S e Unit
         = pulls ix eat_drain eject_drain
         where  
                eat_drain (v: a): S e Unit
                 = do   pushs ix v
                        loop_drain ix

                eject_drain: S e Unit
                 = box do   
                        ejects ix
                        ix' = ix + 1
                        if (ix' >= n1 âˆ¨ ix' >= n2)
                         then weakeff [e] in ()
                         else loop_drain ix'


-------------------------------------------------------------------------------
-- | Apply a function to all elements pulled from some sources.
map_i   [a b i: Data] [e: Effect] 
        (f: a -> b) (srcsA: Sources i e a): Sources i e b
 | Sources n pullsA      <- srcsA
 = Sources n pullsB
 where  pullsB    i eatB ejectB
         = pullsA i eatA ejectA
         where  eatA v  = eatB (f v)
                ejectA  = ejectB


-- | Apply a function to all elements pushed to some sinks.
map_o   [a b i: Data] [e: Effect]
        (f: a -> b) (sinksB: Sinks i e b)
        : Sinks i e a
 | Sinks n pushB ejectB <- sinksB
 = Sinks n pushA ejectA
 where  pushA i a       = pushB i (f a)
        ejectA i        = ejectB i


-------------------------------------------------------------------------------
-- This doesn't work.
--   The type of the sources constructor requires the effects of the 
--   eat and eject functions to be the same as the overall pull function, 
--   but we want to introduce local state on other regions.
-- 
--   Sources 
--    :   i                                                   -- arity
--    -> (i -> (a -> S e Unit) -> S e Unit -> S e Unit)       -- pull
--    -> Sources i e a
--
--  We really want
--   Sources 
--    :   i                                                   -- arity
--    -> ([e1 e2 e3 <: e : Effect]
--        . i -> (a -> S e1 Unit) -> S e2 Unit -> S e3 Unit)  -- pull
--    -> Sources i e a
--
--
--  Error in transformed module.
--    packages/ddc-code/tetra/base/Data/Flow.ds:91:10
--    Type mismatch.
--      inferred type: Nat -> (a -> S e Unit) -> S e Unit -> S (Read r + Write r + e) Unit
--      expected type: Nat# -> (?82 -> S ?81 Unit) -> S ?81 Unit -> S ?81 Unit
--
fromList [a: Data] [e: Effect] [r: Region]
         (arity: Nat)  (xx: List a)
         : S (Alloc r) 
             (Sources Nat (Read r + Write r + e) a)
 = do   
        arrList = allocArray [r] arity xx
        Sources arity (pull arrList)

 where  
        pull (arr:   Array r (List a)) 
             (i:     Nat)
             (eat:   a -> S e Unit)
             (eject: S e Unit)
             : S (Read r + Write r + e) Unit
         = do   xx'     = readArray arr i
                case xx' of
                 Nil            
                  -> eject

                 Cons x xs      
                  -> do writeArray arr i xs
                        eat x
