data Void;
data Unit %r1	= Unit;
data Data;
data Int %r1;
data Tuple2 %r1 a b = Tuple2 a b;
data Bool %r1
	= True | False;

data Apple %r1	= Apple;
data Orange %r1	= Orange;

{-
a	= 3;

id x	= x;


y	= id a;

doId z	= id z;

effect !Console	:: !;

foreign import extern "print"
	print :: Int -(!{!Console})> () 
	      :$ Data -> Data;
app f x 
 = do {
 	f x;
	print ();
 };
-}

{-
fst x y	= x;

x	= 5;
fun  ()	= fst x 1;
fun2 ()	= fun;
fun3 ()	= fun2;

-}
app2 b f g x
 = case b of {
 	True	-> (f, f x);
	False	-> (g, g x);
 };



dude b f x y
 = case b of {
 	True	-> f Apple;
	False	-> f Orange;
--	Apple	-> f Apple;
 };



data List a 
	= Nil
	| Cons a (List a);

z	= Cons Apple (Cons Orange Nil);

{-
app1 f x	= (f, f x);


x	= 5;

f b y	= if b	then x
		else y;
-}


