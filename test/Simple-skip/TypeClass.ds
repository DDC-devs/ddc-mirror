
data Int %r;
data Float %r;
data Unit	= Unit;

-- int
foreign import extern "primInt32Add"
 primInt32_add		:: elaborate Int -> Int -> Int;

foreign import extern "primInt32Sub"	
 primInt32_sub		:: elaborate Int -> Int -> Int;

foreign import extern "primInt32Mul"	
 primInt32_mul		:: elaborate Int -> Int -> Int;

foreign import extern "primInt32Div"	
 primInt32_div		:: elaborate Int -> Int -> Int;


-- float
foreign import extern "primFloat32_add"
 primFloat32_add	:: elaborate Float -> Float -> Float;

foreign import extern "primFloat32_sub"
 primFloat32_sub	:: elaborate Float -> Float -> Float;

foreign import extern "primFloat32_mul"
 primFloat32_mul	:: elaborate Float -> Float -> Float;

foreign import extern "primFloat32_div"
 primFloat32_div	:: elaborate Float -> Float -> Float;


class 	Shape3 	:: * -> * -> * -> +;

effect 	!ReadT	:: * -> !;

class Add a where 
{	
	(+)	:: forall b c !e1 $c1
	 	.  a -> b -(!e1 $c1)> c 
		:- Shape3 a b c
		,  !e1 = !{ !ReadT a; !ReadT b }
		,  $c1 = ${ x :: a };

	(-)	:: forall b c !e1 $c1
		. a -> b -(!e1 $c1)> c
		:- Shape3 a b c
		,  !e1 = !{ !ReadT a; !ReadT b }
		,  $c1 = ${ x :: a };

}


instance Add Int where 
{
	(+) 	= primInt32_add;
	(-) 	= primInt32_sub;
}


instance Add Float where
{
	(+)	= primFloat32_add;
	(-)	= primFloat32_sub;
}


wibble ()
 = do {	x1	:: Int %r1;
 	x1	= 3 + 4 - 27;

	x2	:: Float %r2;
 	x2	= 3.0 + 4.0 - 27.0;
	
	x2;
 };
 	
 
lengthR :: 	[a] -> Int;
lengthR xx
 = case xx of {
 	[]	-> 0;
	x : xs	-> 1 + lengthR xs;
 };
 	
data	List %r1 a
	= Nil
	| Cons { 
		x 	:: a;
		xs	:: List %r1 a; }

	| Append {
		xs	:: List %r1 a; 
		ys	:: List %r1 a; };

-----
-- Construction
--
infixr 6 : ;
(:)  x xs 	= Cons   x xs;
