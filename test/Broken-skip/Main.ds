
-- Test out a fourth and fifth order functions.
--	At fourth order we can get :> constraints, where the effect variables in the
--	constraint are also constrained. We need the SubReplay rule for type checking the core.
--

-- succ is a first order function
succ :: Int -> Int;
succ x = x + 1;

{-
printSucc :: Int -> Int
printSucc x
 = do	putStr $ show x
	x

sameType :: a -> a -> a
sameType x y 
 = if True then x else y
-}

-- danio is a second order function
danio g	= g 5;

{-
danioSucc g = succ (g 5);

danioChoose g
 = do	if True
		then g
		else (\x -> succ x)

	g 5

danioChooseSucc g
 = do	if True
		then g
		else (\x -> succ x)
	
	succ (g 5)
-}	

-- tetra is a third order function
tetra f = succ (f succ);

{-
-- tetraP is a third order function with an additional effect
tetraP f 
 = do {	n	= tetra f;
	print 	$ show n;
	n;
 };

appDanio f = f danio;



discus f 
 = do	p' 	= if True then tetra else f
	5
-}	

-- tetra is a fifth order function
perch b p h 
 = do { 
 	-- force the argument 'p' to be third order by comparing it with tetra
 	p'	= if b then tetra else p;
	p' danio;

	()
	-- 'h' is fourth order because we apply it to p'.
--        h p';	
 };	

{-
main ()
 = 	print $ show (perch True tetraP appDanio);
-}

main ()
	= print "foo"
