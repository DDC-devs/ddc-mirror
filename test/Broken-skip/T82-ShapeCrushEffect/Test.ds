data IntFun %r1 a !e1 $c1
 	= FInt (Int %r1)
	| FFun (a -(!e1 $c1)> a)
 	


class Copy2 a where
  copy2 :: forall b. a -(!e1)> b
	:- !e1 = !ReadT a
	,  Shape2 a b

copyIntFun2 xx
 = case xx of 
	FInt i	-> FInt (i + 0)
	FFun f	-> FFun f

instance Copy2 IntFun where
  copy2	= copyIntFun2

f2   = FFun ((+) 1)
f2'  = copy2 f2