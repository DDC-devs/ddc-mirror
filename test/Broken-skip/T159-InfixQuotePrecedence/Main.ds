
-- Solution to the first project euler problem, from the Haskell Wiki
--	This should print 233168
--

maxN = 1000

correctSoln = 233168

main ()
 = do	println $ "With parentheses    : " % show solution2
 		% if solution2 /= correctSoln then " (should be "
		% show correctSoln % ")" else ""
	println $ "Without parentheses : " % show solution1
        	% if solution1 /= correctSoln then " (should be "
		% show correctSoln % ")" else ""


solution1 :: Int
solution1 = sumStep 3 last + sumStep 5 last - sumStep 15 last
  where	sumOnetoN n = n * (n+1) `div` 2		-- the `div` should be lower precedence than the other
						-- infix ops
	sumStep s n = s * sumOnetoN (n `div` s)
	last        = maxN - 1


-- Same as above, but adding explicit parentheses in sumOnetoN.
solution2 :: Int
solution2 = sumStep 3 last + sumStep 5 last - sumStep 15 last
  where	sumOnetoN n = (n * (n+1)) `div` 2
	sumStep s n = s * sumOnetoN (n `div` s)
	last        = maxN - 1
