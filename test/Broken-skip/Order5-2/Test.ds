-- This works if we don't do strengthening during Type.Extract

import Base
import Data.Numeric.Int32
import System.Console

-- succ is a first order function
succ :: Int -> Int
succ x = primInt32_add x 1

-- appFive is a second order function
appFive g	= g 5

-- succ2succ is a third order function
succ2succ f 	= succ (f succ)      


-- perch is a fourth order function
--    its argument is a third order function
--    will apply this argument to a second order function
perch p 
 = do 
 	-- force the argument 'p' to be third order by comparing it with tetra
 	p'	= if False then succ2succ else p
	p' appFive

	5


-- ignores its argument and prints to the console.
printSome f 
 = do 	print "dude"
	23
        

thing _ = perch printSome

main _
 = do	thing ()
	()
