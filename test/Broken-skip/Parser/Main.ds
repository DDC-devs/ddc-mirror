
import Data.Char
import Class.Monad

-- Parser -----------------------------------------------------------------------------------------

data Parser !e1 $c1 tok a 
	= Parser ([tok] -(!e1 $c1)> Reply tok a)

data Reply tok a
	= Success a [tok]
	| Error (ParserError tok)

-- Possible parser errors
data ParserError tok
	= ErrorUnexpected tok	-- ^ token was unexpected
	| ErrorEOF		-- ^ end of string was reached


-- Run a parser across a string of input tokens
runParser :: Parser tok a -> [tok] -> Reply tok a
runParser (Parser fun) str
	= fun str


-- we can't use regular return here, because it's type
--	doesn't capture the fact that the arg becomes part
--	of the closure of the parser
--
--	return  :: a -> m a
-- vs	pReturn :: a -> Parser %r !PURE (x : a) tok a
--

instance Monad (Parser %r1 !e1 $c1 tok) where
	(>>=) 		= parserBind
	(>>)		= parserThen

pReturn x
 = Parser (\str -> Success x str)

parserBind (Parser parse1) mkParser2
 = Parser $ \str ->
 	case parse1 str of
		Success result rest	-> runParser (mkParser2 result) rest
		Error err		-> Error err

parserThen (Parser parse1) parser2
 = Parser $ \str ->
 	case parse1 str of
		Success result rest	-> runParser parser2 rest
		Error err		-> Error err

-- Bits and pieces ---------------------------------------------------------------------------------
isSuccess rr
 = case rr of
	Success _ _	-> True
	_		-> False


-- Primitive Parsers -------------------------------------------------------------------------------
pChar :: Char -> Parser Char ()
pChar c
 = Parser $ \str -> 
 	case str of
 	 (s : rest) -> if s == c 
			then Success () rest
			else Error (ErrorUnexpected s)
	 []	  -> Error (ErrorEOF)


-- Combinators ------------------------------------------------------------------------------------

-- | If the first parser fails then try the second one.
(<|>) 	:: Parser tok a 
	-> Parser tok a
	-> Parser tok a
	
(<|>) (Parser parse1) parser2
 = Parser $ \str ->
 	case parse1 str of
	 result@(Success _ _)	-> result
	 _			-> runParser parser2 str


-- | Parse many strings in sequence
many :: Parser tok a -> Parser tok [a]
many parser
 =   do	x	<- parser
	rest	<- many parser
	pReturn (x : rest)

 <|>	pReturn []


-- | Parse at least one of these
many1 :: Parser tok a -> Parser tok [a]
many1 parser
 = do	x	<- parser
 	rest	<- many parser
	pReturn	(x : rest)


-- | A list of tokens, separated by another
sepBy1 :: Parser tok a -> Parser tok b -> Parser tok [a]
sepBy1 pTok pSep 
 = do	x	<- pTok
 	xs	<- many (do { _ <- pSep; pTok })
	pReturn	(x : xs)

-----
test	= ['a', 'v', 'a', 'v', 'a', 'b']
test2	= ['a', 'a', 'a', 'a', 'a', 'a']

pTest
 =   do	_	<- sepBy1 (pChar 'a') (pChar 'v')
 	_	<- pChar 'b'
	pReturn	()

 <|> do	_	<- pChar 'z'
 	pReturn	()

 <|> do	_	<- many1 (pChar 'a')
	pReturn ()
 	

	
main ()
 = do	putStr	$ show test2 % "\n"
	result	= runParser pTest test
	
	putStr	$ show (isSuccess result) % "\n"

	()
	

