-- Imports

-- Pragmas

-- Infix

-- Data
data Option %rDK3 a
        = Some {
                x :: a ;
        }
        
        | None;

data FooRef %r1 a
        = FooRef {
                x :: a ;
        };


-- Effects

-- Regions


-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import project_List_count
        :: forall t0 %r0 %r1
        .  Data.List.List %r1 t0 -(!e0)> Base.Int32 %r0
        :- !e0        = !{Base.!Read %r1; Base.!Read %r0}
        :$ Base.Thunk;
        
foreign import project_Option_x
        :: forall t0 %r0
        .  Option %r0 t0 -(!e0)> t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Obj;
        
foreign import project_Option_ref_x
        :: forall t0 %r0
        .  Option %r0 t0 -(!e0)> Base.Ref %r0 t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import project_FooRef_x
        :: forall t0 %r0
        .  FooRef %r0 t0 -(!e0)> t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Obj;
        
foreign import project_FooRef_ref_x
        :: forall t0 %r0
        .  FooRef %r0 t0 -(!e0)> Base.Ref %r0 t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import project_List_x
        :: forall Data.List.t0 %r0
        .  Data.List.List %r0 Data.List.t0 -(!e0)> Data.List.t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Obj;
        
foreign import project_List_xs
        :: forall Data.List.t0 %r0
        .  Data.List.List %r0 Data.List.t0 -(!e0)> Data.List.List %r0 Data.List.t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import project_List_ref_x
        :: forall Data.List.t0 %r0
        .  Data.List.List %r0 Data.List.t0 -(!e0)> Base.Ref %r0 Data.List.t0
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import project_List_ref_xs
        :: forall Data.List.t0 %r0
        .  Data.List.List %r0 Data.List.t0 -(!e0)> Base.Ref %r0 (Data.List.List %r0 Data.List.t0)
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
project Option %Bot *Bot where
{
        x = project_Option_x;
        ref_x = project_Option_ref_x;
}

project FooRef %Bot *Bot where
{
        x = project_FooRef_x;
        ref_x = project_FooRef_ref_x;
}

project Data.List.List %rDK126 where
{
        count = project_List_count;
}


