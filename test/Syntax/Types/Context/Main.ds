
import Class.Monad

-- Functor -----------------------------------------------------------------------------------------

instance Monad Maybe where
 	return x	= Just x
	
	(>>=) m1 fun
	 = case m1 of
	 	Nothing	-> Nothing
		Just a	-> fun a

-----
main ()	
 = do	putStr	$ show (map (\x -> x + 1) [1, 2, 3])	% "\n"
 	putStr	$ show thing				% "\n"


count 	:: Int %r :- Mutable %r
count	= 0

thing :: Maybe Int
thing
 = do	(x1, x2, y2)	<- Just (1, 2, 3)
 	y	<- Just (x2 + 10)
	z	<- Just (y + 100)
	return	$ z + 1000


instance Show (Maybe Int) where
	show Nothing	= "Nothing"
	show (Just x)	= "Just " % show x




-- test syntax of class contexts
--	can't actually compile this until we finish dictionary passing
{-
foo1	:: Num a => a -> a -> Bool

foo2	:: (Num a, Eq a) => a -> a -> Bool

foo3	:: Num a => Eq a => a -> a -> Bool

-}
