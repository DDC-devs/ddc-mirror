
-- boxed match ----------------------------------------------------------------
testLitBoxed_1 x
 = case 0 of
	0	-> 5
	1	-> 6
 	_	-> 7

testLitBoxed_2 x
 = case x of
	'a'	-> 5
 	'b'	-> 6
	_	-> 7

testLitBoxed_3 x
 = case x of
	4.5 	-> 5
 	6.7 	-> 6
	_	-> 7
{-
test1_4 x
 = case x of
	"dude" 	-> 5
	"wibble" -> 6
	_	-> 7

test1_5 x
 = case x of	
	"dude"	-> 5
-}	


-- unboxed match --------------------------------------------------------------
testLitUnboxed_1 x
 = case 0# of
	23#	-> 5
	42#	-> 6 
 	_ 	-> 7

testLitUnboxed_2 x
 = case x of
	'a'# 	-> 5
 	'b'# 	-> 6
	_	-> 7

testLitUnboxed_3 x
 = case x of
	4.5# 	-> 5
 	6.7# 	-> 6
	_	-> 7


-- match against lists --------------------------------------------------------
testPatList_1
 = case [1, 2, 3] of
	[]		-> 100
	[a, b, c] 	-> a + b + c	
	
testPatList_2 
 = case [(1, 'a'), (2, 'b')] of
	((a, b) : _)	-> show a %% show b

testPatList_3
 = case [(1, 'a'), (2, 'b')] of
	[(a, b), (c, d)]
		-> show a %% show b %% show c %% show d

-- only two elems in list
testPatList_3
 = case [(1, 'a'), (2, 'b')] of
	[(a, b), (c, d), (e, f)]
		-> "lose"

	[(a, b), (c, d)]
		-> "win"

	
main ()
 = do	putStr $ show (testLitBoxed_1 0) 	% "\n"
	putStr $ show (testLitBoxed_2 'a')	% "\n"
	putStr $ show (testLitBoxed_3 4.5) 	% "\n"
--	putStr $ show (test1_4 "dude") 	% "\n"
--	putStr $ show (test1_5 "dude") 	% "\n"

	putStr $ show (testLitUnboxed_1 7)	% "\n"
	putStr $ show (testLitUnboxed_1 'z')	% "\n"
	putStr $ show (testLitUnboxed_1 10.0)	% "\n"
	
	putStr $ show testPatList_1		% "\n"
	putStr $ testPatList_2			% "\n"
	putStr $ testPatList_3			% "\n"
	
	