-- Imports

-- Pragmas

-- Infix

-- Data

-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import extern map2
        :: forall t0 t1 %r0 %r1 !e0 $c0
        .  (t0 -(!e0 $c0)> t1) -> Data.List.List %r0 t0 -(!e1 $c1)> Data.List.List %r1 t1
        :- !e1        = !{Base.!Read %r0; !e0}
        ,  $c1        = f : $c0
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import extern addMe
        :: forall %r0 %r1 %r2 %r3 %r4 %r5 %r6 %r7 %r8 %r9 %r10 %r11 %r12
        .  Data.Tuple.Tuple2 %r1 (Base.Int %r12) (Data.List.List %r2 (Data.Tuple.Tuple2 %r3 (Base.Int %r12) (Base.Int %r11))) -> Data.Tuple.Tuple3 %r4 (Data.Tuple.Tuple2 %r6 (Base.Int %r10) (Base.Int %r9)) (Base.Int %r8) (Data.Tuple.Tuple2 %r5 (Base.Int %r7) (Base.Int %r0)) -(!e0 $c0)> Base.Int %r0
        :- !e0        = !{Base.!Read %r12; Base.!Read %r11; Base.!Read %r10; Base.!Read %r9; Base.!Read %r8; Base.!Read %r7; Base.!Read %r0; Base.!Read %r1; Base.!Read %r2; Base.!Read %r3; Base.!Read %r4; Base.!Read %r5; Base.!Read %r6}
        ,  $c0        = xSDt15 : Data.Tuple.Tuple2 %r1 (Base.Int %r12) (Data.List.List %r2 (Data.Tuple.Tuple2 %r3 (Base.Int %r12) (Base.Int %r11)))
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import extern sumTuples
        :: forall %r0 %r1 %r2 %r3 %r4
        .  Data.List.List %r0 (Data.Tuple.Tuple2 %r2 (Base.Int %r3) (Base.Int %r4)) -(!e0)> Base.Int %r1
        :- !e0        = !{Base.!Read %r0; Base.!Read %r3; Base.!Read %r4; Base.!Read %r1; Base.!Read %r2}
        :$ Base.Data -> Base.Data;
        
foreign import extern listPairs
        :: forall %r0 %r1 %r2 %r3 %r4
        .  Data.List.List %r3 (Base.Int %r1) -(!e0)> Data.List.List %r4 (Data.Tuple.Tuple2 %r2 (Base.Int %r1) (Base.Int %r0))
        :- !e0        = !{Base.!Read %r3; Base.!Read %r1}
        :$ Base.Data -> Base.Data;
        
foreign import extern unboxed
        :: Base.Int32# -> Base.Int32#
        :$ Base.Int32# -> Base.Int32#;
        
foreign import extern listPairTuples
        :: forall %r0 %r1 %r2 %r3 %r4
        .  Data.List.List %r0 (Data.Tuple.Tuple2 %r1 (Base.Char %r2) (Base.Char %r2)) -(!e0)> Data.List.List %r4 (Data.Tuple.Tuple2 %r3 (Base.Char %r2) (Base.Char %r2))
        :- !e0        = !{Base.!Read %r0; Base.!Read %r1; Base.!Read %r2}
        :$ Base.Data -> Base.Data;
        

