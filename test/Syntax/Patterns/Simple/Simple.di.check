-- Imports

-- Pragmas

-- Infix

-- Data

-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import extern map2
        :: forall t0 t1 %r0 %r1 !e0 !e1 $c0 $c1
        .  (t0 -(!e1 $c1)> t1) -> Data.List.List %r0 t0 -(!e0 $c0)> Data.List.List %r1 t1
        :- !e0   = !{!e1; Base.!Read %r0}
        ,  $c0   = ${$c1}
        :$ Base.Thunk -> Base.Data -> Base.Data;
        
foreign import extern addMe
        :: forall %r0 %r1 %r2 %r3 %r4 %r5 %r6 %r7 %r8 %r9 %r10 %r11 %r12 %r13 %r14 !e0 $c0
        .  Data.Tuple.Tuple2 %r13 (Base.Int %r7) (Data.List.List %r12 (Data.Tuple.Tuple2 %r11 (Base.Int %r6) (Base.Int %r5))) -> Data.Tuple.Tuple3 %r10 (Data.Tuple.Tuple2 %r9 (Base.Int %r4) (Base.Int %r3)) (Base.Int %r2) (Data.Tuple.Tuple2 %r8 (Base.Int %r1) (Base.Int %r0)) -(!e0 $c0)> Base.Int %r14
        :- !e0   = !{Base.!Read %r0; Base.!Read %r1; Base.!Read %r2; Base.!Read %r3; Base.!Read %r4; Base.!Read %r5; Base.!Read %r6; Base.!Read %r7; Base.!Read %r8; Base.!Read %r9; Base.!Read %r10; Base.!Read %r11; Base.!Read %r12; Base.!Read %r13}
        ,  $c0   = ${vSD0 :: Data.Tuple.Tuple2 %r13 (Base.Int %r7) (Data.List.List %r12 (Data.Tuple.Tuple2 %r11 (Base.Int %r6) (Base.Int %r5)))}
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import extern sumTuples
        :: forall %r0 %r1 %r2 %r3 %r4 !e0
        .  Data.List.List %r4 (Data.Tuple.Tuple2 %r3 (Base.Int %r2) (Base.Int %r1)) -(!e0)> Base.Int %r0
        :- !e0   = !{Base.!Read %r1; Base.!Read %r2; Base.!Read %r3; Base.!Read %r4}
        :$ Base.Data -> Base.Data;
        
foreign import extern listPairs
        :: forall t0 %r0 %r1 %r2 !e0
        .  Data.List.List %r0 t0 -(!e0)> Data.List.List %r1 (Data.Tuple.Tuple2 %r2 t0 t0)
        :- !e0   = !{Base.!Read %r0}
        :$ Base.Data -> Base.Data;
        
foreign import extern listPairTuples
        :: forall t0 %r0 %r1 %r2 %r3 !e0
        .  Data.List.List %r1 (Data.Tuple.Tuple2 %r0 t0 t0) -(!e0)> Data.List.List %r2 (Data.Tuple.Tuple2 %r3 t0 t0)
        :- !e0   = !{Base.!Read %r0; Base.!Read %r1}
        :$ Base.Data -> Base.Data;
        

