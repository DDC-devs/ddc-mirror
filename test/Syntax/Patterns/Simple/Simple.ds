
-- Check pattern match desugaring.
--

map2 f xx
 = case xx of {
 	[]	-> [];
	x : xs	-> f x : map2 f xs;
 };

-- check expression patterns 
addMe :: Tuple2 Int [Tuple2 Int Int] -> Tuple3 (Tuple2 Int Int) Int (Tuple2 Int Int) -> Int;
addMe (x, ((a, b) : z))	((c, d), e, (f, g)) 
 	= x + a + b + c + d + e + f + g;

-- check a few pattern alternatives
sumTuples xx
 	| []			<- xx	
	= 0

	| ((x1, y1) : xs) 	<- xx	
	= x1 + y1 + sumTuples xs
	
-- check pattern matching of lists and unboxde data
listPairs xx
 	| a : 5 : xs	<- xx 	
	=  (a, 5) : listPairs (23 : xs)
	
	\= []

-- check pattern matching against boxed data
unboxed xx
	| 1#		<- xx
	= 0#
	
	


listPairTuples xx
 	| (x1, x2) : ('a', y2) : xs	<- xx
	= (x1, 'b') : ('a', y2) : listPairTuples ((x2, y2) : xs)
	
	\= []


