
import System.Environment

-- T monads in the style of Wadler's "The Marriage of Monads and Effects"
data T !e $c a 
	= T (() -(!e $c)> a)

-- Create a computation that just returns a value
returnT :: a -> T a
returnT a
 = T (\() -> a)

-- Compose two computations. 
--	Note that the effect of the resulting one includes
--	the effect of the other two.
bindT :: T $e0 a -> (a -> T !e1 b) -> T !e2 b
      :- !e2 = !{ !e0 ; !e1 }

bindT (T f1) mf2
 = T (\() -> case mf2 (f1 ()) of { T f2 -> f2 () })

-- Encapsulate an effectful function into a T monad.
encap1 :: (a -> b) -> (a -> T b)
encap1 f x = T (\() -> f x)

-- Run a computation.
runT :: T !e0 $c0 a -> a
runT (T f) = f ()
	
-- Some example effectful computations
putStrT :: String -> T ()
putStrT   = encap1 putStr

readFileT :: String -> T (Maybe String)
readFileT = encap1 file_read

main ()
 = runT (readFileT "foo" `bindT` \(Just x) ->
	 putStrT x)

