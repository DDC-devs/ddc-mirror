-- Imports

-- Pragmas

-- Infix

-- Data

-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import extern regen1
        :: forall %r0 %r1 $c0 $c1
        .  Base.Unit -($c0)> Base.Unit -($c1)> Data.Tuple.Tuple2 %r1 (Base.Int %rTS1) (Base.Int %r0)
        :- $c0   = ${i1 :: Base.Int %rTS1}
        ,  $c1   = ${i1 :: Base.Int %rTS1; i2 :: Base.Int %r0}
        :$ Base.Thunk;
        
foreign import extern regen2
        :: forall %r0 $c0
        .  Base.Unit -($c0)> Data.Tuple.Tuple2 %r0 (Base.Int %rTS4) (Base.Int %rTS5)
        :- $c0   = ${i1 :: Base.Int %rTS4; i2 :: Base.Int %rTS5}
        :$ Base.Thunk;
        
foreign import extern regen3
        :: Data.Tuple.Tuple2 %rTS9 (Base.Int %rTS7) (Base.Int %rTS8)
        :$ Base.Data;
        
foreign import extern regen1_app1
        :: Data.Tuple.Tuple2 %rTS11 (Base.Int %rTS1) (Base.Int %rTS10)
        :$ Base.Data;
        
foreign import extern regen1_app2
        :: Data.Tuple.Tuple2 %rTS13 (Base.Int %rTS1) (Base.Int %rTS12)
        :$ Base.Data;
        
foreign import extern regen2_app1
        :: Data.Tuple.Tuple2 %rTS14 (Base.Int %rTS4) (Base.Int %rTS5)
        :$ Base.Data;
        
foreign import extern regen2_app2
        :: Data.Tuple.Tuple2 %rTS15 (Base.Int %rTS4) (Base.Int %rTS5)
        :$ Base.Data;
        
foreign import extern fun1
        :: forall %r0 %r1 %r2 $c0 $c1
        .  Base.Unit -> Base.Unit -($c0)> Base.Unit -($c1)> Data.Tuple.Tuple2 %r2 (Base.Int %r0) (Base.Int %r1)
        :- $c0   = ${i1 :: Base.Int %r0}
        ,  $c1   = ${i1 :: Base.Int %r0; i2 :: Base.Int %r1}
        :$ Base.Data -> Base.Thunk;
        

