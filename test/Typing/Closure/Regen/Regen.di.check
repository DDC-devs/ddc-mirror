-- Imports

-- Pragmas

-- Infix

-- Data

-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import regen1
        :: forall %r0 %r1
        .  Base.Unit -($c0)> Base.Unit -($c1)> Data.Tuple.Tuple2 %r1 (Base.Int %rTS4) (Base.Int %r0)
        :- $c0        = i1 : %rTS4
        ,  $c1        = ${i1 : %rTS4; i2 : %r0}
        :$ Base.Thunk;
        
foreign import regen2
        :: forall %r0
        .  Base.Unit -($c0)> Data.Tuple.Tuple2 %r0 (Base.Int %rTS7) (Base.Int %rTS8)
        :- $c0        = ${i1 : %rTS7; i2 : %rTS8}
        :$ Base.Thunk;
        
foreign import regen3
        :: Data.Tuple.Tuple2 %rTS12 (Base.Int %rTS10) (Base.Int %rTS11)
        :$ Base.Data;
        
foreign import regen1_app1
        :: Data.Tuple.Tuple2 %rTS14 (Base.Int %rTS4) (Base.Int %rTS13)
        :$ Base.Data;
        
foreign import regen1_app2
        :: Data.Tuple.Tuple2 %rTS16 (Base.Int %rTS4) (Base.Int %rTS15)
        :$ Base.Data;
        
foreign import regen2_app1
        :: Data.Tuple.Tuple2 %rTS17 (Base.Int %rTS7) (Base.Int %rTS8)
        :$ Base.Data;
        
foreign import regen2_app2
        :: Data.Tuple.Tuple2 %rTS18 (Base.Int %rTS7) (Base.Int %rTS8)
        :$ Base.Data;
        
foreign import fun1
        :: forall %r0 %r1 %r2
        .  Base.Unit -> Base.Unit -($c0)> Base.Unit -($c1)> Data.Tuple.Tuple2 %r2 (Base.Int %r0) (Base.Int %r1)
        :- $c0        = i1 : %r0
        ,  $c1        = ${i1 : %r0; i2 : %r1}
        :$ Base.Data -> Base.Thunk;
        

