-- Imports

-- Pragmas

-- Infix

-- Data

-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import extern regen1
        :: forall %r0 %r1
        .  Base.Unit -($c0)> Base.Unit -($c1)> Data.Tuple.Tuple2 %r0 (Base.Int %rTS5) (Base.Int %r1)
        :- $c0        = i1 : Base.Int %rTS5
        ,  $c1        = ${i1 : Base.Int %rTS5; i2 : Base.Int %r1}
        :$ Base.Thunk;
        
foreign import extern regen2
        :: forall %r0
        .  Base.Unit -($c0)> Data.Tuple.Tuple2 %r0 (Base.Int %rTS8) (Base.Int %rTS9)
        :- $c0        = ${i1 : Base.Int %rTS8; i2 : Base.Int %rTS9}
        :$ Base.Thunk;
        
foreign import extern regen3
        :: Data.Tuple.Tuple2 %rTS10 (Base.Int %rTS11) (Base.Int %rTS12)
        :$ Base.Data;
        
foreign import extern regen1_app1
        :: Data.Tuple.Tuple2 %rTS13 (Base.Int %rTS5) (Base.Int %rTS14)
        :$ Base.Data;
        
foreign import extern regen1_app2
        :: Data.Tuple.Tuple2 %rTS15 (Base.Int %rTS5) (Base.Int %rTS16)
        :$ Base.Data;
        
foreign import extern regen2_app1
        :: Data.Tuple.Tuple2 %rTS17 (Base.Int %rTS8) (Base.Int %rTS9)
        :$ Base.Data;
        
foreign import extern regen2_app2
        :: Data.Tuple.Tuple2 %rTS18 (Base.Int %rTS8) (Base.Int %rTS9)
        :$ Base.Data;
        
foreign import extern fun1
        :: forall %r0 %r1 %r2
        .  Base.Unit -> Base.Unit -($c0)> Base.Unit -($c1)> Data.Tuple.Tuple2 %r0 (Base.Int %r1) (Base.Int %r2)
        :- $c0        = i1 : Base.Int %r1
        ,  $c1        = ${i1 : Base.Int %r1; i2 : Base.Int %r2}
        :$ Base.Data -> Base.Thunk;
        

