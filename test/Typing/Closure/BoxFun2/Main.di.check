-- Imports

-- Pragmas

-- Infix

-- Data
data FunBox %r1 a !e1 $c1
        = FunBox {
                fun :: a -(!e1 $c1)> a ;
        };


-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import thing
        :: Base.Int32 %rTC2
        :- Base.Const %rTC2
        ,  Base.Direct %rTC2
        :$ Base.Data;
        
foreign import box
        :: FunBox %r1 (Base.Int32 %rTS6) !e0 $c0
        :- !e0        = !{Base.!Read %rTS6; Base.!Read %rTC2; System.Console.!Console}
        ,  $c0        = thing : %rTC2
        ,  Base.Mutable %r1
        ,  Base.Const %rTS6
        ,  Base.Direct %rTS6
        ,  Base.Direct %r1
        ,  Base.Direct %rTC2
        ,  Base.Const %rTC2
        :$ Base.Data;
        
foreign import gotBox
        :: Data.Tuple.Tuple3 %rTS23 (FunBox %rTS21 (Base.Int32 %rTS22) !e0 $c0) (Base.Unit -(!e1 $c1)> Base.Unit) (Base.Unit -(!e2 $c2)> Base.Int32 %rTS22)
        :- !e0        = !{Base.!Read %rTS22; Base.!Read %rTC2; System.Console.!Console}
        ,  !e1        = !{Base.!Read %rTS21; Base.!Write %rTS21}
        ,  !e2        = !{Base.!Read %rTS21; Base.!Read %rTS22; Base.!Read %rTC2; System.Console.!Console}
        ,  $c0        = thing : %rTC2
        ,  $c1        = ${box2 : %rTS21; box2 : %rTS22; box2 : %rTC2; newFun : %rTC2}
        ,  $c2        = ${box2 : %rTS21; box2 : %rTS22; box2 : %rTC2}
        ,  Base.Direct %rTC2
        ,  Base.Const %rTC2
        ,  Base.Mutable %rTS21
        ,  Base.Const %rTS22
        ,  Base.Const %rTS23
        ,  Base.Direct %rTS22
        ,  Base.Direct %rTS21
        ,  Base.Direct %rTS23
        :$ Base.Data;
        
foreign import project_FunBox_fun
        :: forall t0 %r0 !e0 $c0
        .  FunBox %r0 t0 !e0 $c0 -(!e1)> t0 -(!e0 $c0)> t0
        :- !e1        = Base.!Read %r0
        :$ Base.Data -> Base.Thunk;
        
foreign import project_FunBox_ref_fun
        :: forall t0 %r0 !e0 $c0
        .  FunBox %r0 t0 !e0 $c0 -(!e1)> Data.Ref.Ref %r0 (t0 -(!e0 $c0)> t0)
        :- !e1        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import oldFun
        :: forall %r0 %r1
        .  Base.Int32 %r0 -(!e0)> Base.Int32 %r1
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import newFun
        :: forall %r0
        .  Base.Int32 %r0 -(!e0 $c0)> Base.Int32 %r0
        :- !e0        = !{Base.!Read %r0; Base.!Read %rTC2; System.Console.!Console}
        ,  $c0        = thing : %rTC2
        ,  Base.Const %rTC2
        ,  Base.Direct %rTC2
        :$ Base.Data -> Base.Data;
        
foreign import main
        :: Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %r1; Base.!Write %r1}
        ,  $c0        = ${box : %r1; box : %rTS6; box : %rTC2; newFun : %rTC2}
        ,  Base.Direct %r1
        ,  Base.Mutable %r1
        ,  Base.Direct %rTS6
        ,  Base.Const %rTS6
        ,  Base.Direct %rTC2
        ,  Base.Const %rTC2
        :$ Base.Data -> Base.Data;
        
foreign import makeBox2
        :: forall %r0 %r1 %r2
        .  Base.Unit -($c0)> Base.Unit -($c1)> Base.Unit -($c3)> Data.Tuple.Tuple3 %r2 (FunBox %r0 (Base.Int32 %r1) !e0 $c2) (Base.Unit -(!e1 $c4)> Base.Unit) (Base.Unit -(!e2 $c5)> Base.Int32 %r1)
        :- !e0        = !{Base.!Read %r1; Base.!Read %rTC2; System.Console.!Console}
        ,  !e1        = !{Base.!Read %r0; Base.!Write %r0}
        ,  !e2        = !{Base.!Read %r0; Base.!Read %r1; Base.!Read %rTC2; System.Console.!Console}
        ,  $c0        = newFun : %rTC2
        ,  $c1        = newFun : %rTC2
        ,  $c2        = thing : %rTC2
        ,  $c3        = ${box2 : %r0; box2 : %r1; box2 : %rTC2; hackBox : %r0; hackBox : %r1; hackBox : %rTC2; runBox : %r0; runBox : %r1; runBox : %rTC2}
        ,  $c4        = ${box2 : %r0; box2 : %r1; box2 : %rTC2; newFun : %rTC2}
        ,  $c5        = ${box2 : %r0; box2 : %r1; box2 : %rTC2}
        ,  Base.Const %rTC2
        ,  Base.Direct %rTC2
        ,  Base.Mutable %r0
        :$ Base.Data -> Base.Data -> Base.Thunk;
        
project Main.FunBox %_ *_ !_ $_ where
{
        fun      = project_FunBox_fun;
        ref_fun  = project_FunBox_ref_fun;
}


