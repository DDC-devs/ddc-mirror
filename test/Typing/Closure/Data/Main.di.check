-- Imports

-- Pragmas

-- Infix

-- Data
data Thing %r1 !e1 $c0
        = Thing {
                Base.Unit -(!e1 $c0)> Base.Unit;
        };


-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import extern x
        :: Base.Int %rTC0
        :- Base.Mutable %rTC0
        :$ Base.Data;
        
foreign import extern thing
        :: Thing %rTS1 !e0 $c0
        :- !e0        = !{Base.!Read %rTC0; Base.!Write %rTC0}
        ,  $c0        = x : Base.Int %rTC0
        ,  Base.Mutable %rTC0
        :$ Base.Data;
        
foreign import extern f
        :: Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %rTC0; Base.!Write %rTC0}
        ,  $c0        = x : Base.Int %rTC0
        ,  Base.Mutable %rTC0
        :$ Base.Data -> Base.Data;
        
foreign import extern fun
        :: Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %rTS1; Base.!Read %rTC0; Base.!Write %rTC0}
        ,  $c0        = thing : Thing %rTS1 !{Base.!Read %rTC0; Base.!Write %rTC0} (x : Base.Int %rTC0)
        ,  Base.Mutable %rTC0
        :$ Base.Data -> Base.Data;
        
foreign import extern runThing
        :: forall %r0 !e0 $c0
        .  Thing %r0 !e0 $c0 -(!e1)> Base.Unit
        :- !e1        = !{Base.!Read %r0; !e0}
        :$ Base.Data -> Base.Data;
        
foreign import extern main
        :: Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %rTS1; Base.!Read %rTC0; Base.!Write %rTC0; System.Console.!Console}
        ,  $c0        = ${thing : Thing %rTS1 !{Base.!Read %rTC0; Base.!Write %rTC0} (x : Base.Int %rTC0); x : Base.Int %rTC0}
        ,  Base.Mutable %rTC0
        :$ Base.Data -> Base.Data;
        

