-- Imports

-- Pragmas

-- Infix

-- Data
data Thing %r1 !e1 $c0
        = Thing {
                Base.Unit -(!e1 $c0)> Base.Unit;
        };


-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import x
        :: Base.Int %r1
        :- Base.Mutable %r1
        ,  Base.Direct %r1
        :$ Base.Data;
        
foreign import thing
        :: Thing %rTS0 !e0 $c0
        :- !e0        = !{Base.!Read %r1; Base.!Write %r1}
        ,  $c0        = x : %r1
        ,  Base.Direct %r1
        ,  Base.Mutable %r1
        ,  Base.Const %rTS0
        ,  Base.Direct %rTS0
        :$ Base.Data;
        
foreign import f
        :: Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %r1; Base.!Write %r1}
        ,  $c0        = x : %r1
        ,  Base.Direct %r1
        ,  Base.Mutable %r1
        :$ Base.Data -> Base.Data;
        
foreign import fun
        :: Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %rTS0; Base.!Read %r1; Base.!Write %r1}
        ,  $c0        = ${thing : %rTS0; thing : %r1}
        ,  Base.Direct %r1
        ,  Base.Mutable %r1
        ,  Base.Direct %rTS0
        ,  Base.Const %rTS0
        :$ Base.Data -> Base.Data;
        
foreign import runThing
        :: forall %r0 !e0 $c0
        .  Thing %r0 !e0 $c0 -(!e1)> Base.Unit
        :- !e1        = !{Base.!Read %r0; !e0}
        :$ Base.Data -> Base.Data;
        
foreign import main
        :: Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %rTS0; Base.!Read %r1; Base.!Write %r1; System.Console.!Console}
        ,  $c0        = ${thing : %rTS0; thing : %r1; x : %r1}
        ,  Base.Direct %r1
        ,  Base.Mutable %r1
        ,  Base.Direct %rTS0
        ,  Base.Const %rTS0
        :$ Base.Data -> Base.Data;
        

