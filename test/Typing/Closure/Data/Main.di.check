-- Imports

-- Pragmas

-- Infix

-- Data
data Thing !e1 $c0
        = Thing {
                Base.Unit -(!e1 $c0)> Base.Unit;
        };


-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import extern x
        :: Base.Int %rTS6
        :- Base.Mutable %rTS6
        :$ Base.Data;
        
foreign import extern thing
        :: forall !e0 $c0
        .  Thing !e0 $c0
        :- !e0   = !{Base.!Read %rTS6; Base.!Write %rTS6}
        ,  $c0   = ${x :: Base.Int %rTS6}
        ,  Base.Mutable %rTS6
        :$ Base.Data;
        
foreign import extern f
        :: forall !e0 $c0
        .  Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0   = !{Base.!Write %rTS6; Base.!Read %rTS6}
        ,  $c0   = ${x :: Base.Int %rTS6}
        ,  Base.Mutable %rTS6
        :$ Base.Data -> Base.Data;
        
foreign import extern fun
        :: forall !e0 $c0
        .  Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0   = !{Base.!Write %rTS6; Base.!Read %rTS6}
        ,  $c0   = ${x :: Base.Int %rTS6}
        ,  Base.Mutable %rTS6
        :$ Base.Data -> Base.Data;
        
foreign import extern runThing
        :: forall !e0 !e1 $c0
        .  Thing !e1 $c0 -(!e0)> Base.Unit
        :- !e0   = !{!e1}
        :$ Base.Data -> Base.Data;
        
foreign import extern main
        :: forall !e0 $c0
        .  Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0   = !{System.Console.!Console; Base.!Read %rTS6; Base.!Write %rTS6}
        ,  $c0   = ${x :: Base.Int %rTS6}
        ,  Base.Mutable %rTS6
        :$ Base.Data -> Base.Data;
        

