-- Imports

-- Pragmas

-- Infix

-- Data
data FunInt %r0 %r1 !e1 $c1
        = FunInt {
                Base.Int %r1 -(!e1 $c1)> Base.Int %r1;
        };


-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import extern funSucc
        :: FunInt %rTS0 %rTS5 !e0 $Bot
        :- !e0        = Base.!Read %rTS5
        :$ Base.Data;
        
foreign import extern succ
        :: forall %r0 %r1
        .  Base.Int %r0 -(!e0)> Base.Int %r1
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import extern runFun
        :: forall %r0 %r1 !e0 $c0
        .  FunInt %r0 %r1 !e0 $c0 -> Base.Int %r1 -(!e1 $c1)> Base.Int %r1
        :- !e1        = !{!e0; Base.!Read %r0}
        ,  $c1        = ${xSD491 : %r0; xSD491 : %r1; xSD491 : %r0 $> !e0; xSD491 : %r0 $> $c0}
        :$ Base.Data -> Base.Data -> Base.Data;
        
foreign import extern succ'
        :: Base.Int %rTS5 -(!e0 $c0)> Base.Int %rTS5
        :- !e0        = !{Base.!Read %rTS5; Base.!Read %rTS0}
        ,  $c0        = ${funSucc : %rTS0; funSucc : %rTS5}
        :$ Base.Data -> Base.Data;
        
foreign import extern main
        :: Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %rTS5; Base.!Read %rTS0; System.Console.!Console}
        ,  $c0        = ${succ' : %rTS0; succ' : %rTS5}
        :$ Base.Data -> Base.Data;
        

