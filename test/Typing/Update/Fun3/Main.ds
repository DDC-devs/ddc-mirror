
-- Effect and closure variables under mutable regions should be held monomorpic.
--
--	The effect and closure of data which contains functions should be
--	the sum of all the functions which it is updated with.
--
--	This time, textBox2 creates a tuple of functions to update and run the box.

-- BUGS:
--	Fails on textBox2. Box does not contain a value of type 'a' need to fix static region determinator
--	to check data alternatives.

data FunBox %r1 a !e1 $c1
	= FunBox { 
		fun :: a -(!e1 $c1)> a;
	};

-- oldFun is just the successor function
oldFun x  = x + 1;


-- newFun also adds 1 to its argument, but it also
--	has a Console effect, as well has having 'thing' in its closure.
thing		= 5;
newFun x	
 = do { 
 	print (showInt (x + thing)); 
	x; 
 };


-- | Create a tuple of functions to update and run the box.
--	
testBox2 ()
 = do {
	box2	:: FunBox %r1 Int !e1 $c1
		:- Mutable %r1;
		
	-- create the box
 	box2	= FunBox oldFun;
	
	-- functions to update the box, as well as run the function.
	hackBox	()	= box2#fun #= newFun;
	runBox ()	= box2.fun 5;

	(box2, hackBox, runBox);
 };	

-- | Call the tests
main () 
 = do {	
	dude3	= testBox2 ();
	();
 };

