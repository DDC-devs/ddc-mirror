-- Imports

-- Pragmas

-- Infix

-- Data
data FunBox %r1 a !e1 $c1
        = FunBox {
                fun :: a -(!e1 $c1)> a ;
        };


-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import extern thing
        :: Base.Int %rTC4
        :$ Base.Data;
        
foreign import extern project_FunBox_fun
        :: forall t0 %r0 !e0 $c0
        .  FunBox %r0 t0 !e0 $c0 -(!e1)> t0 -(!e0 $c0)> t0
        :- !e1        = Base.!Read %r0
        :$ Base.Data -> Base.Thunk;
        
foreign import extern project_FunBox_ref_fun
        :: forall t0 %r0 !e0 $c0
        .  FunBox %r0 t0 !e0 $c0 -(!e1)> Data.Ref.Ref %r0 (t0 -(!e0 $c0)> t0)
        :- !e1        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import extern oldFun
        :: forall %r0 %r1
        .  Base.Int %r0 -(!e0)> Base.Int %r1
        :- !e0        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import extern newFun
        :: forall %r0
        .  Base.Int %r0 -(!e0 $c0)> Base.Int %r0
        :- !e0        = !{Base.!Read %r0; Base.!Read %rTC4; System.Console.!Console}
        ,  $c0        = thing : %rTC4
        :$ Base.Data -> Base.Data;
        
foreign import extern testBox
        :: forall %r0 %r1
        .  Base.Unit -(!e0 $c0)> FunBox %r0 (Base.Int %r1) !e1 $c1
        :- !e0        = !{Base.!Read %r0; Base.!Write %r0}
        ,  !e1        = !{Base.!Read %r1; Base.!Read %rTC4; System.Console.!Console}
        ,  $c0        = newFun : %rTC4
        ,  $c1        = thing : %rTC4
        ,  Base.Mutable %r0
        :$ Base.Data -> Base.Data;
        
foreign import extern main
        :: Base.Unit -($c0)> Base.Unit
        :- $c0        = testBox : %rTC4
        :$ Base.Data -> Base.Data;
        
project Main.FunBox %_ *_ !_ $_ where
{
        fun      = project_FunBox_fun;
        ref_fun  = project_FunBox_ref_fun;
}


