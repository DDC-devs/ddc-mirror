-- Imports

-- Pragmas

-- Infix

-- Data
data Box %r1 a b !e1 $c1
        = Box {
                x :: a -(!e1 $c1)> b ;
        };


-- Effects

-- Regions

-- Classes

-- Class dictionaries

-- Class instances

-- Foreign imports

-- Binds
foreign import box
        :: Box %r1 Base.Unit (Base.Int32 %rTS4) !e0 $_
        :- !e0        = System.Console.!Console
        ,  Base.Mutable %r1
        ,  Base.Const %rTS4
        ,  Base.Direct %rTS4
        ,  Base.Direct %r1
        :$ Base.Data;
        
foreign import project_Box_x
        :: forall t0 t1 %r0 !e0 $c0
        .  Box %r0 t0 t1 !e0 $c0 -(!e1)> t0 -(!e0 $c0)> t1
        :- !e1        = Base.!Read %r0
        :$ Base.Data -> Base.Thunk;
        
foreign import project_Box_ref_x
        :: forall t0 t1 %r0 !e0 $c0
        .  Box %r0 t0 t1 !e0 $c0 -(!e1)> Data.Ref.Ref %r0 (t0 -(!e0 $c0)> t1)
        :- !e1        = Base.!Read %r0
        :$ Base.Data -> Base.Data;
        
foreign import fun2
        :: forall %r0
        .  Base.Unit -(!e0)> Base.Int32 %r0
        :- !e0        = System.Console.!Console
        :$ Base.Data -> Base.Data;
        
foreign import main
        :: Base.Unit -(!e0 $c0)> Base.Unit
        :- !e0        = !{Base.!Read %r1; Base.!Write %r1; System.Console.!Console}
        ,  $c0        = ${box : %r1; box : %rTS4}
        ,  Base.Direct %r1
        ,  Base.Mutable %r1
        ,  Base.Const %rTS4
        ,  Base.Direct %rTS4
        :$ Base.Data -> Base.Data;
        
project Main.Box %_ *_ *_ !_ $_ where
{
        x        = project_Box_x;
        ref_x    = project_Box_ref_x;
}


