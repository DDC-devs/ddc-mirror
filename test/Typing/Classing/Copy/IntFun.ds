

data IntFun %r1 %r2 %r3 %r4 !e1 $c1
	= FInt (Int %r2)
	| FFun (Int %r3 -(!e1 $c1)> Int %r4)


copyIntFun xx
 = case xx of 
	FInt i	-> FInt (i + 0)

wibble = 5

copyIntFun2 xx
 = case xx of 
	FInt i	-> FInt (i + 0)
	FFun f	-> FFun f
	

class Copy2 a where
  copy2 :: forall b. a -(!e1)> b
	:- !e1 = !ReadT a
	,  Shape2 a b

instance Copy2 IntFun where
  copy2	= copyIntFun2

instance Copy2 Int where
  copy2 x = x

f2	= FFun ((+) 1)
top_f2 = copy2 f2


main ()
 = do	if1	= FInt 4
	if1'	= copy2 if1

	if2	= FFun ((+) 1)
	if2'	= copy2 if2

	i :: Int %r1 :- Const %r1
	i	= 5

	i'	= copy2 i
	i' := 27

	()
