{-# OPTIONS -no-implicit-prelude #-}

module Data.Array

export	index
	indexR
	array_map_
	array_foldl
	
import	Base
import	Data.Numeric.Int32
import	Data.Ref
import	Data.List

-- An array of boxed balues
data Array %r1 a;


-- Create a new array and point all the cells to this initial object.
foreign import "primArray_new"
 array_new  	:: forall a %r1 %r2
	 	.  Int %r1 -> a -(!e1 $c1)> Array %r2 a
		:- !e1 = !Read %r1
		,  $c1 = ${size : Int %r1}
		,  Mutable %r2

-- Return the number of elements in an array
foreign import "primArray_size"
 array_size	:: forall a %r1 %r2
		.  Array %r1 a -(!e1)> Int %r2
		:- !e1 = !Read %r1
 
-- Return the element at this index
--	the array.(i) syntax is desugared into this.
foreign import "primArray_index"
 index		:: forall a %r1 %r2 
	 	.  Array %r1 a -> Int %r2 -(!e1)> a
		:- !e1 = !Read %r1 + !Read %r2
 	
-- Return a reference to this index. 
--	If this reference is updated then that cell in the array is pointed to the new object.
--	the array#(i) syntax is desuated into this
foreign import "primArray_indexR"
 indexR		:: forall a %r1 %r2 
	 	.  Array %r1 a -> Int %r2 -(!e1 $c1)> Ref %r1 a
		:- !e1 = !Read %r1 + !Read %r2
		,  $c1 = ${a : Array %r1 a}


project Array a where
	new		= array_new
	size		= array_size

	map_      arr f	= array_map_ f arr
	mapIx_    arr f	= mapIx_     f arr
	mapToList arr f = mapToList  f arr

	updateWith arr f = updateWith f arr


instance Functor Array where
	map_		= array_map_


instance Foldable Array where
	foldl		= array_foldl




-- Apply a function to all the elements of an array, ignoring the result
array_map_ :: (a -> b) -> Array a -> ()
array_map_ f array
	= array_map2_ f array 0 (array .size)

array_map2_ f array ix max
	| ix >= max	= ()

	\= do	f array.(ix)
		array_map2_ f array (ix + 1) max

		
-- Map a  function across all the elements of an array
--	with the array index, ignoring the result
mapIx_ :: (Int -> a -> b) -> Array a -> ()
mapIx_ f array
	= mapIx2_ f array 0 (array .size)
	
mapIx2_ f array ix max
	| ix >= max	= ()
	
	\= do	f ix array.(ix)
		mapIx2_ f array (ix + 1) max


-- Map a function across all the elements of an array, 
--	returning a list
mapToList :: (a -> b) -> Array a -> [b]
mapToList  f array 
	= mapToList' f array 0 (array .size)

mapToList' f array i max
	| i >= max	
	=  []
	
	\= f (array .(i)) : mapToList' f array (i + 1) max
	

-- pre-order fold
array_foldl :: (a -> b -> a) -> a -> Array b -> a
array_foldl f acc array 
 	= array_foldl' f acc array 0 (array .size)
	
array_foldl' f acc array ix max
	| ix >= max
	= acc
	
	\= array_foldl' f (f acc array.(ix)) array (ix + 1) max


-- update all the elements of an array with this function
--	the array cells are pointed to the new objects
updateWith :: (a -> a) -> Array a -> ()
updateWith fun array
 = do	max	= array_size array
 	updateWith' fun array 0 max
	
updateWith' fun array ix max
	| ix >= max	= ()
	\= do	x'	= fun array.(ix)
		array #(ix) #= x'

		updateWith' fun array (ix + 1) max

