
module Object
export
{       object_cast; object_check;
        object_distance;  object_normal;
        object_color; object_shine
}
import Math.Vec3
import Data.Maybe; Data.Numeric
where


-- | A ray in the 3d world.
data Ray
 =      [ origin:      Vec3
        , direction:   Vec3 ]


-- | An object in the world.
data Object
        = Sphere [ center: Vec3, radius: Float
                 , color:  Vec3, shine:  Float ]

        | Plane  [ point:  Vec3, normal: Vec3
                 , color:  Vec3, shine:  Float ]

        | Checks [ point:  Vec3, normal: Vec3
                 , shine:  Float ]


-- | Cast a ray into a list of objects and find the nearest intersection point.
object_cast (ray: Ray) (os0: List Object): Maybe (Object, Vec3)
 = go0 os0
 where
        -- We haven't hit any objects yet.
        go0 Nil = Nothing

        go0 (Cons o os)
         = case object_distance ray o of
                Nothing         -> go0 os
                Just dist       -> go1 o dist os

        -- We already hit an object and we're testing others to see
        -- if they're closer.
        go1 oClose oDist Nil
         = Just (oClose, ray.origin + vec3_muls ray.direction oDist)

        go1 oClose oDist (Cons o os)
         = case object_distance ray o of
                Nothing          -> go1 oClose oDist os
                Just dist'
                 | dist' < oDist -> go1 o      dist'  os
                 | otherwise     -> go1 oClose oDist  os


-- Simpler version of object_cast that only checks whether there is some
-- object closer than a given minimum distance.
object_check (ray: Ray) (os0: List Object) (dist: Float): Bool
 = go0 os0
 where
        go0 Nil = False

        go0 (Cons o os)
         = case object_distance ray o of
                Nothing         -> go0 os
                Just dist'
                 | dist' < dist -> True
                 | otherwise    -> go0 os


-- | Cast a ray from an origin point along a direction,
--   and if it hits the given shape then return the distance.
object_distance (ray: Ray) (object: Object): Maybe Float
 | Sphere sphere <- object
 = do   p       = ray.origin
                + vec3_muls ray.direction
                        (vec3_dot (sphere.center - ray.origin) ray.direction)

        d_cp    = vec3_magnitude (p - sphere.center)

        d       = vec3_magnitude (p - ray.origin)
                - float64_sqrt (sphere.radius * sphere.radius - d_cp * d_cp)
        match
         | d_cp >= sphere.radius        = Nothing
         | vec3_dot (p - ray.origin) ray.direction <= 0.0     = Nothing
         | otherwise                    = Just d

 | Plane plane <- object
 = if vec3_dot ray.direction plane.normal >= 0.0
        then Nothing
        else Just (div (vec3_dot (plane.point - ray.origin) plane.normal)
                       (vec3_dot ray.direction plane.normal))

 | Checks checks <- object
 = if vec3_dot ray.direction checks.normal >= 0.0
        then Nothing
        else Just (div (vec3_dot (checks.point - ray.origin) checks.normal)
                       (vec3_dot ray.direction checks.normal))


-- | Compute the surface normal of the shape at the given point.
object_normal (point: Vec3) (object: Object): Vec3
 = case object of
        Sphere sphere   -> vec3_normalize (point - sphere.center)
        Plane  plane    -> plane.normal
        Checks checks   -> checks.normal


-- | Get the diffuse color of an object at the given point.
object_color (object: Object) (point: Vec3): Vec3
 = case object of
        Sphere sphere   -> sphere.color
        Plane  plane    -> plane.color
        Checks _        -> checkers point


-- | Get the shine of an object at the given point.
object_shine (object: Object) (point: Vec3): Float
 = case object of
        Sphere sphere   -> sphere.shine
        Plane  plane    -> plane.shine
        Checks checks   -> checks.shine


checkers ((Vec3 x y z ): Vec3): Vec3
 |   xor (rem (float64_trunc (div (float64_fabs x) 20.0)) 2.0 >= 1.0)
   $ xor (rem (float64_trunc (div (float64_fabs y) 20.0)) 2.0 >= 1.0)
   $ xor (x < 0.0f64) (y < 0.0f64)
 = Vec3 1.0 1.0 1.0

 | otherwise
 = Vec3 0.4 0.4 0.4

