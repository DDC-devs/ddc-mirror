
module Light
export light_translate; light_applys; light_apply
import Object
import Math.Vec3
import Data.Maybe; Data.Numeric
where


data Light
 =      [ point : Vec3
        , color : Vec3 ]


-- | Translate a light by the given offset.
light_translate (v: Vec3) (light: Light): Light
 =      [ point = light.point + v
        , color = light.color]


-- | Compute the direct lighting at a particular point for a list of lights.
light_applys
        (point normal: Vec3)
        (ls: List Light) (os: List Object): Vec3
 = go ls (Vec3 0.0 0.0 0.0)
 where
        go Nil total
         = total

        go (Cons l ls') total
         = do   contrib = light_apply point normal l os
                go ls' (total + contrib)


-- | Compute the direct lighting at a particular point for a single light.
light_apply
        (point normal: Vec3)
        (light: Light) (os: List Object): Vec3
 = do
        -- Vector from the light to the surface point.
        dir     = vec3_normalize (light.point - point)

        -- Distance from the light source to the surface point.
        dist    = vec3_magnitude (light.point - point)

        if object_check [origin = point, direction = normal] os dist
         then Vec3 0.0 0.0 0.0
         else do
                -- Magnitude of reflection.
                mag     = div (vec3_dot normal dir) (dist * dist)

                -- The light that is reflected.
                if mag > 0.0
                 then   vec3_muls light.color mag
                 else   Vec3 0.0 0.0 0.0
