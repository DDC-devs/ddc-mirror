
module Lambda.Exp.Base
export
{       show_Exp;
        show_Subst;
}
import Class.Show
import Data.Text
import Data.Tuple
where


-- | Represent names as text.
type Name = Text


-- | Untyped lambda calculus expressions.
data Exp
        = XVar Name
        | XAbs Subst Name Exp
        | XApp Exp Exp


data Subst
        = Subst (List (Name, Exp))


show_Exp: Show Exp
 =  Show $ λxx
 -> case xx of
        XVar n
         -> parens $ "XVar" %% show n

        XAbs ss n x
         -> parens $ "XAbs" %% show ss %% show n %% show x

        XApp x1 x2
         -> parens $ "XApp" %% show x1 %% show x2


show_Subst: Show Subst
 =  Show $ λxx
 -> case xx of
        Subst ls
         -> parens $ "Subst" %% show ls

