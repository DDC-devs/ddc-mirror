
module Lambda.Source.Parser
export
{       parseExp;
        pExp;
        pExpApp;
        pExpAtom;
}
import Lambda.Exp
import Lambda.Source.Token
import Lambda.Source.Lexer
import Control.Parsec
import Data.Maybe
where


-- | Parse an expression from the given list of tokens.
parseExp (ts: List Token): Maybe Exp
 = case parse pExp ts of
        ParseSkip _             -> Nothing
        ParseReturn _ x         -> Just x
        ParseFailure _          -> Nothing
        ParseSuccess x _        -> Just x


-- | Parse an expression.
pExp : Parser Token Unit Exp
 = alt (do
        kLam    <- satisfies () (eqToken KLambda)
        n       <- from () takeKName
        kDot    <- satisfies () (eqToken KDot)
        xBody   <- pExp
        return  $  XAbs emptySubst n xBody)

 $      pExpApp


-- | Parse an application.
pExpApp  : Parser Token Unit Exp
 = do   xFun    <- pExpAtom
        xsArgs  <- some pExpAtom
        return  $ makeXApps xFun xsArgs


-- | Parse an atomic expression.
pExpAtom : Parser Token Unit Exp
 = alt (do
        xBra    <- satisfies () (eqToken KBra)
        xx      <- pExp
        xKet    <- satisfies () (eqToken KKet)
        return  xx)

 $     (do
        n       <- from () takeKName
        return  $ XVar n)

