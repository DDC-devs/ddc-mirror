
module Lambda.Exp
export
{       makeXApps;
        emptySubst;
        applySubst;
}
import Lambda.Exp.Base
import Class.Show
import Data.List
import Data.Text
where


-- | Make an application of a function to the given list of arguments.
makeXApps (xFun: Exp) (xsArgs: List Exp): Exp
 = build (reverse xsArgs)
 where
        build xs
         = case xs of
                Nil             -> xFun
                Cons x1 xsArgs' -> XApp (build xsArgs') x1


-- | The empty substitution.
emptySubst: Subst
 = Subst Nil


-- | Apply a substitution to the given expression.
applySubst (ss@(Subst ps): Subst) (xx: Exp): Exp
 = case xx of
        XVar nBind
         -> case lookup nBind ps of
                Nothing -> xx
                Just x' -> x'

        XAbs (Subst ps') nBind xBody
         -> let ss'     = Subst $ append (mapSnd (applySubst ss) ps') ps
            in  XAbs ss' nBind xBody

        XApp xFun xArg
         -> XApp (applySubst ss xFun) (applySubst ss xArg)


-- | Apply a function to the second components of a list of tuples.
mapSnd (f: a -> b) (xx: List (c, a)): List (c, b)
 = case xx of
        Nil              -> Nil
        Cons (T2 x y) xs -> Cons (T2 x (f y)) (mapSnd f xs)

