
-- List length using infix addition.
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

add (x y : a) : a 
        = add# x y

length (xx : List a) : Nat#
 = case xx of
        Nil       -> 0
        Cons x xs -> 1 + length xs
;;


-- More list functions.
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

singleton (x : a) : List a
 = Cons x Nil

append  (xx : List a) (yy : List a) : List a
 = case xx of
        Nil       -> yy
        Cons x xs -> Cons x (append xs yy)

reverse (xx : List a) : List a
 = case xx of
        Nil       -> Nil
        Cons x xs -> append (reverse xs) (singleton x)

map     (f : a -> b) (xx : List a) : List b
 = case xx of
        Nil       -> Nil
        Cons x xs -> Cons (f x) (map f xs)
;;


-- Effectful List map with explicit effect management.
--  The result computation is boxed just inside the outer lambda.
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

mapS    [a b : Data] [e : Effect]
        (f : a -> S e b) (xx : List a) : S e (List b)
 = box case xx of
        Nil       -> Nil
        Cons x xs -> Cons (run f x) (run mapS f xs)
;;


-- Polymorphically take the head of a polymorphic list where
-- the element type has a primary region variable.
:to-core..
module Test where
data List (a : Data) where
        Cons    : a -> List a -> List a
        Nil     : List a

data Blerk (r : Region) where
        Hot     : Blerk r
        Cold    : Blerk r

head (def : a) (xx : List a) : a
 = case xx of
        Cons x _        -> x
        _               -> def

foo (_ : Unit) : Blerk r
 = head Hot (Cons Cold Nil)
;;


-- Check we can use local lambda expressions without type annotations
-- on the parameters.
:to-core..
module Test where
test : Unit
 = (\x y -> x) () ()
;;

