ok
ok


-- Single generate output
module Test with
letrec {
  gen: [p: Proc].[k: Rate].Vector# Nat# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(v: Vector# Nat#).
      let v$buf  
            = vbuf# [Nat#] v in
      let x3     
            = loop# [k]
                  (λ(x1: Nat#).
                   let s$elem 
                         = mul# [Nat#] 2# x1 in
                   let x2     
                         = vwrite# [Nat#] v$buf x1 s$elem in
                   ()) in
      ()
}

-- Generate, then map
module Test with
letrec {
  gen: [p: Proc].[k: Rate].Vector# Nat# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(v: Vector# Nat#).
      let v$buf  
            = vbuf# [Nat#] v in
      let x4     
            = loop# [k]
                  (λ(x1: Nat#).
                   let s$elem 
                         = mul# [Nat#] 2# x1 in
                   let t$elem 
                         = add# [Nat#] 1# s$elem in
                   let x3     
                         = vwrite# [Nat#] v$buf x1 t$elem in
                   ()) in
      ()
}

-- Generate in the presence of other Series
module Test with
letrec {
  gen: [p: Proc].[k: Rate].Series# p k Nat# -> Vector# Nat# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(s1: Series# p k Nat#).λ(v: Vector# Nat#).
      let v$buf  
            = vbuf# [Nat#] v in
      let x5     
            = loop# [k]
                  (λ(x1: Nat#).
                   let s1$elem
                         = next# [Nat#] [p] [k] s1 x1 in
                   let s2$elem
                         = mul# [Nat#] 2# x1 in
                   let t$elem 
                         = add# [Nat#] s1$elem s2$elem in
                   let x4     
                         = vwrite# [Nat#] v$buf x1 t$elem in
                   ()) in
      ()
}


