ok
ok
ok


-- Multiply a parameter series by one created with replication.
module Test with
letrec {
  repsme: [p: Proc].[k1: Rate].Series# p k1 Float32# -> Vector# Float32# -> Unit
    = Λ(p: Proc).Λ(k1: Rate).
      λ(s: Series# p k1 Float32#).λ(v: Vector# Float32#).
      let v$buf  
            = vbuf# [Float32#] v in
      let x4     
            = loop# [k1]
                  (λ(x2: Nat#).
                   let s$elem 
                         = next# [Float32#] [p] [k1] s x2 in
                   let x4$elem
                         = mul# [Float32#] 23.0f32# s$elem in
                   let x3     
                         = vwrite# [Float32#] v$buf x2 x4$elem in
                   ()) in
      ()
}


-- Fill a vector with segmentedly replicated elements.
module Test with
letrec {
  repsme: [p: Proc].[k1: Rate].Series# p k1 Nat# -> Series# p k1 Float32# -> Vector# Float32# -> Unit
    = Λ(p: Proc).Λ(k1: Rate).
      λ(lens: Series# p k1 Nat#).λ(s1: Series# p k1 Float32#).λ(v: Vector# Float32#).
      let v$buf  
            = vbuf# [Float32#] v in
      let v$count
            = new# [Nat#] 0# in
      let x6     
            = loop# [k1]
                  (λ(x1: Nat#).
                   let lens$elem
                         = next# [Nat#] [p] [k1] lens x1 in
                   let s1$elem
                         = next# [Float32#] [p] [k1] s1 x1 in
                   let x5     
                         = segment# lens$elem
                               (λ(x2: Nat#).
                                let s3$elem
                                      = mul# [Float32#] 2.0f32# s1$elem in
                                let x9      = read# [Nat#] v$count in
                                let x3     
                                      = vwrite# [Float32#] v$buf x9 s3$elem in
                                let x10     = read# [Nat#] v$count in
                                let x11     = add# [Nat#] x10 1# in
                                let x4     
                                      = write# [Nat#] v$count x11 in
                                ()) in
                   ()) in
      let x7     
            = read# [Nat#] v$count in
      let x8     
            = vtrunc# [Float32#] x7 v in
      ()
}


-- Multiply two series created by reps.
-- In the lowered code the multiply ends up in the segment context.
module Test with
letrec {
  repsme: [p: Proc].[k1: Rate].Series# p k1 Nat# -> Series# p k1 Float32# -> Series# p k1 Float32# -> Vector# Float32# -> Unit
    = Λ(p: Proc).Λ(k1: Rate).
      λ(lens: Series# p k1 Nat#).λ(s1 s2: Series# p k1 Float32#).λ(v: Vector# Float32#).
      let v$buf  
            = vbuf# [Float32#] v in
      let v$count
            = new# [Nat#] 0# in
      let x7     
            = loop# [k1]
                  (λ(x2: Nat#).
                   let lens$elem
                         = next# [Nat#] [p] [k1] lens x2 in
                   let s1$elem
                         = next# [Float32#] [p] [k1] s1 x2 in
                   let s2$elem
                         = next# [Float32#] [p] [k1] s2 x2 in
                   let x6     
                         = segment# lens$elem
                               (λ(x3: Nat#).
                                let s3$elem
                                      = mul# [Float32#] s1$elem s2$elem in
                                let x10     = read# [Nat#] v$count in
                                let x4     
                                      = vwrite# [Float32#] v$buf x10 s3$elem in
                                let x11     = read# [Nat#] v$count in
                                let x12     = add# [Nat#] x11 1# in
                                let x5     
                                      = write# [Nat#] v$count x12 in
                                ()) in
                   ()) in
      let x8     
            = read# [Nat#] v$count in
      let x9     
            = vtrunc# [Float32#] x8 v in
      ()
}


-- As above, but do the multiplication before replication.
module Test with
letrec {
  repsme: [p: Proc].[k1: Rate].Series# p k1 Nat# -> Series# p k1 Float32# -> Series# p k1 Float32# -> Vector# Float32# -> Unit
    = Λ(p: Proc).Λ(k1: Rate).
      λ(lens: Series# p k1 Nat#).λ(s1 s2: Series# p k1 Float32#).λ(v: Vector# Float32#).
      let v$buf  
            = vbuf# [Float32#] v in
      let v$count
            = new# [Nat#] 0# in
      let x7     
            = loop# [k1]
                  (λ(x2: Nat#).
                   let lens$elem
                         = next# [Nat#] [p] [k1] lens x2 in
                   let s1$elem
                         = next# [Float32#] [p] [k1] s1 x2 in
                   let s2$elem
                         = next# [Float32#] [p] [k1] s2 x2 in
                   let s3$elem
                         = mul# [Float32#] s1$elem s2$elem in
                   let x6     
                         = segment# lens$elem
                               (λ(x3: Nat#).
                                let x10     = read# [Nat#] v$count in
                                let x4     
                                      = vwrite# [Float32#] v$buf x10 s3$elem in
                                let x11     = read# [Nat#] v$count in
                                let x12     = add# [Nat#] x11 1# in
                                let x5     
                                      = write# [Nat#] v$count x12 in
                                ()) in
                   ()) in
      let x8     
            = read# [Nat#] v$count in
      let x9     
            = vtrunc# [Float32#] x8 v in
      ()
}
