-- Lowering to produce complete vector programs. 
ok
ok


module Test with
letrec {
  test: [p: Proc].[k: Rate].RateNat# k -> Ref# Float32# -> Series# p k Float32# -> Series# p k Float32# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(n: RateNat# k).λ(x1: Ref# Float32#).λ(s1 s2: Series# p k Float32#).
      let x16    
            = split$8# [k] n
                  (λ(x3: RateNat# (Down8# k)).
                   let s1$down
                         = down$8# [p] [k] [Float32#] x3 s1 in
                   let s2$down
                         = down$8# [p] [k] [Float32#] x3 s2 in
                   let x17     = vrep$8# [Float32#] 0.0f32# in
                   let x1$vec 
                         = new# [Vec8# Float32#] x17 in
                   let x9     
                         = loop# [Down8# k]
                               (λ(x6: Nat#).
                                let s1$elem
                                      = next$8# [Float32#] [p] [k] s1$down x6 in
                                let s2$elem
                                      = next$8# [Float32#] [p] [k] s2$down x6 in
                                let s3$elem
                                      = vmul$8# [Float32#] s1$elem s2$elem in
                                let x1$val 
                                      = read# [Vec8# Float32#] x1$vec in
                                let x18     = vadd$8# [Float32#] x1$val s3$elem in
                                let x8     
                                      = write# [Vec8# Float32#] x1$vec x18 in
                                ()) in
                   let x1$res 
                         = read# [Vec8# Float32#] x1$vec in
                   let x1$init
                         = read# [Float32#] x1 in
                   let x20     = vproj$8$0# [Float32#] x1$res in
                   let x1$res$0
                         = add# [Float32#] x1$init x20 in
                   let x22     = vproj$8$1# [Float32#] x1$res in
                   let x1$res$1
                         = add# [Float32#] x1$res$0 x22 in
                   let x24     = vproj$8$2# [Float32#] x1$res in
                   let x1$res$2
                         = add# [Float32#] x1$res$1 x24 in
                   let x26     = vproj$8$3# [Float32#] x1$res in
                   let x1$res$3
                         = add# [Float32#] x1$res$2 x26 in
                   let x28     = vproj$8$4# [Float32#] x1$res in
                   let x1$res$4
                         = add# [Float32#] x1$res$3 x28 in
                   let x30     = vproj$8$5# [Float32#] x1$res in
                   let x1$res$5
                         = add# [Float32#] x1$res$4 x30 in
                   let x32     = vproj$8$6# [Float32#] x1$res in
                   let x1$res$6
                         = add# [Float32#] x1$res$5 x32 in
                   let x34     = vproj$8$7# [Float32#] x1$res in
                   let x1$res$7
                         = add# [Float32#] x1$res$6 x34 in
                   let x10    
                         = write# [Float32#] x1 x1$res$7 in
                   ())
                  (λ(x11: RateNat# (Tail8# k)).
                   let s1$tail
                         = tail$8# [p] [k] [Float32#] x11 s1 in
                   let s2$tail
                         = tail$8# [p] [k] [Float32#] x11 s2 in
                   let x1$init
                         = read# [Float32#] x1 in
                   let x1$acc 
                         = new# [Float32#] x1$init in
                   let x14    
                         = loop# [Tail8# k]
                               (λ(x12: Nat#).
                                let s1$elem
                                      = next# [Float32#] [p] [Tail8# k] s1$tail x12 in
                                let s2$elem
                                      = next# [Float32#] [p] [Tail8# k] s2$tail x12 in
                                let s3$elem
                                      = mul# [Float32#] s1$elem s2$elem in
                                let x1$val 
                                      = read# [Float32#] x1$acc in
                                let x35     = add# [Float32#] x1$val s3$elem in
                                let x13    
                                      = write# [Float32#] x1$acc x35 in
                                ()) in
                   let x1$res 
                         = read# [Float32#] x1$acc in
                   let x15    
                         = write# [Float32#] x1 x1$res in
                   ()) in
      ()
}


module Flow with
letrec {
  eatPoints: [p: Proc].[k: Rate].Float32# -> Float32# -> Vector# Float32# -> Ref# Float32# -> RateNat# k -> Series# p k Float32# -> Series# p k Float32# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(ox oy: Float32#).λ(v0: Vector# Float32#).λ(r0: Ref# Float32#).λ(dsr: RateNat# k).λ(s1 s2: Series# p k Float32#).
      let x15    
            = split$8# [k] dsr
                  (λ(x0: RateNat# (Down8# k)).
                   let s1$down
                         = down$8# [p] [k] [Float32#] x0 s1 in
                   let s2$down
                         = down$8# [p] [k] [Float32#] x0 s2 in
                   let v0$buf 
                         = vbuf# [Float32#] v0 in
                   let x16     = vrep$8# [Float32#] 0.0f32# in
                   let r0$vec 
                         = new# [Vec8# Float32#] x16 in
                   let x4     
                         = loop# [Down8# k]
                               (λ(x1: Nat#).
                                let s1$elem
                                      = next$8# [Float32#] [p] [k] s1$down x1 in
                                let s2$elem
                                      = next$8# [Float32#] [p] [k] s2$down x1 in
                                let x17     = vrep$8# [Float32#] ox in
                                let x18     = vsub$8# [Float32#] s1$elem x17 in
                                let x19     = vrep$8# [Float32#] ox in
                                let x20     = vsub$8# [Float32#] s1$elem x19 in
                                let x21     = vmul$8# [Float32#] x18 x20 in
                                let x22     = vrep$8# [Float32#] oy in
                                let x23     = vsub$8# [Float32#] s2$elem x22 in
                                let x24     = vrep$8# [Float32#] oy in
                                let x25     = vsub$8# [Float32#] s2$elem x24 in
                                let x26     = vmul$8# [Float32#] x23 x25 in
                                let s$elem 
                                      = vadd$8# [Float32#] x21 x26 in
                                let x2     
                                      = vwrite$8# [Float32#] v0$buf x1 s$elem in
                                let r0$val 
                                      = read# [Vec8# Float32#] r0$vec in
                                let x27     = vadd$8# [Float32#] r0$val s$elem in
                                let x3     
                                      = write# [Vec8# Float32#] r0$vec x27 in
                                ()) in
                   let r0$res 
                         = read# [Vec8# Float32#] r0$vec in
                   let r0$init
                         = read# [Float32#] r0 in
                   let x29     = vproj$8$0# [Float32#] r0$res in
                   let r0$res$0
                         = add# [Float32#] r0$init x29 in
                   let x31     = vproj$8$1# [Float32#] r0$res in
                   let r0$res$1
                         = add# [Float32#] r0$res$0 x31 in
                   let x33     = vproj$8$2# [Float32#] r0$res in
                   let r0$res$2
                         = add# [Float32#] r0$res$1 x33 in
                   let x35     = vproj$8$3# [Float32#] r0$res in
                   let r0$res$3
                         = add# [Float32#] r0$res$2 x35 in
                   let x37     = vproj$8$4# [Float32#] r0$res in
                   let r0$res$4
                         = add# [Float32#] r0$res$3 x37 in
                   let x39     = vproj$8$5# [Float32#] r0$res in
                   let r0$res$5
                         = add# [Float32#] r0$res$4 x39 in
                   let x41     = vproj$8$6# [Float32#] r0$res in
                   let r0$res$6
                         = add# [Float32#] r0$res$5 x41 in
                   let x43     = vproj$8$7# [Float32#] r0$res in
                   let r0$res$7
                         = add# [Float32#] r0$res$6 x43 in
                   let x5     
                         = write# [Float32#] r0 r0$res$7 in
                   ())
                  (λ(x6: RateNat# (Tail8# k)).
                   let s1$tail
                         = tail$8# [p] [k] [Float32#] x6 s1 in
                   let s2$tail
                         = tail$8# [p] [k] [Float32#] x6 s2 in
                   let v0$tail
                         = vtail8# [k] [Float32#] x6 v0 in
                   let v0$buf 
                         = vbuf# [Float32#] v0$tail in
                   let r0$init
                         = read# [Float32#] r0 in
                   let r0$acc 
                         = new# [Float32#] r0$init in
                   let x13    
                         = loop# [Tail8# k]
                               (λ(x7: Nat#).
                                let s1$elem
                                      = next# [Float32#] [p] [Tail8# k] s1$tail x7 in
                                let s2$elem
                                      = next# [Float32#] [p] [Tail8# k] s2$tail x7 in
                                let x44     = sub# [Float32#] s1$elem ox in
                                let x45     = sub# [Float32#] s1$elem ox in
                                let x46     = mul# [Float32#] x44 x45 in
                                let x47     = sub# [Float32#] s2$elem oy in
                                let x48     = sub# [Float32#] s2$elem oy in
                                let x49     = mul# [Float32#] x47 x48 in
                                let s$elem 
                                      = add# [Float32#] x46 x49 in
                                let x8     
                                      = vwrite# [Float32#] v0$buf x7 s$elem in
                                let r0$val 
                                      = read# [Float32#] r0$acc in
                                let x50     = add# [Float32#] r0$val s$elem in
                                let x11    
                                      = write# [Float32#] r0$acc x50 in
                                ()) in
                   let r0$res 
                         = read# [Float32#] r0$acc in
                   let x14    
                         = write# [Float32#] r0 r0$res in
                   ()) in
      ()
}
