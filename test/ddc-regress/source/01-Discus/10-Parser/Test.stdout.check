

-- A module with no top-level things.
module Test where



-- Parse module with some top-level things.
-- Top level things are signaled by 'where'.
module Test where
x  = 5;

y 
  = [DEFIX| add# x x ];



-- Factorial with primops.
module Test where
fac (x: Nat)
  = case x of {
      0
        -> 1;
      _
        -> [DEFIX| mul# x [DEFIX| fac [DEFIX| sub# x 1 ] ] ]
    };



-- Factorial with infix operators.
module Test where
fac (x: Nat)
  = case x of {
      0
        -> 1;
      _
        -> [DEFIX| x (INFIXOP "*") [DEFIX| fac [DEFIX| x (INFIXOP "-") 1 ] ] ]
    };



-- | Check we can use compound expressions mixed with infix ops.
module Test where
foo (_: Unit)
  = [DEFIX| f (INFIXOP "+") (case x of {
       True
         -> 1;
       False
         -> 27
     }) (INFIXOP "+") 5 ];



-- Check that lambda binder scopes all the way to the right.
module Test where
foo (_: Unit)
  = [DEFIX| f (INFIXOP "$") (\(x).
     [DEFIX| g (INFIXOP "$") (\(y).
      [DEFIX| T2 x y ]) ]) ];



-- All the literals
module Test where
foo (_: Unit)
  = let b1 = True# in
    let b2 = False# in
    let n1 = 1 in
    let n2 = 2 in
    let n100 = 100 in
    let i1 = 1i in
    let i2 = 2i in
    let i100 = 100i in
    let in1 = -1i in
    let in2 = -2i in
    let in100 = -100i in
    let f1 = 1.0f32 in
    let f2 = 2.0f32 in
    let f100 = 100.0f32 in
    let f010 = 0.1f32 in
    let s1234 = 1234s in
    let w32 = 4660w32 in
    let r = "I am String" in
    let c = '\955' in
    ();



-- Check character literal excaping.
module Test where
foo (_: Unit)
  = let c1 = '\n' in
    let c2 = '\'' in
    let c3 = '\\' in
    ();



-- Check parsing of match expressions.
module Test where
derp (b: Unit)
  = match {
      | True <- b
      = False;
      
      | False <- b
      = True
    } else default# "<batch>" 4;



-- Check offside rule handles alts on a single line.
module Test where
derp (b: Unit)
  = match {
      | True <- b
      = False;
      
      | False <- b
      = True
    } else default# "<batch>" 4;



-- Check offside rule handles alts where result start in same column
-- as the bar that arts the alt.
module Test where
derp (b: Unit)
  = match {
      | True <- b
      = False;
      
      | False <- b
      = True
    } else default# "<batch>" 4;



-- Check offside rule binds match alts more tightly than guard alts.
module Test where
derp (b: Bool)
  | b
  = match {
    | True <- b
    = False;
    
    | False <- b
    = True
  } else default# "<batch>" 5
  | otherwise
  = match {
    | True <- b
    = True;
    
    | False <- b
    = False
  } else default# "<batch>" 11;



-- Check offside rule handles nested match expressions.
module Test where
derp (b1: Bool) (b2: Bool)
  = match {
      | True <- b1
      = match {
        | True <- b2
        = True;
        
        | False <- b2
        = False
      } else default# "<batch>" 6;
      
      | False <- b1
      = match {
        | True <- b2
        = False;
        
        | False <- b2
        = True
      } else default# "<batch>" 12
    } else default# "<batch>" 4;


