:set lang Tetra

-- Non-binding let.
:check let _ : Unit = () in ()


-- Binding let.
:check let x : Unit = () in x


-- Let-bound function with full signature.
:check let  f : Unit -> Unit = \(x:Unit). x in ()


-- Let using function syntax with a return type.
:check..
let f (x:Unit) : Unit = x
in  f ();;


-- Let using function syntax without a return type.
:check..
let f (x:Unit) = x
in  f ();;


-- Lazy using function syntax without a return type.
:check..
let f (x:Unit) = x
in  f ();;


-- Multiple lets.
:check..
let x : Unit = () in
let y : Unit = () in
y;;


-- Mutltiple lets with debruijn indices.
-- If the bound variable is pushed on the stack when checking
-- the right of the non-recursive binding then this is mistyped.
:check..
let ^ : Unit = () in
let ^ : Unit = ^0 in ^0;;

 
-- Letregion with explicitly empty witness set.
:check..
private r with {} in
();;

-- Simple private with letrec using explicit type annotation
:check..
private r in
letrec { f : Unit -> Nat# = \(x : Unit). 5# } 
in f ();;


-- Simple private with letrec using function syntax.
:check..
private r in
letrec { f (u : Unit) : Nat# = 5# }
in add# [Nat#] (f ()) (f ());;


-- Letrec with a single binding and no braces around it.
:check..
private r in
letrec f (u : Unit) : Nat# = 5#
in add# [Nat#] (f ()) (f ());;


-- Multiple lets and private. 
:check..
private r1 r2 in
let x1 : Nat# = 2# in
let x2 : Nat# = 3#
in add# [Nat#] x1 x2;;
 

-- As above, but no annots on binders.
:check..
private r1 r2 in
let x1 = 2# in
let x2 = 3# 
in add# [Nat#] x1 x2;;


-- Anonymous witness binders
:check..
private r with {_ : Const r} in
();;

