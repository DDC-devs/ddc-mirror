:set lang Tetra


-- Error: types of alternatives are not identical.
:check..
case 5# of {
  5#   -> 1#;
  _    -> True#;
};;


-- Error: scrutinee does not have data type.
:check..
case \(x : Unit). x of {
        _ -> ()
};;


-- Error: pattern binds more fields than provided by constructor.
:load..
module Test 
data List (a : Data) where 
        Nil  : List a
        Cons : a -> List a -> List a
with
letrec {
test : Unit
 = let xx = Nil [Nat#] in
   case xx of {
        Nil          -> ();
        Cons x xs ys -> ();
   }
};;


-- Error: annotation on pattern variable does not match field type  of constructor.
:load..
module Test 
data List (a : Data) where 
        Nil  : List a
        Cons : a -> List a -> List a
with
letrec {
test : Unit
 = let xx = Nil [Nat#] in
   case xx of {
        Nil                -> ();
        Cons (x : Unit) xs -> ();
   }
};;


-- Error: alternatives are not exhaustive, for a small type.
:load..
module Test 
data List (a : Data) where 
        Nil  : List a
        Cons : a -> List a -> List a
with
letrec {
test (xx : List Nat#) : Unit
 = case xx of {
        Cons _ _        -> ()
}};;


-- Error: alternatives are not exhaustive, for a Large type.
:check..
\(xx : Nat#).
case xx of {
        0#      -> ();
};;


-- Error: alternatives are overlapping due to multiple defaults.
:check..
\(xx : Nat#).
case xx of {
        _       -> ();
        _       -> ();
};;


-- Error: alternatives are overlapping because there is a default pattern that does not
-- appear as the last alternative.
:check..
\(xx : Nat#).
case xx of {
        5#      -> ();
        _       -> ();
        0#      -> ();
};;


-- Error: alternatives are overlapping because the same constructor
--        appears multiple times.
:check..
\(xx : Nat#).
case xx of {
        0#      -> ();
        0#      -> ();
        _       -> ();
};;



-- Error: type of scrutinee does not match type of pattern.
:check..
let x = 5# in
case x of {
        ()  -> ()
};;

