:set lang Tetra
:set trans Anonymize


-- Anonymize lambdas and applications.
:trans..
\(f : [r : Region]. Nat# -> Unit).
/\(r : Region). \(x : Nat#). f [r] x
;;


-- Anonymize lambdas and applications
-- Spec and value binders have the same name.
:trans..
/\(ref : Region -> Data).
\ (f   : [r : Region]. ref r -> Unit).
/\(x   : Region). \(x : ref x). f [x] x
;;


-- Anonymize single let binding.
:trans..
let x = () in x;;


-- Anonymize multiple let bindings.
:trans..
let x = () in 
let y = () in
x;;


-- Anonymize private region binder.
:trans..
/\(thing : Region -> Data).
 \(make  : [r : Region]. thing r).
 \(take  : [r : Region]. thing r -> Nat#).
private r with { w : Const r } in
take [r] (make [r])
;;


-- Anonymize multiple let bindings that mention private region.
:trans..
/\(thing : Region -> Data).
 \(make  : [r : Region]. thing r).
 \(take  : [r : Region]. thing r -> Nat#).
private r with { w : Const r } in
let x = make [r] in
let y = make [r] in
add# [Nat#] (take [r] x) (take [r] y);;
