:set +Indent +SuppressImports
:set builder x86_64-darwin


-- Observable optimisations: GVN
-- Feed the output of this test to `opt -S -tbaa -basicaa -gvn -o - <test.ll>`
--
-- PROBLEM: since only load/stores can be annotated (and not function calls),
--    we have to inline addInt manually here.
--
:set lang Salt
:to-llvm..
module Test with letrec {

x_plus_y_square 
    [rx ry rz : Region]                          -- Takes three regions
    {w1 : Distinct rx rz}                   -- Two witnesses
    {w2 : Distinct ry rz}
    (x : Ptr# rx Int#)                      -- Three value arguments
    (y : Ptr# ry Int#)                      -- of type pointer to int
    (z : Ptr# rz Int#)
    : Int#
 = do { xval1 = peek# [rx] [Int#] x;        -- Compute (x + y)
        yval1 = peek# [ry] [Int#] y;
        a     = add# [Int#] xval1 yval1;        
        poke# [rz] [Int#] z a;              -- Modify z        
        xval2 = peek# [rx] [Int#] x;        -- Compute (x + y) again
        yval2 = peek# [ry] [Int#] y;
        b     = add# [Int#] xval2 yval2;        
        mul# [Int#] a b;                    -- Result is (x + y)^2
      };
};;

-- Observable optimisations: GVN - constprop behaviour
:set lang Salt
:to-llvm..
module Constprop with letrec {
  nothing [rx : Region]
      (x : Ptr# rx Int#)
      : Int#
    = 42i#;

  three_x_plus_one [rx : Region]
      {w : Const rx}
      (x : Ptr# rx Int#)
      : Int#
    = do { a = peek# [rx] [Int#] x;
           b = add# [Int#] a 1i#;
           nothing [rx] x;
           c = peek# [rx] [Int#] x;
           d = mul# [Int#] c 2i#;
           add# [Int#] b d;
         };
};;


