

{-  Test packing of types in the presence of closure loops.
	From Leroy, this function has a loop in its closure type through $10, *3, $10.
	However, it doesn't lead to an infinite type because we can
	
	sub *3 in $10 giving  $10 :> f : *20 -(!22 $10)> *21
	trim closures         $10 :> $10
	which is trivially satisfied.

	*0
            :- *0         = *3 -(!5 $6)> *3
            ,  *3         = *20 -(!22 $10)> *21
            ,  !5         :> Base.!Read %13
            ,  $6         :> ${$8; $9}
            ,  $8         :> Data.Bool.True : forall %r1. Data.Bool.Bool %r1
            ,  $9         :> $10 \ f
            ,  $10        :> f : *3
-}

eta f		
 = if True
 	 then f 
	 else (\x -> f x);
