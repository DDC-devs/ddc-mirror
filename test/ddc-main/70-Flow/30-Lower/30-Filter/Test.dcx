

:set lang Flow

:flow-prep..
module Test with letrec

highInt (x : Int#) (y : Int#) : Int#
 = case gt# [Int#] x y of
        True#   -> x
        False#  -> y

maxPack [k1 : Rate]
        (ss : Series# k1 Int#)
        : Tuple2# Int# (Vector# Int#)
 = do
        flags   = map#  [k1] [Int#] [Bool#]
                        (\(x : Int#). gt# [Int#] x 0i#)
                        ss

        mkSel1# [k1] [Tuple2# Int# (Vector# Int#)] flags
         (/\(k2 : Rate). \(sel : Sel1# k1 k2).
          let sAbove   = pack# [k1] [k2]   [Int#] sel ss in 
          let max      = fold# [k2] [Int#] [Int#] highInt 0i# sAbove in
          let vAbove   = vectorOfSeries# [k2] [Int#] sAbove 
          in T2# [Int#] [Vector# Int#] max vAbove)
;;
