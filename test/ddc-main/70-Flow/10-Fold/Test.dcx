:set lang Flow


-- Single stream being eaten by multiple consumers.
:load..
module Test with letrec
test    [k : Rate]
        (elems : Stream k Int#)
        : Int#
 = do   
        sum     = fold#  [k] [Int#] [Int#]
                        (add# [Int#]) 0i# elems

        prod    = fold#  [k] [Int#] [Int#]
                        (mul# [Int#]) 1i# elems

        add# [:Int#:] sum prod
;;


-- Diamond dependency
:load..
module Test with letrec

det     (x : Nat#) : Nat#
 = add# [Nat#] x x

max     (n1 : Nat#) (n2 : Nat#) : Nat#
 = case gt# [Nat#] n1 n2 of
        True#   -> n1
        False#  -> n2


test    [k1     : Rate]
        (points : Stream k1 Nat#)
        : Array Nat#
 = do   
        dets    
         = map# [k1] [Nat#] [Nat#]
                det points

        flags   
         = map# [k1] [Nat#] [Bool#]
                (gt# [Nat#] 0#) dets

        vAbove
         = mkSel1# [k1] [Array Nat#] flags 
           (/\(k2 : Rate). \(sel : Sel1 k1 k2).
            let above   = pack# [k1] [k2] [Nat#] sel points in
            let vAbove  = fromStream# [k2] [Nat#] above       
            in  fromVector# [k2] [Nat#] vAbove)

        xMax 
         = fold# [k1] [Nat#] [Nat#] max 0# dets 

        vAbove
;;
