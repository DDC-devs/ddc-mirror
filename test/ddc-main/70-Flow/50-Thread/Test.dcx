
-- Ensure world threading works into loop and guard contexts.
:flow-thread..
module Test with
letrec {
  filter : [k0 : Rate].[a : Data].(a -> Bool#) -> (a -> Bool#) -> Series# k0 a -> Vector# a
    = /\(k0 : Rate)./\(a : Data).
       \(f g : a -> Bool#).\(s0 : Series# k0 a).
      let k1__count : Ref# Int# = new# [Int#] 0i# in
      let k2__count : Ref# Int# = new# [Int#] 0i# in
      let x4 : Vector# a
            = newVectorN# [a] [k0] (rateOfSeries# [k0] [a] s0) in
      let _ : Unit
            = loopn# [k0] (rateOfSeries# [k0] [a] s0)
                  (\(x0 : Int#).
                   let s0__elem : a = next# [a] [k0] s0 x0 in
                   let x1__elem : Bool#
                         = (\(x : a). f x) s0__elem in
                   let _ : Unit
                         = guard# k1__count x1__elem
                               (\(x1 : Int#).
                                let x3__elem : Bool#
                                      = (\(x : a). g x) s0__elem in
                                let _ : Unit
                                      = guard# k2__count x3__elem
                                            (\(x2 : Int#).
                                             let _ : Unit = writeVector# [a] x4 x2 s0__elem in
                                             ()) in
                                ()) in
                   ()) in
      x4
}
;;
