
-- Check world threading works into loop and guard combaintors.
-- This is before the wind-transform that eliminates these combinators.
module Test with
letrec {
  filter : [k0 : Rate].[a : Data].(a -> Bool#) -> (a -> Bool#) -> Series# k0 a -> World# -> Tuple2# World# (Vector# a)
    = /\(k0 : Rate)./\(a : Data).
       \(f g : a -> Bool#).\(s0 : Series# k0 a).\(^ : World#).
      caselet T2# (^ : World#) (k1__count : Ref# Int#)  = new# [Int#] 0i# ^0 in
      caselet T2# (^ : World#) (k2__count : Ref# Int#)  = new# [Int#] 0i# ^0 in
      caselet T2# (^ : World#) (x4 : Vector# a) 
        = newVectorN# [a] [k0] (rateOfSeries# [k0] [a] s0) ^0 in
      caselet T1# (^ : World#) 
        = loopn# [k0] (rateOfSeries# [k0] [a] s0)
              (\(x0 : Int#).\(^ : World#).
               caselet T2# (^ : World#) (s0__elem : a)  = next# [a] [k0] s0 x0 ^0 in
               let x1__elem : Bool#
                     = (\(x : a). f x) s0__elem in
               caselet T1# (^ : World#) 
                 = guard# k1__count x1__elem
                       (\(x1 : Int#).\(^ : World#).
                        let x3__elem : Bool#
                              = (\(x : a). g x) s0__elem in
                        caselet T1# (^ : World#) 
                          = guard# k2__count x3__elem
                                (\(x2 : Int#).\(^ : World#).
                                 caselet T1# (^ : World#)  = writeVector# [a] x4 x2 s0__elem ^0 in
                                 ^0) ^0 in
                        ^0) ^0 in
               ^0) ^0 in
      T2# [World#] [Vector# a] ^0 x4
}


-- Check world threading works after the wind tranform.
-- Where we have explicit tail-recursive loops.
module Test with
letrec {
  map_map : [k : Rate].Series# k Int# -> World# -> Tuple2# World# (Vector# Int#)
    = /\(k : Rate).
       \(s_aub : Series# k Int#).\(^ : World#).
      caselet T2# (^ : World#) (x6 : Vector# Int#) 
        = newVectorN# [Int#] [k] (rateOfSeries# [k] [Int#] s_aub) ^0 in
      letrec {
        loop_k : Int# -> World# -> World#
          = \(x0 : Int#).\(^ : World#).
            case x0 of {
              0i#  
               -> ^0;
              _ 
               -> caselet T2# (^ : World#) (s_aub__elem : Int#)  = next# [Int#] [k] s_aub x0 ^0 in
                  let x2__elem : Int# = add# [Int#] s_aub__elem 1i# in
                  let x4__elem : Int# = mul# [Int#] x2__elem 2i# in
                  caselet T1# (^ : World#)  = writeVector# [Int#] x6 x0 x4__elem ^0 in
                  loop_k (add# [Int#] x0 1i#) ^0
            }
      } in
      let _ : Unit
            = loop_k
                  (natOfRateNat# [k] (rateOfSeries# [k] [Int#] s_aub)) in
      T2# [World#] [Vector# Int#] ^0 x6
}
