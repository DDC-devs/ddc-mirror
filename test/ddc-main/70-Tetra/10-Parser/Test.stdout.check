

-- A module with no top-level things.
module Test where



-- Parse module with some top-level things.
-- Top level things are signaled by 'where'.
module Test where
x : Nat = 5
y : Nat
  = DEFIX add# x x


-- Factorial with primops.
module Test where
fac : Nat -> Nat
  = \(x : Nat).
    case x of {
      0  
       -> 1;
      _ 
       -> DEFIX mul# x (DEFIX fac (DEFIX sub# x 1))
    }


-- Factorial with infix operators.
module Test where
fac : Nat -> Nat
  = \(x : Nat).
    case x of {
      0  
       -> 1;
      _ 
       -> DEFIX x (OP "*") (DEFIX fac (DEFIX x (OP "-") 1))
    }
