
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

add (x y : a) : a 
        = add# [a] x y

length (xx : List a) : Nat
 = case xx of
        Nil       -> 0
        Cons x xs -> 1 + length xs
;;


:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

append  (xx : List a) (yy : List a) : List a
 = case xx of
        Nil       -> yy
        Cons x xs -> Cons x (append xs yy)
;;
