
-- List length function.
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

add (x y : a) : a 
        = add# [a] x y

length (xx : List a) : Nat
 = case xx of
        Nil       -> 0
        Cons x xs -> 1 + length xs
;;


-- List functions that don't need primops.
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

singleton [x : a] : List a
 = Cons x Nil

append  (xx : List a) (yy : List a) : List a
 = case xx of
        Nil       -> yy
        Cons x xs -> Cons x (append xs yy)

reverse (xx : List a) : List a
 = case xx of
        Nil       -> Nil
        Cons x xs -> append (reverse xs) (singleton x)

map     (f : a -> b) (xx : List a) : List b
 = case xx of
        Nil       -> Nil
        Cons x xs -> Cons (f x) (map f xs)
;;


-- List map using the S computation type.
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a


mapS    [a b : Data] [e : Effect]
        (f : a -> S e b) (xx : List a) : S e (List b)
 = case xx of
        Nil       -> Nil
        Cons x xs -> Cons (f x) (mapS f xs)
;;
