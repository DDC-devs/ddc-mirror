
-- List length function.
module Test 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  add : [a : Data].a -> a -> a
    = /\(a : Data).
       \(x y : a). add# [a] x y;
  
  length : [a : Data].List a -> Nat
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> 0#;
        Cons x xs 
         -> add [?] 1# (length [?] xs)
      }
}


-- List functions that don't need primops.
module Test 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  singleton : [a : Data].[x : a].List a
    = /\(a : Data)./\(x : a).
      Cons [?] x (Nil [?]);
  
  append : [a : Data].List a -> List a -> List a
    = /\(a : Data).
       \(xx yy : List a).
      case xx of {
        Nil  
         -> yy;
        Cons x xs 
         -> Cons [?] x (append [?] xs yy)
      };
  
  reverse : [a : Data].List a -> List a
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> Nil [?];
        Cons x xs 
         -> append [?] (reverse [?] xs) (singleton [?] [?] x)
      };
  
  map : [a b : Data].(a -> b) -> List a -> List b
    = /\(a b : Data).
       \(f : a -> b).\(xx : List a).
      case xx of {
        Nil  
         -> Nil [?];
        Cons x xs 
         -> Cons [?] (f x) (map [?] [?] f xs)
      }
}
