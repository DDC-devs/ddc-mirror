

-- Insert [?] holes for type applications of variables with explicit signatures.
-- We only reconstruct type applications for vars with signatures because we
-- can do it without proper constraint solving.
-- Convert source to core that includes holes, then fill holes at core level.
module Test where
data List (a : Data) where
        Nil : List a
        Cons : a -> List a -> List a
map : [a b : Data].(a -> b) -> List a -> List b
  = /\(a b : Data).
     \(f : a -> b).\(xx : List a).
    case xs of {
      Nil  
       -> Nil [?];
      Cons x xs 
       -> Cons [?] (f x) (map [?] [?] f xs)
    }


-- Function application already has some explicit type arguments.
module Test where
data List (a : Data) where
        Nil : List a
        Cons : a -> List a -> List a
map : [a b : Data].(a -> b) -> List a -> List b
  = /\(a b : Data).
     \(f : a -> b).\(xx : List a).
    case xs of {
      Nil  
       -> Nil [?];
      Cons x xs 
       -> Cons [a] (f x) (map [a] [?] f xs)
    }


-- If any type variables are not in scope in a top-level signature,
-- then insert quantifiers for these.
module Test where
data List (a : Data) where
        Nil : List a
        Cons : a -> List a -> List a
map : (a -> b) -> List a -> List b
  = \(f : a -> b).\(xx : List a).
    case xs of {
      Nil  
       -> Nil [?];
      Cons x xs 
       -> Cons [?] (f x) (map f xs)
    }


