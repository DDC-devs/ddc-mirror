
ok

-- Simple fold over a vector
module Test with
letrec {
  test : Vector# Int# -> Int#
    = \(u1 : Vector# Int#).
      let x3$ref : Ref# Int# = new# [Int#] 0i# in
      let _ : Bool#
            = runProcess# [Int#] u1
                  (/\(u1$k : Rate).
                    \(_ : RateNat# u1$k).\(u1$s : Series# u1$k Int#).
                   let x3$proc : Process#
                         = sreduce# [u1$k] [Int#] x3$ref
                               (\(x0 x1 : Int#). add# [Int#] x0 x1) 0i# u1$s in
                   x3$proc) in
      let x3 : Int# = read# [Int#] x3$ref in
      x3
}


-- Two folds over same vector
module Test with
letrec {
  test : Vector# Int# -> Int#
    = \(u1 : Vector# Int#).
      let x3$ref : Ref# Int# = new# [Int#] 0i# in
      let x8$ref : Ref# Int# = new# [Int#] 1i# in
      let _ : Bool#
            = runProcess# [Int#] u1
                  (/\(u1$k : Rate).
                    \(_ : RateNat# u1$k).\(u1$s : Series# u1$k Int#).
                   let x3$proc : Process#
                         = sreduce# [u1$k] [Int#] x3$ref
                               (\(x0 x1 : Int#). add# [Int#] x0 x1) 0i# u1$s in
                   let x8$proc : Process#
                         = sreduce# [u1$k] [Int#] x8$ref
                               (\(x5 x6 : Int#). mul# [Int#] x5 x6) 1i# u1$s in
                   pjoin# x3$proc x8$proc) in
      let x3 : Int# = read# [Int#] x3$ref in
      let x8 : Int# = read# [Int#] x8$ref in
      add# [Int#] x3 x8
}


