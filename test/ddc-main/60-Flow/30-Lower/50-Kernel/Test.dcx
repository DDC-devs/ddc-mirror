:set SuppressLetTypes

-- Multiply two series.
:flow-lower-kernel..
module Test with letrec
test    [k : Rate] (n  : RateNat# k)
        (v  : Vector# Float32#)
        (s1 : Series# k Float32#) (s2 : Series# k Float32#) 
        : Unit
 = do   
        s2      = smap2# [k] [Float32#] [Float32#] [Float32#] 
                        (mul# [Float32#]) s1 s2

        sfill# [k] [Float32#] v s2
;;


-- Multiply by constant, lifting replicates constant.
:flow-lower-kernel..
module Test with letrec
test    [k : Rate] (n : RateNat# k)
        (v  : Vector# Float32#)
        (s1 : Series# k Float32#) (s2 : Series# k Float32#) 
        : Unit
 = do   
        s2      = smap2# [k] [Float32#] [Float32#] [Float32#] 
                        (mul# [Float32#]) s1 s2

        s3      = smap#  [k] [Float32#] [Float32#]
                        (add# [Float32#] 2.0f32#) s2

        sfill# [k] [Float32#] v s3
;;


-- Gather from vector.
:flow-lower-kernel..
module Test with letrec
test    [k : Rate] (n : RateNat# k)
        (v1 : Vector# Float32#)   (v2 : Vector# Float32#)
        (s1 : Series# k Nat#)
        : Unit
 = do   
        s2      = sgather# [k] [Float32#] v1 s1

        s3      = smap#  [k] [Float32#] [Float32#]
                        (add# [Float32#] 2.0f32#) s2

        sfill# [k] [Float32#] v2 s3
;;


-- Scatter into vector.
:flow-lower-kernel..
module Test with letrec
test    [k : Rate] (n : RateNat# k)
        (v1 : Vector# Float32#)
        (s1 : Series# k Nat#)   (s2 : Series# k Float32#)
        : Unit
 = do   
        s3      = smap#  [k] [Float32#] [Float32#]
                        (add# [Float32#] 2.0f32#) s2

        sscatter# [k] [Float32#] v1 s1 s3
;;


-- Sum the elements of a vector.
:flow-lower-kernel..
module Test with letrec
test    [k : Rate] (n : RateNat# k)
        (x1 : Ref# Float32#) (s1 : Series# k Float32#)
        : Unit
 =      sreduce#  [k] [Float32#] x1 (add# [Float32#]) 0.0f32# s1
;;


-- Fuse gather, map and reduce in one.
:flow-lower-kernel..
module Test with letrec
test    [k : Rate] (n : RateNat# k) 
        (x1  : Ref# Float32#)
        (v1 : Vector# Float32#)
        (s1 : Series# k Nat#)
        : Unit
 = do   
        s2      = sgather# [k] [Float32#] v1 s1

        s3      = smap#  [k] [Float32#] [Float32#]
                        (mul# [Float32#] 2.0f32#) s2

        sreduce# [k] [Float32#] x1 (add# [Float32#]) 0.0f32# s3
;;


-- Dot product.
:flow-lower-kernel..
module Test with letrec
test    [k  : Rate] (n : RateNat# k) 
        (x1 : Ref# Float32#)
        (s1 : Series# k Float32#) (s2 : Series# k Float32#)
        : Unit
 = do   
        s3      = smap2# [k] [Float32#] [Float32#] [Float32#]
                        (mul# [Float32#]) s1 s2

        sreduce# [k] [Float32#] x1 (add# [Float32#]) 0.0f32# s3
;;


-- Fuse sum and product.
:flow-lower-kernel..
module Test with letrec
test    [k  : Rate] (n : RateNat# k) 
        (x1 : Ref# Float32#)      (x2 : Ref# Float32#)
        (s1 : Series# k Float32#)
        : Unit
 = do   
        sreduce# [k] [Float32#] x1 (add# [Float32#]) 0.0f32# s1
        sreduce# [k] [Float32#] x2 (mul# [Float32#]) 1.0f32# s1
;;


-- Fuse sum and dot product.
:flow-lower-kernel..
module Test with letrec
test    [k  : Rate] (n : RateNat# k) 
        (x1 : Ref# Float32#)      (x2 : Ref# Float32#)
        (s1 : Series# k Float32#) (s2 : Series# k Float32#)
        : Unit
 = do   
        s3      = smap2# [k] [Float32#] [Float32#] [Float32#]
                        (mul# [Float32#]) s1 s2

        sreduce# [k] [Float32#] x1 (add# [Float32#]) 0.0f32# s3
        
        sreduce# [k] [Float32#] x2 (add# [Float32#]) 0.0f32# s1
;;
