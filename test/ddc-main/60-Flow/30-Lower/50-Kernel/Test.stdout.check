
-- Multiply two series.
module Test with
letrec {
  test : [k : Rate].Vector# Float32# -> Series# (Down8# k) Float32# -> Series# (Down8# k) Float32# -> Unit
    = /\(k : Rate).
       \(v : Vector# Float32#).\(s1 s2 : Series# (Down8# k) Float32#).
      let _ : Unit
            = loop# [k]
                  (\(x2 : Nat#).
                   let s1$elem : Vec8# Float32# = next$8# [Float32#] [k] s1 x2 in
                   let s2$elem : Vec8# Float32# = next$8# [Float32#] [k] s2 x2 in
                   let x3$elem : Vec8# Float32# = vmul$8# [Float32#] s1$elem s2$elem in
                   let _ : Unit = vwrite$8# [Float32#] v x2 x3$elem in
                   ()) in
      ()
}


-- Multiply by constant, lifting replicates constant.
module Test with
letrec {
  test : [k : Rate].Vector# Float32# -> Series# (Down8# k) Float32# -> Series# (Down8# k) Float32# -> Unit
    = /\(k : Rate).
       \(v : Vector# Float32#).\(s1 s2 : Series# (Down8# k) Float32#).
      let _ : Unit
            = loop# [k]
                  (\(x2 : Nat#).
                   let s1$elem : Vec8# Float32# = next$8# [Float32#] [k] s1 x2 in
                   let s2$elem : Vec8# Float32# = next$8# [Float32#] [k] s2 x2 in
                   let x3$elem : Vec8# Float32# = vmul$8# [Float32#] s1$elem s2$elem in
                   let x3 : Vec8# Float32# = vrep$8# [Float32#] 2.0f32# in
                   let x6$elem : Vec8# Float32# = vadd$8# [Float32#] x3 x3$elem in
                   let _ : Unit = vwrite$8# [Float32#] v x2 x6$elem in
                   ()) in
      ()
}


-- Gather from vector.
module Test with
letrec {
  test : [k : Rate].Vector# Float32# -> Vector# Float32# -> Series# (Down8# k) Nat# -> Unit
    = /\(k : Rate).
       \(v1 v2 : Vector# Float32#).\(s1 : Series# (Down8# k) Nat#).
      let _ : Unit
            = loop# [k]
                  (\(x1 : Nat#).
                   let s1$elem : Vec8# Nat# = next$8# [Nat#] [k] s1 x1 in
                   let s2$elem : Vec8# Float32# = vgather$8# [Float32#] v1 s1$elem in
                   let x2 : Vec8# Float32# = vrep$8# [Float32#] 2.0f32# in
                   let x2$elem : Vec8# Float32# = vadd$8# [Float32#] x2 s2$elem in
                   let _ : Unit = vwrite$8# [Float32#] v2 x1 x2$elem in
                   ()) in
      ()
}


-- Scatter into vector.
module Test with
letrec {
  test : [k : Rate].Vector# Float32# -> Series# (Down8# k) Nat# -> Series# (Down8# k) Float32# -> Unit
    = /\(k : Rate).
       \(v1 : Vector# Float32#).\(s1 : Series# (Down8# k) Nat#).\(s2 : Series# (Down8# k) Float32#).
      let _ : Unit
            = loop# [k]
                  (\(x1 : Nat#).
                   let s1$elem : Vec8# Nat# = next$8# [Nat#] [k] s1 x1 in
                   let s2$elem : Vec8# Float32# = next$8# [Float32#] [k] s2 x1 in
                   let x2 : Vec8# Float32# = vrep$8# [Float32#] 2.0f32# in
                   let x2$elem : Vec8# Float32# = vadd$8# [Float32#] x2 s2$elem in
                   let _ : Unit = vscatter$8# [Float32#] v1 s1$elem x2$elem in
                   ()) in
      ()
}


-- Sum the elements of a vector.
module Test with
letrec {
  test : [k : Rate].Ref# Float32# -> Series# (Down8# k) Float32# -> Unit
    = /\(k : Rate).
       \(x1 : Ref# Float32#).\(s1 : Series# (Down8# k) Float32#).
      let x4 : Vec8# Float32# = vrep$8# [Float32#] 0.0f32# in
      let x1$vec : Ref# (Vec8# Float32#)
            = new# [Vec8# Float32#] x4 in
      let _ : Unit
            = loop# [k]
                  (\(x3 : Nat#).
                   let s1$elem : Vec8# Float32# = next$8# [Float32#] [k] s1 x3 in
                   let x1$val : Vec8# Float32#
                         = read# [Vec8# Float32#] x1$vec in
                   let x5 : Vec8# Float32# = vadd$8# [Float32#] x1$val s1$elem in
                   let _ : Unit
                         = write# [Vec8# Float32#] x1$vec x5 in
                   ()) in
      let x1$res : Vec8# Float32#
            = read# [Vec8# Float32#] x1$vec in
      let x7 : Float32# = vproj$8$0# [Float32#] x1$res in
      let x1$res$0 : Float32# = add# [Float32#] 0.0f32# x7 in
      let x9 : Float32# = vproj$8$1# [Float32#] x1$res in
      let x1$res$1 : Float32# = add# [Float32#] x1$res$0 x9 in
      let x11 : Float32# = vproj$8$2# [Float32#] x1$res in
      let x1$res$2 : Float32# = add# [Float32#] x1$res$1 x11 in
      let x13 : Float32# = vproj$8$3# [Float32#] x1$res in
      let x1$res$3 : Float32# = add# [Float32#] x1$res$2 x13 in
      let x15 : Float32# = vproj$8$4# [Float32#] x1$res in
      let x1$res$4 : Float32# = add# [Float32#] x1$res$3 x15 in
      let x17 : Float32# = vproj$8$5# [Float32#] x1$res in
      let x1$res$5 : Float32# = add# [Float32#] x1$res$4 x17 in
      let x19 : Float32# = vproj$8$6# [Float32#] x1$res in
      let x1$res$6 : Float32# = add# [Float32#] x1$res$5 x19 in
      let x21 : Float32# = vproj$8$7# [Float32#] x1$res in
      let x1$res$7 : Float32# = add# [Float32#] x1$res$6 x21 in
      let _ : Unit = write# [Float32#] x1 x1$res$7 in
      ()
}
