:set SuppressLetTypes

-- | Single map over input series, producing a vector.
:flow-lower..
module Test with letrec
test [k : Rate] (s : Series# k Int#) : Vector# Int#
 = create# [k] [Int#]
        (map# [k] [Int#] [Int#]
                (\(x : Int#). add# [Int#] (mul# [Int#] x 2i#) 1i#) s)
;;


-- | Single map over input series, writing into existing vector.
:flow-lower..
module Test with letrec
test    [k : Rate] 
        (v : Vector# Int#) (s : Series# k Int#) 
        : Int#
 = do   fill# [k] [Int#] v
                (map# [k] [Int#] [Int#]
                        (\(x : Int#). add# [Int#] (mul# [Int#] x 2i#) 1i#) s)

        fold# [k] [Int#] [Int#] (add# [Int#]) 0i# s
;;
