
ok

-- Single map over input series, producing a vector.
module Test with
letrec {
  map : [k : Rate].Series# k Int# -> Vector# Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x5 : Vector# Int# = newVectorR# [Int#] [k] in
      let _ : Unit
            = loop# [k]
                  (\(^ : Int#).
                   let s$elem : Int# = next# [Int#] [k] s ^0 in
                   let x3$elem : Int#
                         = (\(x0 : Int#).
                            (\(x : Int#).
                             let x0 : Int# = mul# [Int#] x 2i# in
                             let x1 : Int# = add# [Int#] x0 1i# in
                             x1) x0) s$elem in
                   let _ : Unit = writeVector# [Int#] x5 ^0 x3$elem in
                   ()) in
      x5
}


-- Map/Map fusion, producing a vector.
module Test with
letrec {
  map : [k : Rate].Series# k Int# -> Vector# Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x6 : Vector# Int# = newVectorR# [Int#] [k] in
      let _ : Unit
            = loop# [k]
                  (\(^ : Int#).
                   let s$elem : Int# = next# [Int#] [k] s ^0 in
                   let x2$elem : Int#
                         = (\(x0 : Int#).
                            (\(x : Int#). add# [Int#] x 1i#) x0) s$elem in
                   let x4$elem : Int#
                         = (\(x1 : Int#).
                            (\(x : Int#). mul# [Int#] x 2i#) x1) x2$elem in
                   let _ : Unit = writeVector# [Int#] x6 ^0 x4$elem in
                   ()) in
      x6
}


-- Map and Fold the same series, 
-- producing both results.
module Test with
letrec {
  foldMap : [k : Rate].Series# k Int# -> Tuple2# Int# (Vector# Int#)
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x2$acc : Ref# Int# = new# [Int#] 0i# in
      let x6 : Vector# Int# = newVectorR# [Int#] [k] in
      let _ : Unit
            = loop# [k]
                  (\(^ : Int#).
                   let s$elem : Int# = next# [Int#] [k] s ^0 in
                   let x0 : Int# = read# [Int#] x2$acc in
                   let _ : Unit
                         = write# [Int#] x2$acc
                               ((\(x1 _ : Int#). add# [Int#] x0 x1) s$elem ^0) in
                   let x5$elem : Int#
                         = (\(x3 : Int#).
                            (\(x : Int#). mul# [Int#] x 2i#) x3) s$elem in
                   let _ : Unit = writeVector# [Int#] x6 ^0 x5$elem in
                   ()) in
      let x2 : Int# = read# [Int#] x2$acc in
      let x7 : Tuple2# Int# (Vector# Int#)
            = T2# [Int#] [Vector# Int#] x2 x6 in
      x7
}

