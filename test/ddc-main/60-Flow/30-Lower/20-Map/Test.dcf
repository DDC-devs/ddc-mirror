module Test with
letrec {
  foldMap : [k : Rate].Series# k Int# -> Tuple2# Int# (Vector# Int#)
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x2__acc : Ref# Int# = new# [Int#] 0i# in
      let x6 : Vector# Int# = newVectorR# [Int#] [k] in
      let _ : Unit
            = loop# [k]
                  (\(^ : Nat#).
                   let s__elem : Int# = next# [Int#] [k] s ^0 in
                   let x0 : Int# = read# [Int#] x2__acc in
                   let _ : Unit
                         = write# [Int#] x2__acc (add# [Int#] x0 s__elem) in
                   let x5__elem : Int#
                         = (\(x : Int#). mul# [Int#] x 2i#) s__elem in
                   let _ : Unit = writeVector# [Int#] x6 ^0 x5__elem in
                   ()) in
      let x2 : Int# = read# [Int#] x2__acc in
      let x7 : Tuple2# Int# (Vector# Int#)
            = T2# [Int#] [Vector# Int#] x2 x6 in
      x7
}
