:set SuppressLetTypes

-- Single map over input series, producing a vector.
:flow-lower..
module Test with letrec
map [k : Rate] (s : Series# k Int#) : Vector# Int#
 = screate# [k] [Int#]
        (smap1# [k] [Int#] [Int#]
                (\(x : Int#). add# [Int#] (mul# [Int#] x 2i#) 1i#) s)
;;


-- Map/Map fusion, producing a vector.
:flow-lower..
module Test with letrec
map [k : Rate] (s : Series# k Int#) : Vector# Int#
 = screate# [k] [Int#]
        (smap1# [k] [Int#] [Int#]
               (\(x : Int#). mul# [Int#] x 2i#)
               (smap1# [k] [Int#] [Int#]
                      (\(x : Int#). add# [Int#] x 1i#) s))
;;


-- Map and Fold the same series, 
-- producing both results.
:flow-lower..
module Test with letrec
foldMap [k : Rate] (s : Series# k Int#) 
        : Tuple2# Int# (Vector# Int#)
 = do   
        x1      = sfold# [k] [Int#] [Int#]
                        (add# [Int#]) 0i# s

        x4      = smap1# [k] [Int#] [Int#]
                        (\(x : Int#). mul# [Int#] x 2i#) s

        x6      = screate# [k] [Int#] x4

        T2# [Int#] [Vector# Int#] x1 x6
;;

