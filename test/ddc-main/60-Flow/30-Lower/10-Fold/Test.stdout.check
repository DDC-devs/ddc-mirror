
ok

-- Single fold of input series.
module Test with
letrec {
  fold : [k : Rate].Series# k Int# -> Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x3$acc : Ref# Int# = new# [Int#] 0i# in
      let _ : Unit
            = loop# [k]
                  (\(x2 : Nat#).
                   let s$elem : Int# = next# [Int#] [k] s x2 in
                   let x0 : Int# = read# [Int#] x3$acc in
                   let x4 : Int# = add# [Int#] x0 s$elem in
                   let _ : Unit = write# [Int#] x3$acc x4 in
                   ()) in
      let x3 : Int# = read# [Int#] x3$acc in
      x3
}


-- Two folds over the same input series.
module Test with
letrec {
  ffold : [k : Rate].Series# k Int# -> Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x3$acc : Ref# Int# = new# [Int#] 0i# in
      let x8$acc : Ref# Int# = new# [Int#] 1i# in
      let _ : Unit
            = loop# [k]
                  (\(x2 : Nat#).
                   let s$elem : Int# = next# [Int#] [k] s x2 in
                   let x0 : Int# = read# [Int#] x3$acc in
                   let x4 : Int# = add# [Int#] x0 s$elem in
                   let _ : Unit = write# [Int#] x3$acc x4 in
                   let x5 : Int# = read# [Int#] x8$acc in
                   let x6 : Int# = mul# [Int#] x5 s$elem in
                   let _ : Unit = write# [Int#] x8$acc x6 in
                   ()) in
      let x3 : Int# = read# [Int#] x3$acc in
      let x8 : Int# = read# [Int#] x8$acc in
      add# [Int#] x3 x8
}


-- Three folds over the same input series
module Test with
letrec {
  fffold : [k : Rate].Series# k Int# -> Tuple2# Int# Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x3$acc : Ref# Int# = new# [Int#] 0i# in
      let x8$acc : Ref# Int# = new# [Int#] 1i# in
      let x15$acc : Ref# Int# = new# [Int#] 1i# in
      let _ : Unit
            = loop# [k]
                  (\(x2 : Nat#).
                   let s$elem : Int# = next# [Int#] [k] s x2 in
                   let x0 : Int# = read# [Int#] x3$acc in
                   let x4 : Int# = add# [Int#] x0 s$elem in
                   let _ : Unit = write# [Int#] x3$acc x4 in
                   let x5 : Int# = read# [Int#] x8$acc in
                   let x6 : Int# = mul# [Int#] x5 s$elem in
                   let _ : Unit = write# [Int#] x8$acc x6 in
                   let x12 : Int# = read# [Int#] x15$acc in
                   let x7 : Int# = mul# [Int#] x12 s$elem in
                   let _ : Unit = write# [Int#] x15$acc x7 in
                   ()) in
      let x3 : Int# = read# [Int#] x3$acc in
      let x8 : Int# = read# [Int#] x8$acc in
      let x15 : Int# = read# [Int#] x15$acc in
      let x9 : Int# = add# [Int#] x3 x8 in
      T2# [Int#] [Int#] x9 x15
}


-- Fuse map into fold
module Test with
letrec {
  foldMap : [k : Rate].Series# k Int# -> Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x6$acc : Ref# Int# = new# [Int#] 0i# in
      let _ : Unit
            = loop# [k]
                  (\(x2 : Nat#).
                   let s$elem : Int# = next# [Int#] [k] s x2 in
                   let x4$elem : Int# = mul# [Int#] s$elem 2i# in
                   let x0 : Int# = read# [Int#] x6$acc in
                   let x3 : Int# = add# [Int#] x0 x4$elem in
                   let _ : Unit = write# [Int#] x6$acc x3 in
                   ()) in
      let x6 : Int# = read# [Int#] x6$acc in
      x6
}


-- Fold and fold with index.
module Test 
imports {
        addInt :: Int# -> Int# -> Int#;
        minIx :: Nat# -> Tuple2# Int# Int# -> Int# -> Tuple2# Int# Int#;
} with
letrec {
  foldix : [k : Rate].Series# k Int# -> Tuple2# (Tuple2# Int# Int#) Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x4 : Tuple2# Int# Int# = T2# [Int#] [Int#] 0i# 0i# in
      let x5$acc : Ref# (Tuple2# Int# Int#)
            = new# [Tuple2# Int# Int#] x4 in
      let x9$acc : Ref# Int# = new# [Int#] 0i# in
      let _ : Unit
            = loop# [k]
                  (\(x3 : Nat#).
                   let s$elem : Int# = next# [Int#] [k] s x3 in
                   let x1 : Tuple2# Int# Int#
                         = read# [Tuple2# Int# Int#] x5$acc in
                   let x7 : Tuple2# Int# Int# = minIx x3 x1 s$elem in
                   let _ : Unit
                         = write# [Tuple2# Int# Int#] x5$acc x7 in
                   let x6 : Int# = read# [Int#] x9$acc in
                   let x8 : Int# = addInt x6 s$elem in
                   let _ : Unit = write# [Int#] x9$acc x8 in
                   ()) in
      let x5 : Tuple2# Int# Int#
            = read# [Tuple2# Int# Int#] x5$acc in
      let x9 : Int# = read# [Int#] x9$acc in
      T2# [Tuple2# Int# Int#] [Int#] x5 x9
}

