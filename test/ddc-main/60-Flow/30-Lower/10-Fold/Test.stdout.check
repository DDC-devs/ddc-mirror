
ok

-- Single fold of input series.
module Test with
letrec {
  fold : [k : Rate].Series# k Int# -> Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x1$acc : Ref# Int# = new# [Int#] 0i# in
      let _ : Unit
            = loop# [k]
                  (\(^ : Int#).
                   let s$elem : Int# = next# [Int#] [k] s ^0 in
                   let x0 : Int# = read# [Int#] x1$acc in
                   let ^ : Int# = add# [Int#] x0 s$elem in
                   let _ : Unit = write# [Int#] x1$acc ^0 in
                   ()) in
      let x1 : Int# = read# [Int#] x1$acc in
      x1
}


-- Two folds over the same input series.
module Test with
letrec {
  ffold : [k : Rate].Series# k Int# -> Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x1$acc : Ref# Int# = new# [Int#] 0i# in
      let x4$acc : Ref# Int# = new# [Int#] 1i# in
      let _ : Unit
            = loop# [k]
                  (\(^ : Int#).
                   let s$elem : Int# = next# [Int#] [k] s ^0 in
                   let x0 : Int# = read# [Int#] x1$acc in
                   let ^ : Int# = add# [Int#] x0 s$elem in
                   let _ : Unit = write# [Int#] x1$acc ^0 in
                   let x2 : Int# = read# [Int#] x4$acc in
                   let ^ : Int# = mul# [Int#] x2 s$elem in
                   let _ : Unit = write# [Int#] x4$acc ^0 in
                   ()) in
      let x1 : Int# = read# [Int#] x1$acc in
      let x4 : Int# = read# [Int#] x4$acc in
      let x6 : Int# = add# [Int#] x1 x4 in
      x6
}


-- Three folds over the same input series
module Test with
letrec {
  fffold : [k : Rate].Series# k Int# -> Tuple2# Int# Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x1$acc : Ref# Int# = new# [Int#] 0i# in
      let x4$acc : Ref# Int# = new# [Int#] 1i# in
      let x9$acc : Ref# Int# = new# [Int#] 1i# in
      let _ : Unit
            = loop# [k]
                  (\(^ : Int#).
                   let s$elem : Int# = next# [Int#] [k] s ^0 in
                   let x0 : Int# = read# [Int#] x1$acc in
                   let ^ : Int# = add# [Int#] x0 s$elem in
                   let _ : Unit = write# [Int#] x1$acc ^0 in
                   let x2 : Int# = read# [Int#] x4$acc in
                   let ^ : Int# = mul# [Int#] x2 s$elem in
                   let _ : Unit = write# [Int#] x4$acc ^0 in
                   let x5 : Int# = read# [Int#] x9$acc in
                   let ^ : Int# = mul# [Int#] x5 s$elem in
                   let _ : Unit = write# [Int#] x9$acc ^0 in
                   ()) in
      let x1 : Int# = read# [Int#] x1$acc in
      let x4 : Int# = read# [Int#] x4$acc in
      let x9 : Int# = read# [Int#] x9$acc in
      let x6 : Int# = add# [Int#] x1 x4 in
      let x11 : Tuple2# Int# Int# = T2# [Int#] [Int#] x6 x9 in
      x11
}


-- Fuse map into fold
module Test with
letrec {
  foldMap : [k : Rate].Series# k Int# -> Int#
    = /\(k : Rate).
       \(s : Series# k Int#).
      let x4$acc : Ref# Int# = new# [Int#] 0i# in
      let _ : Unit
            = loop# [k]
                  (\(^ : Int#).
                   let s$elem : Int# = next# [Int#] [k] s ^0 in
                   let x2$elem : Int# = mul# [Int#] s$elem 2i# in
                   let x1 : Int# = read# [Int#] x4$acc in
                   let ^ : Int# = add# [Int#] x1 x2$elem in
                   let _ : Unit = write# [Int#] x4$acc ^0 in
                   ()) in
      let x4 : Int# = read# [Int#] x4$acc in
      x4
}
