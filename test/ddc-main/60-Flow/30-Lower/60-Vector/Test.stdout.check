
ok

module Test with
letrec {
  test : [k : Rate].RateNat# k -> Ref# Float32# -> Series# k Float32# -> Series# k Float32# -> Unit
    = /\(k : Rate).
       \(n : RateNat# k).\(x1 : Ref# Float32#).\(s1 s2 : Series# k Float32#).
      let _
            = split$4# [k] n
                  (\(x3 : RateNat# (Down4# k)).
                   let s1$down = down$4# [k] [Float32#] x3 s1 in
                   let s2$down = down$4# [k] [Float32#] x3 s2 in
                   let x10 = vrep$4# [Float32#] 0.0f32# in
                   let x1$vec
                         = new# [Vec4# Float32#] x10 in
                   let _
                         = loop# [Down4# k]
                               (\(x4 : Nat#).
                                let s1$elem = next$4# [Float32#] [k] s1$down x4 in
                                let s2$elem = next$4# [Float32#] [k] s2$down x4 in
                                let x4$elem = vmul$4# [Float32#] s1$elem s2$elem in
                                let x1$val
                                      = read# [Vec4# Float32#] x1$vec in
                                let x11 = vadd$4# [Float32#] x1$val x4$elem in
                                let _
                                      = write# [Vec4# Float32#] x1$vec x11 in
                                ()) in
                   let x1$res
                         = read# [Vec4# Float32#] x1$vec in
                   let x1$init = read# [Float32#] x1 in
                   let x13 = vproj$4$0# [Float32#] x1$res in
                   let x1$res$0 = add# [Float32#] x1$init x13 in
                   let x15 = vproj$4$1# [Float32#] x1$res in
                   let x1$res$1 = add# [Float32#] x1$res$0 x15 in
                   let x17 = vproj$4$2# [Float32#] x1$res in
                   let x1$res$2 = add# [Float32#] x1$res$1 x17 in
                   let x19 = vproj$4$3# [Float32#] x1$res in
                   let x1$res$3 = add# [Float32#] x1$res$2 x19 in
                   let _ = write# [Float32#] x1 x1$res$3 in
                   ())
                  (\(x7 : RateNat# (Tail4# k)).
                   let s1$tail = tail$4# [k] [Float32#] x7 s1 in
                   let s2$tail = tail$4# [k] [Float32#] x7 s2 in
                   let x1$init = read# [Float32#] x1 in
                   let x1$acc = new# [Float32#] x1$init in
                   let _
                         = loop# [Tail4# k]
                               (\(x9 : Nat#).
                                let s1$elem
                                      = next# [Float32#] [Tail4# k] s1$tail x9 in
                                let s2$elem
                                      = next# [Float32#] [Tail4# k] s2$tail x9 in
                                let x4$elem = mul# [Float32#] s1$elem s2$elem in
                                let x1$val = read# [Float32#] x1$acc in
                                let x20 = add# [Float32#] x1$val x4$elem in
                                let _ = write# [Float32#] x1$acc x20 in
                                ()) in
                   let x1$res = read# [Float32#] x1$acc in
                   let _ = write# [Float32#] x1 x1$res in
                   ()) in
      ()
}
