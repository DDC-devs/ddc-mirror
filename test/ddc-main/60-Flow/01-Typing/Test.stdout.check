ok

-- Primitive type constructors
Int# :: Data
Nat# :: Data
Float32# :: Data
Float64# :: Data
Vec4# :: Data ~> Data
Vec8# :: Data ~> Data
Vec4# Float64# :: Data
Vec8# Float32# :: Data


-- Primitive arithmetic operators
add# :: [^ : Data].^0 -> ^0 -> ^0
sub# :: [^ : Data].^0 -> ^0 -> ^0


-- Primitive vector operators.
vadd$4# :: [^ : Data].Vec4# ^0 -> Vec4# ^0 -> Vec4# ^0
vsub$4# :: [^ : Data].Vec4# ^0 -> Vec4# ^0 -> Vec4# ^0


-- Flow type constructors
Tuple2# :: Data ~> Data ~> Data
Vector# :: Data ~> Data
Series# :: Rate ~> Data ~> Data
Segd# :: Rate ~> Rate ~> Data
Sel1# :: Rate ~> Rate ~> Data
Ref# :: Data ~> Data
World# :: Data
RateNat# :: Rate ~> Data
Down4# :: Rate ~> Rate
Down8# :: Rate ~> Rate


-- Primitive data constructors
T2# :: [^ ^ : Data].^1 -> ^0 -> Tuple2# ^1 ^0


-- Flow operators
create# :: [^ : Rate].[^ : Data].Series# ^1 ^0 -> Vector# ^0
fill# :: [^ : Rate].[^ : Data].Vector# ^0 -> Series# ^1 ^0 -> Unit
map# :: [^ : Rate].[^ ^ : Data].(^1 -> ^0) -> Series# ^2 ^1 -> Series# ^2 ^0
rep# :: [^ : Data].[^ : Rate].^1 -> Series# ^0 ^1
reps# :: [^ ^ : Rate].[^ : Data].Segd# ^2 ^1 -> Series# ^2 ^0 -> Series# ^1 ^0
fold# :: [^ : Rate].[^ ^ : Data].(^1 -> ^0 -> ^1) -> ^1 -> Series# ^2 ^0 -> ^1
folds# :: [^ ^ : Rate].[^ ^ : Data].Segd# ^3 ^2 -> (Int# -> ^1 -> ^0 -> ^1) -> Series# ^3 ^1 -> Series# ^2 ^0 -> Series# ^3 ^1
pack# :: [^ ^ : Rate].[^ : Data].Sel1# ^2 ^1 -> Series# ^2 ^0 -> Series# ^1 ^0


-- Series operators
rateOfSeries# :: [^ : Rate].[^ : Data].Series# ^1 ^0 -> RateNat# ^1
next$4# :: [^ : Data].[^ : Rate].Series# (Down4# ^0) ^1 -> Nat# -> Vec4# ^1
next$8# :: [^ : Data].[^ : Rate].Series# (Down8# ^0) ^1 -> Nat# -> Vec8# ^1
down$8# :: [^ : Data].[^ : Rate].Series# ^0 ^1 -> Series# (Down8# ^0) ^1
tail$8# :: [^ : Data].[^ : Rate].Series# ^0 ^1 -> Series# (Tail8# ^0) ^1

-- Control operators
loop# :: [^ : Rate].(Nat# -> Unit) -> Unit
loopn# :: [^ : Rate].RateNat# ^0 -> (Nat# -> Unit) -> Unit
split$8# :: [^ : Rate].RateNat# ^0 -> (RateNat# (Down8# ^0) -> Unit) -> (RateNat# (Tail8# ^0) -> Unit) -> Unit


-- Store operators
new# :: [^ : Data].^0 -> Ref# ^0
read# :: [^ : Data].Ref# ^0 -> ^0
write# :: [^ : Data].Ref# ^0 -> ^0 -> Unit
vnew# :: [^ : Data].Nat# -> Vector# ^0
vnewR# :: [^ : Data].[^ : Rate].Vector# ^1
vnewN# :: [^ : Data].[^ : Rate].RateNat# ^0 -> Vector# ^1
vread# :: [^ : Data].Vector# ^0 -> Nat# -> ^0
vwrite# :: [^ : Data].Vector# ^0 -> Nat# -> ^0 -> Unit
next# :: [^ : Data].[^ : Rate].Series# ^0 ^1 -> Nat# -> ^1

