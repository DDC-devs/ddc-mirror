ok
ok

-- Set the builder explicitly so we get consistent object layouts.
ok


-- Unboxed literal patterns.
module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0 : Word16#
            = let ^ : Ptr# rT Obj = x in
              let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
              let ^ : Word16#
                    = peek# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        5w16#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0# 6w16# in
            ^1;
        7w16#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0# 8w16# in
            ^1;
        _ 
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word16#] (castPtr# [rT] [Word16#] [Word8#] ^0) 0# 0w16# in
            ^1
      }
}


module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0 : Word32#
            = let ^ : Ptr# rT Obj = x in
              let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
              let ^ : Word32#
                    = peek# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        5w32#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0# 6w32# in
            ^1;
        7w32#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0# 8w32# in
            ^1;
        _ 
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word32#] (castPtr# [rT] [Word32#] [Word8#] ^0) 0# 0w32# in
            ^1
      }
}


module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0 : Word64#
            = let ^ : Ptr# rT Obj = x in
              let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
              let ^ : Word64#
                    = peek# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        5w64#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0# 6w64# in
            ^1;
        7w64#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0# 8w64# in
            ^1;
        _ 
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Word64#] (castPtr# [rT] [Word64#] [Word8#] ^0) 0# 0w64# in
            ^1
      }
}


-- Unboxed Bool pattern.
module Test with
letrec {
  foo : Ptr# rT Obj -> Ptr# rT Obj
    = \(x : Ptr# rT Obj).
      let x0 : Bool#
            = let ^ : Ptr# rT Obj = x in
              let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
              let ^ : Bool#
                    = peek# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0# in
              ^0 in
      case x0 of {
        True#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0# False# in
            ^1;
        False#  
         -> let ^ : Ptr# rT Obj = allocRawSmall [rT] TAG0# 8# in
            let ^ : Ptr# rT Word8# = payloadOfRawSmall [rT] ^0 in
            let _ : Void#
                  = poke# [rT] [Bool#] (castPtr# [rT] [Bool#] [Word8#] ^0) 0# True# in
            ^1
      }
}


-------------------------------------------------------------------------------
-- Trigger errors about unsupported features in the Tetra to Salt conversion.
ok

-- OK: Anonymous binders are not supported by the conversion, but they get
-- auto-namified on the way in.
module Test with
letrec {
  id : Ptr# rT Obj -> Ptr# rT Obj
    = \(x0 : Ptr# rT Obj). x0
}


-- Error: cannot convert type abstraction in this context.
Fragment violation when converting Tetra module to Salt module.
  Cannot convert expression.
    Cannot convert type abstraction in this context.
    The program must be lambda-lifted before conversion.
  
    with: /\(a : Data).
     \(x : a). x


-- Error: cannot convert function application in this context.
Fragment violation when converting Tetra module to Salt module.
  Cannot convert expression.
    Cannot convert function abstraction in this context.
    The program must be lambda-lifted before conversion.
  
    with: \(x : B# Nat#). x


-- Error: partial application of primitive data constructors is not supported.
Fragment violation when converting Tetra module to Salt module.
  Cannot convert expression.
    Partial application of primitive operators is not supported.
  
    with: add# [B# Nat#] x0


-- Error: higher order functions not yet supported.
Fragment violation when converting Tetra module to Salt module.
  Cannot convert expression.
    Higher order functions are not yet supported.
  
    with: f x
