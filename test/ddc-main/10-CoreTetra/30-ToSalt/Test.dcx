:set lang Tetra
:set +Indent +SuppressImports

-- Set the builder explicitly so we get consistent object layouts.
:set builder x86_64-darwin


-- Unboxed literal patterns.
:to-salt..
module Test with letrec
foo     (x : Word16#) : Word16#
 = case x of
        5w16#   -> 6w16#
        7w16#   -> 8w16#
        _       -> 0w16#;;


:to-salt..
module Test with letrec
foo     (x : Word32#) : Word32#
 = case x of
        5w32#   -> 6w32#
        7w32#   -> 8w32#
        _       -> 0w32#;;


:to-salt..
module Test with letrec
foo     (x : Word64#) : Word64#
 = case x of
        5w64#   -> 6w64#
        7w64#   -> 8w64#
        _       -> 0w64#;;


-- Unboxed Bool pattern.
:to-salt..
module Test with letrec
foo     (x : Bool#) : Bool#
 = case x of
       True#   -> False#
       False#  -> True#;;


-------------------------------------------------------------------------------
-- Trigger errors about unsupported features in the Tetra to Salt conversion.
:set Synth

-- OK: Anonymous binders are not supported by the conversion, but they get
-- auto-namified on the way in.
:to-salt..
module Test with letrec
id (^ : Nat#) : Nat#
 = ^0
 ;;


-- Error: cannot convert type abstraction in this context.
:to-salt..
module Test with letrec
id [a : Data] (x : a) : a
 = x

foo (_ : Unit) : Unit
 = do   id (/\a. \(x : a). x)
        ()
;;


-- Error: cannot convert function application in this context.
:to-salt..
module Test with letrec
id [a : Data] (x : a) : a
 = x

foo (_ : Unit) : Unit
 = do   id (\(x : Nat#). x)
        ()
;;


-- Error: partial application of primitive data constructors is not supported.
:to-salt..
module Test with letrec
thing (_ : Unit) : Nat# -> Nat#
 = add# [Nat#] 5#
;;


-- Error: higher order functions not yet supported.
:to-salt..
module Test with letrec
app [a b : Data] (f : a -> b) (x : a) : b
 = f x
;;
