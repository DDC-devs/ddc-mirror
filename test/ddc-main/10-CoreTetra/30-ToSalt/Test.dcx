:set lang Tetra
:set +Indent +SuppressImports

-- Set the builder explicitly so we get consistent object layouts.
:set builder x86_64-darwin


-------------------------------------------------------------------------------
-- Unboxed literal patterns.
:to-salt..
module Test with letrec
foo     (x : Word16#) : Word16#
 = case x of
        5w16#   -> 6w16#
        7w16#   -> 8w16#
        _       -> 0w16#;;


:to-salt..
module Test with letrec
foo     (x : Word32#) : Word32#
 = case x of
        5w32#   -> 6w32#
        7w32#   -> 8w32#
        _       -> 0w32#;;


:to-salt..
module Test with letrec
foo     (x : Word64#) : Word64#
 = case x of
        5w64#   -> 6w64#
        7w64#   -> 8w64#
        _       -> 0w64#;;


-- Unboxed Bool pattern.
:to-salt..
module Test with letrec
foo     (x : Bool#) : Bool#
 = case x of
       True#   -> False#
       False#  -> True#;;


-- Compile nested function via lambda lifting.
:to-salt..
module Test with letrec
id [a : Data] (x : a) : a
 = x

foo (_ : Unit) : Unit
 = do   id (\(x : Nat#). x)
        ()
;;


-- Compile application of anonymous function.
:to-salt..
module Test with letrec
app [a b : Data] (f : a -> b) (x : a) : b
 = f x
;;


-------------------------------------------------------------------------------
-- Trigger errors about unsupported features in the Tetra to Salt conversion.
:set Synth

-- OK: Anonymous binders are namified on the way into the conversion.
:to-salt..
module Test with letrec
id (^ : Nat#) : Nat#
 = ^0
 ;;


-- Error: partial application of primitive data constructors is not supported.
:to-salt..
module Test with letrec
thing (_ : Unit) : Nat# -> Nat#
 = add# [Nat#] 5#
;;


-- Error: partial application if user defined data constructors is not supported.
:to-salt..
module Test 
data Thing where
        Thing : Nat# -> Nat# -> Thing
with letrec
thing (_ : Unit) : Nat# -> Thing
 = Thing 5#
;;


-- Error: partial application of primitive operators is not supported.
:to-salt..
module Test with letrec
thing (_ : Unit) : Nat# -> Nat#
 = add# [Nat#] 5#
;;


-- OK: let expressions in nested contexts are normalized on the way in to
-- the conversion.
:to-salt..
module Test with letrec
id [a : Data] (x : a) : a
 = x

foo (_ : Unit) : Nat#
 = id (let x = 5# in x)
;;


-- Error: higher kinded type arguments are not yet supported.
:to-salt..
module Test 
data List (a : Data) where
        Nil : a -> List a
with letrec
nothin [a : Data ~> Data] [b : Data] (x : b) : b
 = x

foo (_ : Unit) : Nat#
 = nothin [List] [Nat#] 5#
;;


-------------------------------------------------------------------------------
-- Ok: we should be able to convert the Alloc, Read, Write caps,
-- even though conversion for the Ref primops isn't implemented yet.
:to-salt..
module Test with letrec
blerk (_ : Unit) : Nat#
 = private r with { Alloc r; Read r; Write r } in
   do   5#
;;


