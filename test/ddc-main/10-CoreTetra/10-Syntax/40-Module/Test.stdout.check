ok

-- Load a module definition.
module Main 
export value double :: Nat# -> Nat#;
export value main :: Unit -> Unit;
import value two :: Unit -> Nat#;
with
private rt with {w1 : Const rt; w2 : Lazy rt}
let one : Nat# = 1#
letrec {
  main : Unit -> Unit
    = \(_ : Unit).
      private r0 in
      ();
  
  double : Nat# -> Nat#
    = \(x : Nat#).
      mul# [Nat#] x (two ());
  
  thing : [r : Region].Nat# -> Nat#
    = /\(r : Region).
       \(x : Nat#). add# [Nat#] x one
}


-- Load the same module using the offside rule.
module Main 
export value double :: Nat# -> Nat#;
export value main :: Unit -> Unit;
import value two :: Unit -> Nat#;
with
private rt with {w1 : Const rt; w2 : Lazy rt}
let one : Nat# = 1#
letrec {
  main : Unit -> Unit
    = \(_ : Unit).
      private r0 in
      ();
  
  double : Nat# -> Nat#
    = \(x : Nat#).
      mul# [Nat#] x (two ());
  
  thing : [r : Region].Nat# -> Nat#
    = /\(r : Region).
       \(x : Nat#). add# [Nat#] x one
}
