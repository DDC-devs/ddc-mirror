ok


-- Simple addition of literal.
module Test with
letrec {
  f : B# Nat# -> B# Nat#
    = \(x : B# Nat#).
      convert# [U# Nat#] [B# Nat#]
          (add# [U# Nat#]
               (convert# [B# Nat#] [U# Nat#] x)
               (convert# [B# Nat#] [U# Nat#]
                    (convert# [Nat#] [B# Nat#] 1#)))
}


-- Match against literal Bool#, scrutinee needes to be unboxed.
module Test with
letrec {
  neg : B# Bool# -> B# Bool#
    = \(x : B# Bool#).
      case convert# [B# Bool#] [Bool#] x of {
        True#  
         -> convert# [Bool#] [B# Bool#] False#;
        False#  
         -> convert# [Bool#] [B# Bool#] True#
      }
}


-- Match against literal Word32#, with a default pattern.
module Test with
letrec {
  foo : B# Word32# -> B# Word32#
    = \(x : B# Word32#).
      case convert# [B# Word32#] [Word32#] x of {
        5w32#  
         -> convert# [Word32#] [B# Word32#] 6w32#;
        7w32#  
         -> convert# [Word32#] [B# Word32#] 8w32#;
        _ 
         -> convert# [Word32#] [B# Word32#] 0w32#
      }
}


-- Nested case-expressions.
module Test with
letrec {
  f : B# Nat# -> B# Nat# -> B# Nat#
    = \(x y : B# Nat#).
      case convert# [B# Nat#] [Nat#] x of {
        0#  
         -> case convert# [B# Nat#] [Nat#] y of {
              0#  
               -> convert# [Nat#] [B# Nat#] 1#;
              _ 
               -> convert# [Nat#] [B# Nat#] 0#
            };
        _ 
         -> convert# [Nat#] [B# Nat#] 0#
      }
}
