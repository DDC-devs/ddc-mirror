ok


-- Eta-expanding a function is fine.
/\(r : Region)./\(a : Data).
 \(x : Ref# r a). readRef# [r] [a] x
:*: [r : Region].[a : Data].Ref# r a -> S (Read r) a
:!: Pure


-- We can build an abstraction when the effect of the body
-- is suspended.
/\(r : Region)./\(a : Data).
 \(x : Ref# r a).
box
run readRef# [r] [a] x
:*: [r : Region].[a : Data].Ref# r a -> S (Read r) a
:!: Pure


-- Error: impure function body.
When checking expression.
  <batch>:21:31
  Impure Data abstraction
             has effect: Read r
  
  with: \(x : Ref# r a).
        run readRef# [r] [a] x


-- Double the value in a reference.
/\(r : Region).
 \(ref : Ref# r Nat#).
box
let x : Nat#
      = run readRef# [r] [Nat#] ref in
run writeRef# [r] [Nat#] ref (add# [Nat#] x x)
:*: [r : Region].Ref# r Nat# -> S (Read r + Write r) Unit
:!: Pure


-- Pure factorial function.
module Test with
letrec {
  fac : Nat# -> Nat#
    = \(x : Nat#).
      case x of {
        0#  
         -> 1#;
        _ 
         -> add# [Nat#] x
                (fac (sub# [Nat#] x 1#))
      }
}


-- Factorial using a local reference.
module Test with
letrec {
  fac : Nat# -> Nat#
    = \(x : Nat#).
      letregion r with {Alloc r; Read r; Write r} in
      let acc : Ref# r Nat#
            = run allocRef# [r] [Nat#] 0# in
      letrec {
        loop : Nat# -> S (Read r + Write r) Nat#
          = \(i : Nat#).
            box
            case i of {
              0#  
               -> run readRef# [r] [Nat#] acc;
              _ 
               -> let x : Nat#
                        = run readRef# [r] [Nat#] acc in
                  let x' : Nat# = add# [Nat#] x 1# in
                  let _ : Unit
                        = run writeRef# [r] [Nat#] acc x' in
                  run loop (sub# [Nat#] x 1#)
            }
      } in
      run loop x
}


-- Factorial pushing the suspend into the case expression.
module Test with
letrec {
  fac : Nat# -> Nat#
    = \(x : Nat#).
      letregion r with {Alloc r; Read r; Write r} in
      let acc : Ref# r Nat#
            = run allocRef# [r] [Nat#] 0# in
      letrec {
        loop : Nat# -> S (Read r + Write r) Nat#
          = \(i : Nat#).
            case i of {
              0#  
               -> box
                  weakeff [Read r + Write r] in
                  run readRef# [r] [Nat#] acc;
              _ 
               -> box
                  let x : Nat#
                        = run readRef# [r] [Nat#] acc in
                  let x' : Nat# = add# [Nat#] x 1# in
                  let _ : Unit
                        = run writeRef# [r] [Nat#] acc x' in
                  run loop (sub# [Nat#] x 1#)
            }
      } in
      run loop x
}


-- Pure iteratation function.
module Test with
letrec {
  iterate : [a : Data].(a -> a) -> Nat# -> a -> a
    = /\(a : Data).
       \(f : a -> a).\(i : Nat#).\(x : a).
      case i of {
        0#  
         -> x;
        _ 
         -> let x' : a = f x in
            iterate [a] f (sub# [Nat#] i 1#) x'
      }
}


-- Effectful iteration function.
module Test with
letrec {
  iterateS : [e : Effect].[a : Data].(a -> S e a) -> Nat# -> a -> S e a
    = /\(e : Effect)./\(a : Data).
       \(f : a -> S e a).\(i : Nat#).\(x : a).
      box
      case i of {
        0#  
         -> x;
        _ 
         -> let x' : a
                  = run f x in
            run iterateS [e] [a] f (sub# [Nat#] i 1#) x'
      }
}

