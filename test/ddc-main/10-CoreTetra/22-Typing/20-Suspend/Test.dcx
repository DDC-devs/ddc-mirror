:set lang Tetra


-- Eta-expanding a function is fine.
:check..
/\(r : Region). /\(a : Data). \(x : Ref# r a).
readRef# [r] [a] x
;;


-- We can build an abstraction when the effect of the body
-- is suspended.
:check..
/\(r : Region). /\(a : Data). \(x : Ref# r a). 
box run readRef# [r] [a] x
;;


-- Error: impure function body.
:check..
/\(r : Region). /\(a : Data). \(x : Ref# r a). 
run readRef# [r] [a] x
;;


-- Double the value in a reference.
:check..
/\(r : Region). \(ref : Ref# r Nat#).
box do      
        { x = run readRef# [:r Nat#:] ref
        ; run writeRef# [:r Nat#:] ref (add# [Nat#] x x) }
;;


-- Pure factorial function.
:load..
module Test with letrec
fac (x : Nat#) : Nat#
 = case x of
        0#      -> 1#
        _       -> add# [Nat#] x (fac (sub# [Nat#] x 1#))
;;


-- Factorial using a local reference.
:load..
module Test with letrec
fac (x : Nat#) : Nat#
 = letregion r in
   let acc = run allocRef# [:r Nat#:] 0# in
   letrec {
        loop (i : Nat#) : S (Read r + Write r) Nat#
         = box
           case i of
            0# -> do    run readRef# [:r Nat#:] acc

            _  -> do    x       = run readRef# [:r Nat#:] acc
                        x'      = add# [Nat#] x 1#
                        run writeRef# [:r Nat#:] acc x'
                        run loop (sub# [Nat#] x 1#)
   } in run loop x
;;


-- Factorial pushing the suspend into the case expression.
:load..
module Test with letrec
fac (x : Nat#) : Nat#
 = letregion r in
   let acc = run allocRef# [:r Nat#:] 0# in
   letrec {
        loop (i : Nat#) : S (Read r + Write r) Nat#
         = case i of
            0# -> box
                  weakeff [Read r + Write r] in 
                  do    run readRef# [:r Nat#:] acc

            _  -> box
                  do    x       = run readRef# [:r Nat#:] acc
                        x'      = add# [Nat#] x 1#
                        run writeRef# [:r Nat#:] acc x'
                        run loop (sub# [Nat#] x 1#)
   } in run loop x
;;


-- Pure iteratation function.
:load..
module Test with letrec
iterate [a : Data] 
        (f : a -> a) (i : Nat#) (x : a) : a
 = case i of
    0#  -> x
    _   -> do   x'      = f x
                iterate [a] f (sub# [Nat#] i 1#) x'
;;


-- Effectful iteration function.
:load..
module Test with letrec
iterateS [e : Effect] [a : Data] 
         (f : a -> S e a) (i : Nat#) (x : a) : S e a
 = box
   case i of
    0#  -> x
    _   -> do   x'      = run f x
                run iterateS [:e a:] f (sub# [Nat#] i 1#) x'
;;

