:set lang Tetra

-- Check we can produce existential vars.
:synth \x. x


-- Check existing type annots are not trashed during synth.
:synth \(x : Unit). x


-- Check order of existential vars.
:synth \x. \y. \z. y


-- Function application.
:synth \f. \x. f x


-- Multiple use of argument.
:synth \f. \x. f x x


-- Second order.
:synth \f. \g. \x. f (g x)


-- Third order.
:synth \f. \g. \x. f g (g x)


-- Application.
:synth (\f. \g. \x. f g (g x)) (\x. x)


-- Type abstraction.
:synth /\(a : Data). \x. x


-- Abstract type being used as annotation.
:synth /\(a : Data). \(x : a). \y. x


-- Abstract type being used as type argument.
-- Synthesizes annotation on lambda.
:synth /\(r : Region). /\(a : Data). \x. readRef# [r] [a] x


-- Insert two missing type arguments.
:synth \x. readRef# x


-- Insert one missing type argument.
:synth /\(r : Region). \x. readRef# [r] x


-- Check existentials can be solved against a constructor type,
:synth (\x. \y. add# x y) 5#


-- Same thing without the eta expansion.
:synth add# 5#


-- Let bindings.
:synth let x = 5# in add# x


-- Functional let binding.
:synth let f = \x. add# x 2# in f 3#


-- Multiple let bindings.
:synth..
let f = \x. x in
let g = \f. \z. f z in
let h = \x. add# x 2# in
h (g f 5#)
;;


-- As above, but use function binding syntax.
:synth..
let f x   = x in
let g f z = f z in
let h x   = add# x 2# in
h (g f 5#)
;;


-- Synthesis still runs in the right of a binding with a 
-- full type annotation.
:synth..
let f (x : Nat#) : Nat# = (\z. z) x
in  f 5#
;;


-- Synthesis in the right of a letrec with a full annotation.
:synth..
letrec f (x : Nat#) : Nat# = (\z. z) x
in  f 5#
;;


-- Simplest possible case expression.
:synth..
case () of { () -> () }
;;


-- Match against a single constructor.
:synth..
\x. case x of { T2# a b -> (); }
;;


-- Needs synthesis in discrim to add type args.
:synth..
case T2# 2# 3# of 
{ T2# a b -> ();
  _       -> () }
;;


-- Unify types of alternatives.
:synth..
case T2# 2# 3# of
{ T2# a b -> a;
  _       -> 5#; }
;;


-- Kind of type parameter is constrained by type application.
:synth..
/\r. \(x : Ref# r Nat#). x
;;


-- Kind of type parameter is an explicit hole.
:synth /\(r : ?). \(x : Ref# r Int#). x


-- Kind of variable is constrained by its use as a data value.
:synth..
/\a. \(x : a). x
;;


