ok

-- Check we can produce existential vars.
\(x : ?0). x
:*: ?0 -> ?0
:!: Pure


-- Check existing type annots are not trashed during synth.
\(x : Unit). x
:*: Unit -> Unit
:!: Pure


-- Check order of existential vars.
\(x : ?0).\(y : ?2).\(z : ?4). y
:*: ?0 -> ?2 -> ?4 -> ?2
:!: Pure


-- Function application.
\(f : ?4 -> ?5).\(x : ?4). f x
:*: (?4 -> ?5) -> ?4 -> ?5
:!: Pure


-- Multiple use of argument.
\(f : ?4 -> ?4 -> ?7).\(x : ?4). f x x
:*: (?4 -> ?4 -> ?7) -> ?4 -> ?7
:!: Pure


-- Second order.
\(f : ?6 -> ?7).\(g : ?8 -> ?6).\(x : ?8).
f (g x)
:*: (?6 -> ?7) -> (?8 -> ?6) -> ?8 -> ?7
:!: Pure


-- Third order.
\(f : (?10 -> ?11) -> ?11 -> ?9).\(g : ?10 -> ?11).\(x : ?10).
f g (g x)
:*: ((?10 -> ?11) -> ?11 -> ?9) -> (?10 -> ?11) -> ?10 -> ?9
:!: Pure


-- Application.
(\(f : (?10 -> ?10) -> ?10 -> ?10).\(g : ?10 -> ?10).\(x : ?10).
 f g (g x))
    (\(x : ?10 -> ?10). x)
:*: (?10 -> ?10) -> ?10 -> ?10
:!: Pure


-- Type abstraction.
/\(a : Data).
 \(x : ?0). x
:*: [a : Data].?0 -> ?0
:!: Pure


-- Abstract type being used as annotation.
/\(a : Data).
 \(x : a).\(y : ?1). x
:*: [a : Data].a -> ?1 -> a
:!: Pure


-- Abstract type being used as type argument.
-- Synthesizes annotation on lambda.
/\(r : Region)./\(a : Data).
 \(x : Ref# r a). readRef# [r] [a] x
:*: [r : Region].[a : Data].Ref# r a -> S (Read r) a
:!: Pure


-- Insert two missing type arguments.
\(x : Ref# ?2 ?3). readRef# [?2] [?3] x
:*: Ref# ?2 ?3 -> S (Read ?2) ?3
:!: Pure


-- Insert one missing type argument.
/\(r : Region).
 \(x : Ref# r ?2). readRef# [r] [?2] x
:*: [r : Region].Ref# r ?2 -> S (Read r) ?2
:!: Pure


-- Check existentials can be solved against a constructor type.
(\(x y : Nat#). add# [Nat#] x y) 5#
:*: Nat# -> Nat#
:!: Pure
