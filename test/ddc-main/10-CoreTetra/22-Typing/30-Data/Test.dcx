:set lang Tetra


-- Flip it.
:load..
module Test 
data Hotness where
        Hot  : Hotness
        Cold : Hotness

with letrec 
flip (x : Hotness) : Hotness 
 = case x of
        Hot     -> Cold
        Cold    -> Hot
;;


-- List data type.
:load..
module Test 
data List (a : Data) where 
        Nil  : List a
        Cons : a -> List a -> List a

with
letrec {
  add : [a : Data].a -> a -> a
    = /\(a : Data).
       \(x y : a). add# [a] x y;
  
  length : [a : Data].List a -> Nat#
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> 0#;
        Cons x xs
         -> add [Nat#] 1# (length [a] xs)
      }
}
;;


