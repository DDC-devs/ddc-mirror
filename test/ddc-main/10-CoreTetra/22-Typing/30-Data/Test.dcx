:set lang Tetra


-- Hot or not.
:load..
module Test 
data Hotness where
        Hot  : Hotness
        Cold : Hotness

with letrec 
flip (x : Hotness) : Hotness 
 = case x of
        Hot     -> Cold
        Cold    -> Hot
;;


-- Standard List data type.
:load..
module Test 
data List (a : Data) where 
        Nil  : List a
        Cons : a -> List a -> List a

with
letrec {
  add : [a : Data].a -> a -> a
    = /\(a : Data).
       \(x y : a). add# [a] x y;
  
  length : [a : Data].List a -> Nat#
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> 0#;
        Cons x xs
         -> add [Nat#] 1# (length [a] xs)
      }
}
;;


-- Data type containing a polymorphic function.
--   The data constructor has a rank-2 type.
:set Synth
:load..
module Test
data Box where
        Box : ([a : Data]. a -> a) -> Box

with letrec

thing (b : Box)
 = case b of
        Box f   -> f 5#
;;


-- Nested data type.
--   From 'Nested Data Types', Bird and Meertens 1998.
:set Synth
:load..
module Test
data Tuple2 (a b : Data) where
        T2      : a -> b -> Tuple2 a b

data Nest (a : Data) where
        NilN    : Nest a
        ConsN   : a -> Nest (Tuple2 a a) -> Nest a

with letrec
thing (_ : Unit)
 = ConsN 7# (ConsN (T2 1# 2#) (ConsN (T2 (T2 6# 7#) (T2 7# 4#)) NilN))
;;


-- Nested data type.
--   From 'Nested Data Types', Bird and Meertens 1998.
:set Synth
:load..
module Test
data Tuple2 (a b : Data) where
        T2      : a -> b -> Tuple2 a b

data Bush (a : Data) where
        NilB    : Bush a
        ConsB   : a -> Bush (Bush a) -> Bush a

with letrec
thing (_ : Unit)
 = ConsB 4# 
  (ConsB (ConsB 8# 
                (ConsB  (ConsB 5# NilB) 
                        (ConsB (ConsB (ConsB 3# NilB) 
                                      NilB) 
                               NilB)))
         NilB)
;;


-- Error: constructor does not produce the data type.
:set Synth..
:load.. 
module Test
data TheThing where
        C : Nat# -> NotTheThing
with letrec
eatThing (x : TheThing)
 = case x of
        C y     -> y
;;

