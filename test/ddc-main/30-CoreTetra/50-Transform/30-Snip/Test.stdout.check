
ok
ok
ok


-- Snip identity function.
let ^ : Unit -> Unit
      = \(x : Unit). x in
^0 ()


-- Snip identify function with indices.
let ^ : Unit -> Unit
      = \(^ : Unit). ^0 in
^0 ()


-- Snip primitive operator.
add# [Nat#] 1 2


-- Snip nested applications
let ^ : Nat# = add# [Nat#] 1 2 in
let ^ : Nat# = add# [Nat#] 3 4 in
add# [Nat#] ^1 ^0


-- Snip scrutinee of case expression.
let ^ : Unit -> Nat#
      = \(u : Unit).
        let ^ : Nat# = add# [Nat#] 1 2 in
        case ^0 of {
          0  
           -> 1;
          _ 
           -> add# [Nat#] 3 4
        } in
^0 ()
