ok
ok


-- Beta reduce identity function.
()


-- Beta reduce identify function using debruijn indices.
()


-- Beta reduce while avoiding name capture by anonymising conflicting binder.
let x: Unit = () in
λ(^: Unit). x


-- Beta reduce while not substituting into an abstraction that shadows an outer variable name.
let u: Unit = () in
λ(x: Unit). x


-- Beta reduce while avoiding capture of let-bound value variable.
Λ(thing: Region ~> Data).
λ(make: [r: Region].Nat# -> thing r).λ(take: [r: Region].thing r -> Nat#).
let x: Nat# = 5# in
Λ(r0: Region).
let ^: thing r0 = make [r0] x in
add# [Nat#] (take [r0] ^0) x


-- Rewrite outer type binder to avoid shadow conflict on type lambda.
Λ(^: Data).
(Λ(a: Data).
 λ(_: Unit). ()) [^0] ()


-- Rewrite quantifier to avoid capture.
Λ(a: Data).
λ(x: [^: Data].^0 -> a). ()


-- Rewrite variables on types of value binders.
Λ(thing: Region ~> Data).Λ(^: Region).
λ(y: thing ^0). y
