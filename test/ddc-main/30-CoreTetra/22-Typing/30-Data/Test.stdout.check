ok


-- Hot or not.
module Test 
data Hotness where {
        Hot : Hotness;
        Cold : Hotness;
}
with
letrec {
  flip : Hotness -> Hotness
    = \(x : Hotness).
      case x of {
        Hot  
         -> Cold;
        Cold  
         -> Hot
      }
}


-- Standard List data type.
module Test 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  add : [a : Data].a -> a -> a
    = /\(a : Data).
       \(x y : a). add# [a] x y;
  
  length : [a : Data].List a -> Nat#
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> 0;
        Cons (x : a) (xs : List a) 
         -> add [Nat#] 1 (length [a] xs)
      }
}


-- Data type containing a polymorphic function.
--   The data constructor has a rank-2 type.
ok
module Test 
data Box where {
        Box : ([a : Data].a -> a) -> Box;
}
with
letrec {
  thing : Box -> Nat#
    = \(b : Box).
      case b of {
        Box (f : [a : Data].a -> a) 
         -> f [Nat#] 5
      }
}


-- Nested data type.
--   From 'Nested Data Types', Bird and Meertens 1998.
ok
module Test 
data Tuple2 (a : Data) (b : Data) where {
        T2 : a -> b -> Tuple2 a b;
}

data Nest (a : Data) where {
        NilN : Nest a;
        ConsN : a -> Nest (Tuple2 a a) -> Nest a;
}
with
letrec {
  thing : Unit -> Nest Nat#
    = \(_ : Unit).
      ConsN [Nat#] 7
          (ConsN [Tuple2 Nat# Nat#] (T2 [Nat#] [Nat#] 1 2)
               (ConsN [Tuple2 (Tuple2 Nat# Nat#) (Tuple2 Nat# Nat#)]
                    (T2 [Tuple2 Nat# Nat#] [Tuple2 Nat# Nat#] (T2 [Nat#] [Nat#] 6 7) (T2 [Nat#] [Nat#] 7 4))
                    (NilN [Tuple2 (Tuple2 (Tuple2 Nat# Nat#) (Tuple2 Nat# Nat#)) (Tuple2 (Tuple2 Nat# Nat#) (Tuple2 Nat# Nat#))])))
}


-- Nested data type.
--   From 'Nested Data Types', Bird and Meertens 1998.
ok
module Test 
data Tuple2 (a : Data) (b : Data) where {
        T2 : a -> b -> Tuple2 a b;
}

data Bush (a : Data) where {
        NilB : Bush a;
        ConsB : a -> Bush (Bush a) -> Bush a;
}
with
letrec {
  thing : Unit -> Bush Nat#
    = \(_ : Unit).
      ConsB [Nat#] 4
          (ConsB [Bush Nat#]
               (ConsB [Nat#] 8
                    (ConsB [Bush Nat#]
                         (ConsB [Nat#] 5
                              (NilB [Bush Nat#]))
                         (ConsB [Bush (Bush Nat#)]
                              (ConsB [Bush Nat#]
                                   (ConsB [Nat#] 3
                                        (NilB [Bush Nat#]))
                                   (NilB [Bush (Bush Nat#)]))
                              (NilB [Bush (Bush (Bush Nat#))]))))
               (NilB [Bush (Bush Nat#)]))
}


-- Error: constructor does not produce enclosing data type.
ok
Error loading module
  When checking expression.
    Invalid result type for data constructor.
           The data constructor: C
                has result type: NotTheThing
      but the enclosing type is: TheThing


-- Error: constructor does not produce enclosing data type.
--   In future work this could be handled by treating [b : Data] as an
--   existential quantifier, but for now we're happy with an inoffensive
--   error message.
ok
Error loading module
  When checking expression.
    Invalid result type for data constructor.
           The data constructor: C
                has result type: [b : Data].a -> b -> Foo a
      but the enclosing type is: Foo a

