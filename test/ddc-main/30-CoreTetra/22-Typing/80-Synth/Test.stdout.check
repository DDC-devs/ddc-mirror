ok

-- Check we can produce existential vars.
\(x : ?0). x
:*: ?0 -> ?0
:!: Pure


-- Check existing type annots are not trashed during synth.
\(x : Unit). x
:*: Unit -> Unit
:!: Pure


-- Check order of existential vars.
\(x : ?0).\(y : ?2).\(z : ?4). y
:*: ?0 -> ?2 -> ?4 -> ?2
:!: Pure


-- Function application.
\(f : ?4 -> ?5).\(x : ?4). f x
:*: (?4 -> ?5) -> ?4 -> ?5
:!: Pure


-- Multiple use of argument.
\(f : ?4 -> ?4 -> ?7).\(x : ?4). f x x
:*: (?4 -> ?4 -> ?7) -> ?4 -> ?7
:!: Pure


-- Second order.
\(f : ?6 -> ?7).\(g : ?8 -> ?6).\(x : ?8).
f (g x)
:*: (?6 -> ?7) -> (?8 -> ?6) -> ?8 -> ?7
:!: Pure


-- Third order.
\(f : (?10 -> ?11) -> ?11 -> ?9).\(g : ?10 -> ?11).\(x : ?10).
f g (g x)
:*: ((?10 -> ?11) -> ?11 -> ?9) -> (?10 -> ?11) -> ?10 -> ?9
:!: Pure


-- Application.
(\(f : (?10 -> ?10) -> ?10 -> ?10).\(g : ?10 -> ?10).\(x : ?10).
 f g (g x))
    (\(x : ?10 -> ?10). x)
:*: (?10 -> ?10) -> ?10 -> ?10
:!: Pure


-- Type abstraction.
/\(a : Data).
 \(x : ?0). x
:*: [a : Data].?0 -> ?0
:!: Pure


-- Abstract type being used as annotation.
/\(a : Data).
 \(x : a).\(y : ?1). x
:*: [a : Data].a -> ?1 -> a
:!: Pure


-- Check existentials can be solved against a constructor type,
(\(x y : Nat#). add# [Nat#] x y) 5
:*: Nat# -> Nat#
:!: Pure


-- Same thing without the eta expansion.
add# [Nat#] 5
:*: Nat# -> Nat#
:!: Pure


-- Let bindings.
let x : Nat# = 5 in
add# [Nat#] x
:*: Nat# -> Nat#
:!: Pure


-- Functional let binding.
let f : Nat# -> Nat#
      = \(x : Nat#). add# [Nat#] x 2 in
f 3
:*: Nat#
:!: Pure


-- Multiple let bindings.
let f : Nat# -> Nat#
      = \(x : Nat#). x in
let g : (Nat# -> Nat#) -> Nat# -> Nat#
      = \(f : Nat# -> Nat#).\(z : Nat#). f z in
let h : Nat# -> Nat#
      = \(x : Nat#). add# [Nat#] x 2 in
h (g f 5)
:*: Nat#
:!: Pure


-- As above, but use function binding syntax.
let f : Nat# -> Nat#
      = \(x : Nat#). x in
let g : (Nat# -> Nat#) -> Nat# -> Nat#
      = \(f : Nat# -> Nat#).\(z : Nat#). f z in
let h : Nat# -> Nat#
      = \(x : Nat#). add# [Nat#] x 2 in
h (g f 5)
:*: Nat#
:!: Pure


-- Synthesis still runs in the right of a binding with a 
-- full type annotation.
let f : Nat# -> Nat#
      = \(x : Nat#).
        (\(z : Nat#). z) x in
f 5
:*: Nat#
:!: Pure


-- Synthesis in the right of a letrec with a full annotation.
letrec {
  f : Nat# -> Nat#
    = \(x : Nat#).
      (\(z : Nat#). z) x
} in
f 5
:*: Nat#
:!: Pure


-- Simplest possible case expression.
case () of {
  ()  
   -> ()
}
:*: Unit
:!: Pure


-- Match against a single constructor.
\(x : Tuple2# ?2 ?3).
case x of {
  T2# (a : ?2) (b : ?3) 
   -> ()
}
:*: Tuple2# ?2 ?3 -> Unit
:!: Pure


-- Needs synthesis in discrim to add type args.
case T2# [Nat#] [Nat#] 2 3 of {
  T2# (a : Nat#) (b : Nat#) 
   -> ();
  _ 
   -> ()
}
:*: Unit
:!: Pure


-- Unify types of alternatives.
case T2# [Nat#] [Nat#] 2 3 of {
  T2# (a : Nat#) (b : Nat#) 
   -> a;
  _ 
   -> 5
}
:*: Nat#
:!: Pure


-- Kind of 'a' variable is constrained by its use as the type
-- of the body of a data abstraction.
/\(a : Data).
 \(x : a). x
:*: [a : Data].a -> a
:!: Pure


-- Kind of 'a' variable is constrained by its use as the type
-- of the body of a type abstraction.
/\(a : Data).
 \(x : a).
/\(b : Data). x
:*: [a : Data].a -> [b : Data].a
:!: Pure


-- Error: Can't infer the type of a polymorphic expression.
-- This is an inherent limitation of the inference algorithm, as we can't
-- represent a delayed substitution of the type argument into the body
-- of the type for 'f'.
When checking expression.
  <batch>:139:7
  Cannot infer the type of a polymorphic expression.
    Please supply type annotations to constrain the functional
    part to have a quantified type.
  with: f [Unit]


-- As above, but we've given a type for functional parameter.
\(f : [a : Data].a). f [Unit]
:*: ([a : Data].a) -> Unit
:!: Pure


-- Kind of 'a' is defaulted to Data because its used in the type of
-- a function parameter.
/\(a : Data).
 \(x : [b : Data].a). ()
:*: [a : Data].([b : Data].a) -> Unit
:!: Pure


-- As above but synthesise the kind parameter.
/\(a : Data).
 \(x : [b : ?1].a). ()
:*: [a : Data].([b : ?1].a) -> Unit
:!: Pure


-- As above but also return the function parameter.
/\(a : Data).
 \(x : [b : Data].a). x
:*: [a : Data].([b : Data].a) -> [b : Data].a
:!: Pure


-- Result kind of 'f' is defaulted to Data because the result is used
-- as the type of a function parameter.
/\(f : Data ~> Data).
 \(a : f Int#). ()
:*: [f : Data ~> Data].f Int# -> Unit
:!: Pure


-- As above, but with an explicit hole.
/\(f : Data ~> Data).
 \(a : f Int#). ()
:*: [f : Data ~> Data].f Int# -> Unit
:!: Pure


-- As above, but with a more specific kind.
/\(f : Data ~> Data).
 \(a : f Int#). ()
:*: [f : Data ~> Data].f Int# -> Unit
:!: Pure


-- Kind of 'r' is constrained within a witness abstraction.
/\(r : Region).
 \(w : Const r). ()
:*: [r : Region].Const r => Unit
:!: Pure


-- Kind of 'a' is unconstrained, but kind of 'x' is defaulted to Data.
/\(f : ?2 ~> Data)./\(a : ?2).
 \(x : f a). ()
:*: [f : ?2 ~> Data].[a : ?2].f a -> Unit
:!: Pure


-- Kinds of 'e' and 'r' are constrained via the type sum. 
/\(e : Effect)./\(r : Region).
 \(x : S (Write r + e) Nat#). x
:*: [e : Effect].[r : Region].S (Write r + e) Nat# -> S (Write r + e) Nat#
:!: Pure


-- Error: kind mismatch for 'e'
When checking expression.
  Kind mismatch.
                  Expected kind: Effect
   does not match inferred kind: Region
  
  with: e


-- Synthesis works through box casts.
\(f : ?4 -> ?5).\(x : ?4).
box
f x
:*: (?4 -> ?5) -> ?4 -> S Pure ?5
:!: Pure


-- Synthesis works through effect weakenings.
/\(r : Region).
 \(f : ?5 -> ?6).\(x : ?5).
box
weakeff [Read r] in
f x
:*: [r : Region].(?5 -> ?6) -> ?5 -> S (Read r) ?6
:!: Pure

-- Synthesis works through boxings.
\(f : ?4 -> ?5).\(c : S Pure ?4).
box
f
    (run c)
:*: (?4 -> ?5) -> S Pure ?4 -> S Pure ?5
:!: Pure


-- Kind of 'a' is constrained by its use as the type of a let-binding.
/\(a : Data).
 \(x : a).
let y : a = x in
()
:*: [a : Data].a -> Unit
:!: Pure


-- As above, but with transitive let-bindings.
/\(a : Data).
 \(x : a).
let y : a = x in
let z : a = y in
z
:*: [a : Data].a -> a
:!: Pure


-- Kind of 'a' is constrained by its use as the type of the body
-- of a let-binding. 
/\(a : Data).
 \(x : a).
let y : Unit = () in
x
:*: [a : Data].a -> a
:!: Pure


-- Synthesis works through recursive let-bindings.
/\(a : Data).
 \(x : a).
letrec {
  f : Unit -> Unit
    = \(y : Unit). y
} in
x
:*: [a : Data].a -> a
:!: Pure


-- Mutually recursive bindings with no type annotations.
/\(a : Data).
 \(x : a).
letrec {
  f : a -> ?1
    = \(y : a). g y;
  
  g : a -> ?1
    = \(z : a). f z
} in
f x
:*: [a : Data].a -> ?1
:!: Pure


-- Synthesis works through private region introduction.
/\(a : Data).
 \(x : a).
private r in
x
:*: [a : Data].a -> a
:!: Pure


-- Combo 1.
/\(r : Region)./\(e : Effect)./\(g : Region ~> Effect).
 \(f : ?9 -> ?10).\(x : ?9).
box
weakeff [Read r + e + g r] in
f x
:*: [r : Region].[e : Effect].[g : Region ~> Effect].(?9 -> ?10) -> ?9 -> S (Read r + e + g r) ?10
:!: Pure


-- Combo 2.
/\(f : ?3 ~> Data)./\(a : ?3).
 \(x : [w : Data].f a).\(g : f a -> Nat# -> ?11).
let y : Nat# -> ?11
      = g (x [Nat#]) in
y 5
:*: [f : ?3 ~> Data].[a : ?3].([w : Data].f a) -> (f a -> Nat# -> ?11) -> ?11
:!: Pure


-- Combo 3.
/\(f : Data ~> Region)./\(a : Data).
 \(x : [w : Region].a).\(g : a -> Nat# -> ?10).
let y : Nat# -> ?10
      = g
            (x [f a]) in
y 5
:*: [f : Data ~> Region].[a : Data].([w : Region].a) -> (a -> Nat# -> ?10) -> ?10
:!: Pure

