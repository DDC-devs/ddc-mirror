ok


-- Simple addition of literal.
module Test with
letrec {
  f: Nat# -> Nat#
    = 位(x: Nat#).
      convert# [U# Nat#] [Nat#]
          (add## [Nat#]
               (convert# [Nat#] [U# Nat#] x)
               (convert# [Nat#] [U# Nat#]
                    (convert# [U# Nat#] [Nat#] 1#)))
}


-- Match against literal Bool#, scrutinee needes to be unboxed.
module Test with
letrec {
  neg: Bool# -> Bool#
    = 位(x: Bool#).
      case convert# [Bool#] [U# Bool#] x of {
        True##  
         -> convert# [U# Bool#] [Bool#] False##;
        _ 
         -> convert# [U# Bool#] [Bool#] True##
      }
}


-- Match against literal Word32#, with a default pattern.
module Test with
letrec {
  foo: Word32# -> Word32#
    = 位(x: Word32#).
      case convert# [Word32#] [U# Word32#] x of {
        5w32#  
         -> convert# [U# Word32#] [Word32#] 6w32#;
        7w32#  
         -> convert# [U# Word32#] [Word32#] 8w32#;
        _ 
         -> convert# [U# Word32#] [Word32#] 0w32#
      }
}


-- Nested case-expressions.
module Test with
letrec {
  f: Nat# -> Nat# -> Nat#
    = 位(x y: Nat#).
      case convert# [Nat#] [U# Nat#] x of {
        0#  
         -> case convert# [Nat#] [U# Nat#] y of {
              0#  
               -> convert# [U# Nat#] [Nat#] 1#;
              _ 
               -> convert# [U# Nat#] [Nat#] 0#
            };
        _ 
         -> convert# [U# Nat#] [Nat#] 0#
      }
}
