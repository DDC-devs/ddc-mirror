
import Color
import Shape

import Math.Vec3

-- | An object in the world
data Object !e $c	
	= Object { 
		shape	:: Shape;

		-- diffuse color of the object
		color	:: Vec3 Float 	-(!e $c)> Color;

		-- amount of reflectance, [0..1]
		shine 	:: Vec3 Float	-(!e $c)> Float;
	}

project Object 
 with	{ findNearest; consider }


-- | Find the nearest point of intersection for a ray
findNearest 
	:: [Object] 		-- check for intersections on all these objects
	-> Vec3 Float 		-- ray origin
	-> Vec3 Float 		-- ray direction
	-> Maybe 
		( Object	-- object of first intersected
		, Vec3 Float)	-- position of intersection, on surface of object

findNearest objs orig dir
 = do	result	= mapMaybe (consider orig dir) objs
	
	case result of
	 []	-> Nothing

	 _	-> do	(obj, d)	= minimumBy (compare `on` snd) result 
	 		Just (obj, orig + dir .muls d)
		

-- | Check if a ray intersects this object
consider 
	:: Vec3 Float 		-- origin of ray
	-> Vec3 Float 		-- direction of ray
	-> Object 		-- object to test
	-> Maybe ( Object	-- the object that intersected
		 , Float)	-- distance of intersection point from origin

consider orig dir obj
 = case obj .shape .distance orig dir of
 	Nothing	-> Nothing
	Just d	-> Just (obj, d)

