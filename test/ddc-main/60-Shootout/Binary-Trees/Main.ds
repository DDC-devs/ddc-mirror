-- BUGS: This program dies with OOM when maxDepth is set over 15.

{- The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Ben Lippmeier
   adapted from Clean code 
     contributed by Isaac Gouy (Clean novice)
     corrected by John van Groningen
-}

-- | The type of binary trees.
data Tree
	= Leaf
	| Node Int Tree Tree


minDepth = 4
maxDepth = 15

	
main ()
 = do	-- 1. Allocate a binary tree to stretch memory, check it exists, then deallocate it.
	--    For us "deallocate" means leave it to the garbage collector.
	stretchDepth	= maxDepth + 1
	stretchTree	= makeTree 0# (unboxInt32 stretchDepth)
	showItemCheck "stretch" stretchTree stretchDepth

	-- 2. Allocate a long lived tree that will live while the following trees are created.
	longLivedTree	= makeTree 0# (unboxInt32 maxDepth)

	-- 3. Allocate, walk and deallocate many binary trees.
	depthLoop minDepth maxDepth
	
	-- 4. Check that the long lived tree still exists.
	showItemCheck "long lived" longLivedTree maxDepth


showItemCheck :: String -> Tree -> Int -> ()
showItemCheck name tree depth
 = 	print	$ name %% "tree of depth " 	% show depth
		% "\t check: " 			% show (boxInt32 (itemCheck tree))
		% "\n"


showCheck :: Int -> Int -> Int -> ()
showCheck num depth check
 = 	print 	$ show num % "\t trees of depth " % show depth
		% "\t check: " % show check 
		% "\n"


depthLoop :: Int -> Int -> ()	
depthLoop d m
 | d > m	= ()
 \= do	n	= pow 2 (m - d + minDepth);
	check	= sumLoop (unboxInt32 n) (unboxInt32 d) 0#
	showCheck n d check
	depthLoop (d + 2) m


sumLoop :: Int# -> Int# -> Int# -> Int
sumLoop k d acc
 | true# <- primInt32U_eq k 0#	
 = boxInt32 acc

 \= do	check	= itemCheck (makeTree k d)
	check'	= itemCheck (makeTree (0# - 1# * k) d)
	sumLoop (k - 1#) d (acc + check + check')


makeTree :: Int# -> Int# -> Tree
makeTree i 0#	= Leaf
makeTree i d	
 | true# <- primInt32U_eq d 0#
 = Leaf
	
 \= Node (boxInt32 i) 
	(makeTree ((2# * i) - 1#) (d - 1#))
	(makeTree  (2# * i)	  (d - 1#))


itemCheck :: Tree -> Int#
itemCheck Leaf		= 0#
itemCheck (Node x l r)	= unboxInt32 x + itemCheck l - itemCheck r

