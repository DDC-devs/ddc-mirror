--
-- The Computer Language Benchmarks Game
-- http://shootout.alioth.debian.org/
--
-- Contributed by Ben Lippmeier
--   Based on a Haskell version by Don Stewart, Scott West, Sterling Clover.
--
-- TODO: This is mostly done, but we still need to print out the initial sequence.
--
main ()
 = case getArgs () of
 	[strN]		-> run (read strN)
	_		-> run 1000

run n
 = do	g = unfold  "TWO"   "IUB ambiguity codes"    (n*3) (mkCacher $ cdfize iubs) 42
	unfold      "THREE" "Homo sapiens frequency" (n*5) (mkCacher $ cdfize homs) g
	()


------------------------------------------------------------------------
-- lazily unfold the randomised dna sequences

unfold :: String -> String -> Int -> Cacher -> Int -> Int
unfold lab ttl n probs gen
 = do	putStrLn (">" % lab % " " % ttl)
	unroll probs gen n


unroll :: Cacher -> Int -> Int -> Int
unroll probs a b = go a b
 where	go r 0   = r
        go r i
 	 = do	m = min i 60
		case unfoldrN&{FlatString} m (\x -> Just (look probs x)) r of
		 (s, Just r')
		  -> do	putStrLn (SChunk s)
			go r' (i - m)

look cr k
 = do	R d j	= rand k
	c	= choose cr d
 	(choose cr d, j)

------------------------------------------------------------------
-- Chunk the list into parts, still can represent any list of the
-- symbol/probability pairs.
data PPair  = PPair  Char  Float

data Cacher = Cacher PPair PPair PPair PPair [PPair]
            | CacheList [PPair]


mkCacher (p1:p2:p3:p4:ds) = Cacher p1 p2 p3 p4 ds
mkCacher ds 		  = CacheList ds


cdfize :: [(Char,Float)] -> [PPair]
cdfize ds = init cdf' ++ [PPair s 1.0]
 where
	go :: Float -> (Char, Float) -> (Float, (Char, Float))
	go c (sym, prob) = (c + prob, (sym, c + prob))

	cdf' 		 = map (uncurry PPair) $ snd $ mapAccumL go 0.0 ds
	PPair s _        = last cdf'


-- We still query the list in order, but we don't have to continually
-- ``uncons'' everything, we can do the first 4 at a time.
choose :: Cacher -> Float -> Char
choose (Cacher (PPair s1 c1) (PPair s2 c2) (PPair s3 c3) (PPair s4 c4) ds) p
	| p <= c1	= s1
	| p <= c2	= s2
	| p <= c3	= s3
 	| p <= c4	= s4
	| otherwise	= chooseCdf ds p

choose (CacheList ds) p = chooseCdf ds p

chooseCdf :: [PPair] -> Float -> Char
chooseCdf (PPair b f : xs) p
	| p < f		= b
	| otherwise	= chooseCdf xs p


-- Random number generation ---------------------------------------------------
im, ia, ic :: Int
im  = 139968
ia  = 3877
ic  = 29573

data R = R Float Int

rand :: Int -> R
rand seed
 = do	imd	= toFloat im
	newseed	= (seed * ia + ic) `mod` im
	newran	=  1.0 * toFloat newseed / imd
	R newran newseed


-- Data -----------------------------------------------------------------------
alu 	= "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"
        % "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"
        % "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"
        % "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"
        % "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"
        % "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"
        % "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA"

iubs, homs :: [(Char, Float)]
iubs = 	[ ('a',0.27), ('c',0.12), ('g',0.12), ('t',0.27), ('B',0.02)
	, ('D',0.02), ('H',0.02), ('K',0.02), ('M',0.02), ('N',0.02)
	, ('R',0.02), ('S',0.02), ('V',0.02), ('W',0.02), ('Y',0.02) ]

homs =	[ ('a',0.3029549426680), ('c',0.1979883004921)
        , ('g',0.1975473066391), ('t',0.3015094502008) ]

