ok

ok

-- Anonymize lambdas and applications.
/\(^ : Region). \(^ ^ : Int ^0). addInt [^0] [^0] [^0] ^1 ^0


-- Anonymize lambdas and applications.
-- Spec and value binder have the same name.
/\(^ : Region). \(^ : Int ^0). addInt [^0] [^0] [^0] ^0 ^0


-- Single let
let ^ : Unit = () in ^0


-- Multiple lets
let ^ : Unit = () in let ^ : Int r1# = 5 [r1#] () in ^1


-- letregion
letregion ^ with {^ : Const ^0} in addInt [^0] [^0] [r0#] (2 [^0] ()) (2 [^0] ())


-- letregion and lets
letregion ^ with {^ : Const ^0} in let ^ : Int ^0 = 2 [^0] () in let ^ : Int ^0 = 3 [^0] () in addInt [^0] [^0] [r0#] ^1 ^0


-- case expressions
\(^ : List r0# (Int r1#)). case ^0 of { Nil -> ^0; Cons (^ : Int r1#) (^ : List r0# (Int r1#)) -> Cons [r0#] [Int r1#] ^1 ^2 }


-- letrec expressions
letrec { ^ : [^ : Region]. [^ : Data].List ^1 ^0 -(Pure | Use ^1)> List ^1 ^0 -(Read ^1 + Alloc ^1 | Use ^1 + DeepUse ^0)> List ^1 ^0 = /\(^ : Region). /\(^ : Data). \(^ ^ : List ^1 ^0). case ^1 of { Nil -> ^0; Cons (^ : ^0) (^ : List ^1 ^0) -> Cons [^1] [^0] ^1 (^4 [^1] [^0] ^0 ^2) } } in ()


-- Mixed spec and value binders.
let ^ : [^ ^ : Region].Unit -(Read ^1 + Alloc ^0 + Alloc ^1 | Use ^0 + Use ^1)> Pair ^1 (Int ^1) (Int ^0) = /\(^ ^ : Region). \(_ : Unit). let ^ : Int ^1 = 5 [^1] () in let ^ : Int ^0 = letregion ^ in addInt [^2] [^0] [^1] ^0 (1 [^0] ()) in Pr [^1] [Int ^1] [Int ^0] ^1 ^0 in letregion ^ in letregion ^ in letcase Pr (_ : Int ^1) (^ : Int ^0) = ^0 [^1] [^0] () in copyInt [^0] [r0#] ^0


-- Mixed spec and value and witness binders, 
-- With spec binders interspersed with the others, and a non-binder.
let ^ : [^ : Region].Const ^0 => Global ^0 => [^ : Region].Const ^0 => Global ^0 => Lazy ^0 => Unit -(Alloc ^1 | Use ^1)> Pair ^1 (Int ^1) (Int ^0) = /\(^ : Region). \(^ : Const ^0). \(^ : Global ^0). /\(^ : Region). \(^ : Const ^0). \(^ : Global ^0). \(^ : Lazy ^0). \(_ : Unit). let ^ : Int ^1 = 5 [^1] () in let ^ : Int ^0 = purify <read [^1] ^5 & alloc [^1] ^5 & alloc [^0] ^3> in forget <use [^1] ^4 & use [^0] ^2> in letregion ^ in addInt [^2] [^0] [^1] ^0 (1 [^0] ()) in Pr [^1] [Int ^1] [Int ^0] ^1 ^0 in letregion ^ with {^ : Const ^0; ^ : Global ^0} in letregion ^ with {^ : Const ^0; ^ : Global ^0; ^ : Lazy ^0} in letcase Pr (_ : Int ^1) (^ : Int ^0) = ^5 [^1] <^4> <^3> [^0] <^2> <^1> <^0> () in copyInt [^0] [r0#] ^0


-- Mixed spec and value binders.
let ^ : [^ ^ : Region].Unit -(Alloc ^1 | Use ^1)> Int ^1 = /\(^ ^ : Region). \(_ : Unit). 5 [^1] () in ()

