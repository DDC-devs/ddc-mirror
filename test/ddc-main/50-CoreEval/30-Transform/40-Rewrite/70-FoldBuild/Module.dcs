module Module
export {

foldr   : [a b : Data]. [r : Region].
        [ek1 ek2 ez : Effect]. [ck1 ck2 cz : Closure].
        (a -(ek1|ck1)> b -(ek2|ck2)> b) -(Pure | Use r)> 
        (Unit -(ez|cz)> b)              -(Pure | Use r + ck1)>
        (List r a)                      -(Read r + ek1 + ek2 + ez | ck1 + cz + Use r)>
        b;


build : [a : Data]. [r : Region]. [eg1 eg2 : Effect]. [cg1 cg2 : Closure].
    ([b : Data]. [ec1 ec2 en : Effect]. [cc1 cc2 cn : Closure].
	 (a -(ec1|cc1)> b -(ec2|cc2)> b)
	-(eg1|cg1)>
	 (Unit -(en|cn)> b)
	-(eg2+ec1+ec2+en|cg2+cc1)>
	 b)
    -(eg1+eg2 + Alloc r | Use r)> List r a;

foldrAndBuild :
    [a b : Data]. [r : Region].
    [ek1 ek2 ez : Effect]. [ck1 ck2 cz : Closure].
    [eg1 eg2 : Effect]. [cg1 cg2 : Closure].

	(a -(ek1|ck1)> b -(ek2|ck2)> b)
    -(Pure | Use r)>	(Unit -(ez|cz)> b)

-- TODO very strange issue here: if use names 'ec1' instead of 'ec1FB' they parse as anonymous & then references get mixed up
    -(Pure | Use r + ck1)>  ([bFB : Data]. [ec1FB ec2FB enFB : Effect]. [cc1FB cc2FB cnFB : Closure].
	     (a -(ec1FB|cc1FB)> bFB -(ec2FB|cc2FB)> bFB)
	    -(eg1|cg1)>
	     (Unit -(enFB|cnFB)> bFB)
	    -(eg2+ec1FB+ec2FB+enFB|cg2+cc1FB)>
	     bFB)
    -(Read r + ek1 + ek2 + ez + eg1 + eg2 + Alloc r | ck1 + cz + Use r)>
    b;

compose : [a b c : Data]. [ef eg : Effect]. [cf cg : Closure].
       (b -(ef|cf)> c)
    -> (a -(eg|cg)> b)
    -(Pure      | cf)>
	a
    -(ef + eg | cf + cg)>
	c;

plus :
    Int r0#
    -( Pure | Use r0#)>
    Int r0#
    -(Read r0# + Alloc r0# | Use r0#)>
    Int r0#;

zero :
    Unit
    -(Alloc r0# | Use r0#)>
    Int r0#;

pred :
    Int r0#
    -(Read r0# + Alloc r0# | Use r0#)>
    Int r0#;

countZ :
    Int r0#
    -(Pure | Use r0#)>
    ([b : Data].
    [ec1 ec2 en : Effect].
    [cc1 cc2 cn : Closure].
    (Int r0# -(ec1|cc1)> b -(ec2|cc2)> b)
    -(Pure | Use r0#)>
    (Unit -(en|cn)> b)
    -(Read r0# + Alloc r0# + ec1 + ec2 + en | cc1 + Use r0#)>
    b);

double :
    Int r0#
    -(Alloc r0# + Read r0# | Use r0#)>
    Int r0#;

even :
    Int r0#
    -(Alloc r0# + Read r0# | Use r0# )>
    Int r0#;

-- TODO double
}
with letrec

foldr  [a b : Data] [r : Region]
    [ek1 ek2 ez : Effect] [ck1 ck2 cz : Closure]
    (k : a -(ek1|ck1)> b -(ek2|ck2)> b)
    { Pure | Use r }
    (z : Unit -(ez|cz)> b)
    { Pure | Use r + ck1 }
    (xs: List r a)
    { Read r + ek1 + ek2 + ez | ck1 + cz + Use r }
    : b
    = case xs of {
	Nil -> z ();
	Cons x xs' ->
	    k x (foldr [:a b r ek1 ek2 ez ck1 ck2 cz:] k z xs')
    }

build [a : Data] [r : Region] [eg1 eg2 : Effect] [cg1 cg2 : Closure]
    (g : [b : Data]. [ec1 ec2 en : Effect]. [cc1 cc2 cn : Closure].
	 (a -(ec1|cc1)> b -(ec2|cc2)> b)
	-(eg1|cg1)>
	 (Unit -(en|cn)> b)
	-(eg2+ec1+ec2+en|cg2+cc1)>
	 b)
    { eg1+eg2 + Alloc r | Use r }
    : List r a
    = g [List r a] [Pure] [Alloc r] [Alloc r] [:Empty (DeepUse a) Empty:]
	(Cons [:r a:]) (Nil [:r a:])

compose [a b c : Data] [ef eg : Effect] [cf cg : Closure]
    (f : b -(ef|cf)> c) (g : a -(eg|cg)> b)
	    { Pure      | cf }
    (x : a) { ef + eg | cf + cg }
	    : c
 = f (g x)

foldrAndBuild [a b : Data] [r : Region]
    [ek1 ek2 ez : Effect] [ck1 ck2 cz : Closure]
    [eg1 eg2 : Effect] [cg1 cg2 : Closure]
    (k : a -(ek1|ck1)> b -(ek2|ck2)> b)
    { Pure | Use r }
    (z : Unit -(ez|cz)> b)
    { Pure | Use r + ck1 }
    (g : [bFB : Data]. [ec1FB ec2FB enFB : Effect]. [cc1FB cc2FB cnFB : Closure].
	     (a -(ec1FB|cc1FB)> bFB -(ec2FB|cc2FB)> bFB)
	    -(eg1|cg1)>
	     (Unit -(enFB|cnFB)> bFB)
	    -(eg2+ec1FB+ec2FB+enFB|cg2+cc1FB)>
	     bFB)
    {Read r + ek1 + ek2 + ez + eg1 + eg2 + Alloc r | ck1 + cz + Use r}
    : b
    = foldr [:a b r ek1 ek2 ez ck1 ck2 cz:] k z 
      (g [List r a] [Pure] [Alloc r] [Alloc r] [:Empty (DeepUse a) Empty:]
	(Cons [:r a:]) (Nil [:r a:]))


plus
    (a : Int r0#)
    { Pure | Use r0# }
    (b : Int r0#)
    { Read r0# + Alloc r0# | Use r0# }
    : Int r0#
    = addInt [:r0# r0# r0#:] a b

zero
    (u : Unit)
    { Alloc r0# | Use r0# }
    : Int r0# = 0 [r0#] ()

pred
    (a : Int r0#)
    { Read r0# + Alloc r0# | Use r0# }
    : Int r0# = subInt [:r0# r0# r0#:] a (1 [r0#] ())

countZ (m : Int r0#)
       { Pure | Use r0# }
       [b : Data]
       [ec1 ec2 en : Effect]
       [cc1 cc2 cn : Closure]
       (k : Int r0# -(ec1|cc1)> b -(ec2|cc2)> b)
       { Pure | Use r0# }
       (z : Unit -(en|cn)> b)
       { Read r0# + Alloc r0# + ec1 + ec2 + en | cc1 + Use r0# }
       : b
    = case m of {
	0	-> z ();
	_	-> k m (countZ (pred m) [:b ec1 ec2 en cc1 cc2 cn:] k z)
	}


double (c : Int r0#)
    {Alloc r0# + Read r0# | Use r0# }
    : Int r0#
    = mulInt [:r0# r0# r0#:] c (2 [r0#] ())

even (c : Int r0#)
    {Alloc r0# + Read r0# | Use r0# }
    : Int r0#
    = weakeff [Read r0#]
      in
      0 [r0#] ()

