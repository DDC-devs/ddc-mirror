module FoldBuild
export {

foldr   : [a b : Data]. [r : Region].
        [ek1 ek2 ez : Effect]. [ck1 ck2 cz : Closure].
        (a -(ek1|ck1)> b -(ek2|ck2)> b) -(Pure | Use r)> 
        (Unit -(ez|cz)> b)              -(Pure | Use r + ck1)>
        (List r a)                      -(Read r + ek1 + ek2 + ez | ck1 + cz + Use r)>
        b;

build : [a : Data]. [r : Region]. [eg1 eg2 : Effect]. [cg1 cg2 : Closure].
    ([b : Data]. [ec1 ec2 en : Effect]. [cc1 cc2 cn : Closure].
	 (a -(ec1|cc1)> b -(ec2|cc2)> b)
	-(eg1|cg1)>
	 (Unit -(en|cn)> b)
	-(eg2+ec1+ec2+en|cg2+cc1)>
	 b)
    -(eg1+eg2 + Alloc r | Use r)> List r a;

}
with letrec

foldr  [a b : Data] [r : Region]
    [ek1 ek2 ez : Effect] [ck1 ck2 cz : Closure]
    (k : a -(ek1|ck1)> b -(ek2|ck2)> b)
    { Pure | Use r }
    (z : Unit -(ez|cz)> b)
    { Pure | Use r + ck1 }
    (xs: List r a)
    { Read r + ek1 + ek2 + ez | ck1 + cz + Use r }
    : b
    = case xs of {
	Nil -> z ();
	Cons x xs' ->
	    k x (foldr [:a b r ek1 ek2 ez ck1 ck2 cz:] k z xs')
    }

build [a : Data] [r : Region] [eg1 eg2 : Effect] [cg1 cg2 : Closure]
    (g : [b : Data]. [ec1 ec2 en : Effect]. [cc1 cc2 cn : Closure].
	 (a -(ec1|cc1)> b -(ec2|cc2)> b)
	-(eg1|cg1)>
	 (Unit -(en|cn)> b)
	-(eg2+ec1+ec2+en|cg2+cc1)>
	 b)
    { eg1+eg2 + Alloc r | Use r }
    : List r a
    = g [List r a] [Pure] [Alloc r] [Alloc r] [:Empty (DeepUse a) Empty:]
	(Cons [:r a:]) (Nil [:r a:])

