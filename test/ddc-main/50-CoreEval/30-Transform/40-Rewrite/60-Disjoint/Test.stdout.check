ok
ok, added mapMap

ok
ok

-- should rewrite, just reading
weakeff [Read r0# + Alloc r0#] in
weakclo {[r0#]} in
map [r0#] [r0#] [Int r0#] [Int r0#] [Read r0# + Alloc r0#] [Use r0#]
    (compose [Int r0#] [Int r0#] [Int r0#] [Read r0# + Alloc r0#] [Read r0# + Alloc r0#] [Use r0#] [Use r0#]
         (\(^ : Int r0#).
          addInt [r0#] [r0#] [r0#] ^0 (1 [r0#] ()))
         (\(^ : Int r0#).
          addInt [r0#] [r0#] [r0#] ^0 (1 [r0#] ())))
    (Cons [r0#] [Int r0#] (1 [r0#] ())
         (Cons [r0#] [Int r0#] (2 [r0#] ())
              (Nil [r0#] [Int r0#] ())))

-- a write and a read from same region, no rewrite.
private rMut with {wMut : Mutable rMut} in
let mutabl : Int rMut = 5 [rMut] () in
map [r0#] [r0#] [Int r0#] [Int r0#] [Read rMut + Alloc r0#] [Use rMut + Use r0#]
    (\(y : Int r0#). copyInt [rMut] [r0#] mutabl)
    (map [r0#] [r0#] [Int r0#] [Int r0#] [Read r0# + Write rMut] [Use rMut + Use r0#]
         (\(z : Int r0#).
          let _ : Unit = updateInt [rMut] [r0#] <wMut> mutabl z in
          z)
         (Cons [r0#] [Int r0#] (1 [r0#] ())
              (Cons [r0#] [Int r0#] (2 [r0#] ())
                   (Nil [r0#] [Int r0#] ()))))

-- a write and a read from different regions - do rewrite
private rMut with {wMut : Mutable rMut} in
let mutabl : Int rMut = 5 [rMut] () in
weakeff [Read r0# + Write rMut + Alloc r0#] in
weakclo {[r0#]} in
map [r0#] [r0#] [Int r0#] [Int r0#] [Read r0# + Write rMut + Alloc r0#] [Use rMut + Use r0#]
    (compose [Int r0#] [Int r0#] [Int r0#] [Read r0# + Alloc r0#] [Read r0# + Write rMut] [Use r0#] [Use rMut + Use r0#]
         (\(^ : Int r0#).
          addInt [r0#] [r0#] [r0#] ^0 (1 [r0#] ()))
         (\(^ : Int r0#).
          let _ : Unit = updateInt [rMut] [r0#] <wMut> mutabl ^0 in
          ^0))
    (Cons [r0#] [Int r0#] (1 [r0#] ())
         (Cons [r0#] [Int r0#] (2 [r0#] ())
              (Nil [r0#] [Int r0#] ())))

-- a write and a read from different regions, but lambda-bound - don't rewrite
/\(rMut : Region).
 \(wMut : Mutable rMut).\(dummy : Int r0#).
let mutabl : Int rMut = 5 [rMut] () in
map [r0#] [r0#] [Int r0#] [Int r0#] [Read r0# + Alloc r0#] [Use r0#]
    (\(y : Int r0#).
     addInt [r0#] [r0#] [r0#] y (1 [r0#] ()))
    (map [r0#] [r0#] [Int r0#] [Int r0#] [Read r0# + Write rMut] [Use rMut + Use r0#]
         (\(z : Int r0#).
          let _ : Unit = updateInt [rMut] [r0#] <wMut> mutabl z in
          z)
         (Cons [r0#] [Int r0#] (1 [r0#] ())
              (Cons [r0#] [Int r0#] (2 [r0#] ())
                   (Nil [r0#] [Int r0#] ()))))

-- lambda-bound different regions, but with a Distinctness witness. do rewrite.
/\(rMut : Region).
 \(wMut : Mutable rMut).\(wDistinct : Distinct2 r0# rMut).\(dummy : Int r0#).
let mutabl : Int rMut = 5 [rMut] () in
map [r0#] [r0#] [Int r0#] [Int r0#] [Read r0# + Alloc r0#] [Use r0#]
    (\(y : Int r0#).
     addInt [r0#] [r0#] [r0#] y (1 [r0#] ()))
    (map [r0#] [r0#] [Int r0#] [Int r0#] [Read r0# + Write rMut] [Use rMut + Use r0#]
         (\(z : Int r0#).
          let _ : Unit = updateInt [rMut] [r0#] <wMut> mutabl z in
          z)
         (Cons [r0#] [Int r0#] (1 [r0#] ())
              (Cons [r0#] [Int r0#] (2 [r0#] ())
                   (Nil [r0#] [Int r0#] ()))))

