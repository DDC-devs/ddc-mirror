-- Check that HeadRead in result effect is crushed.
let xx : List r0# (Int r0#)
      = Nil [r0#] [Int r0#] () in
case xx of {
  Nil  
   -> 0 [r0#] ();
  Cons (x : Int r0#) (xs : List r0# (Int r0#)) 
   -> x
}
:*: Int r0#
:!: Read r0# + Alloc r0#
:$: Use r0#


-- Check that the HeadRead effect is crushed out when
-- the read is on a type with no head region.
case () of {
  ()  
   -> ()
}
:*: Unit
:!: Pure
:$: Empty


-- Check substituted effects are crushed under HeadRead.
\(f : [a : Data].a -(HeadRead a | DeepUse a)> a).
f [Int r0#] (5 [r0#] ())
:*: ([a : Data].a -(HeadRead a | DeepUse a)> a) -(Read r0# + Alloc r0# | Use r0#)> Int r0#
:!: Pure
:$: Use r0#


-- Check substituted effects are crushed under DeepRead
\(f : [a : Data].a -(DeepRead a | DeepUse a)> a).
f [Int r0#] (5 [r0#] ())
:*: ([a : Data].a -(DeepRead a | DeepUse a)> a) -(Read r0# + Alloc r0# | Use r0#)> Int r0#
:!: Pure
:$: Use r0#


-- Check substituted effects are crushed under DeepWrite
\(f : [a : Data].a -(DeepWrite a | DeepUse a)> a).
f [Int r0#] (5 [r0#] ())
:*: ([a : Data].a -(DeepWrite a | DeepUse a)> a) -(Write r0# + Alloc r0# | Use r0#)> Int r0#
:!: Pure
:$: Use r0#


-- Check substituted effects are crushed under DeepAlloc
\(f : [a : Data].a -(DeepAlloc a | DeepUse a)> a).
f [Int r0#] (5 [r0#] ())
:*: ([a : Data].a -(DeepAlloc a | DeepUse a)> a) -(Alloc r0# | Use r0#)> Int r0#
:!: Pure
:$: Use r0#


-- Using a polymorphic addition function requires DeepRead and DeepAlloc
letrec {
  double : [a : Data].(a -> a -(DeepRead a + DeepAlloc a | DeepUse a)> a) -> a -(DeepRead a + DeepAlloc a | Empty)> a
    = /\(a : Data).
       \(add : a -> a -(DeepRead a + DeepAlloc a | DeepUse a)> a).\(x : a). add x x
} in
double [Int r0#] (addInt [r0#] [r0#] [r0#]) (5 [r0#] ())
:*: Int r0#
:!: Read r0# + Alloc r0#
:$: Use r0#
