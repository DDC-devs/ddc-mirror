-- Parse private with no witnesses
:check private r1 in ()


-- Parse private with one witness.
:check private r1 with { w1 : Const r1 } in ()


-- Parse private with multiple witnesses.
:check private r1 with { w1 : Const r1; w2 : Manifest r1 } in ()


-- Use the bound region in the body of the expression.
:check private r1 in addInt [:r1 r1 r2#:] (2 [r1] ()) (3 [r1] ())


-- As above, but with debruijn indices.
:check private ^  in addInt [:^0 ^0 r2#:] (2 [^0] ()) (3 [^0] ())


-- Error: withregion must contain a region variable or constructor.
:check (/\(e:Effect). withregion e in ())


-- Error: private cannot shadow region variables that are already in the
-- environment because the new witnesses may conflict with the old ones.
:check..
private r1 with {w1 : Const r1}   in
let x : Int r1 = 5 [r1] () in
private r1 with {w1 : Mutable r1} in
updateInt [:r1 r1:] {w1} x (0 [r1] ());;


-- Error: private can't shadow region variables that are already in the
-- environment.
:check..
/\(r : Region). 
 \(x : Int r).
 private r with {w1 : Mutable r} in
 updateInt [:r r:] {w1} x (0 [r] ());;


-- Error: bound region variable is free in the type of the body of a private.
:check private r1 in 4 [r1] ()


-- Error: bound region is free in the effect of a returned function.
:check..
private r1 with {w1 : Const r1} in
\(x:Unit). (addInt [:r1 r1 r2#:] (2 [r1] ()) (3 [r1] ()));;


-- Error: region variable appears in closure term
:check..
private r1 in
let z  = 5 [r1] () in
\(x : Unit).
 let xs = Cons [r0#] [Int r1] z (Nil [r0#] [Int r1] ()) in
 case xs of {
        Nil      -> 1 [r0#] ();
        Cons _ _ -> 2 [r0#] ();
 };;


-- Error: witness types with a private must use explicit type constructors.
:check..
/\(c : Region ~> Witness).
private r1 with { w : c r1 } in
();;


-- Parse private with witness for distinctness
:check..
private r1                             in
private r2 with { w1: Distinct2 r1 r2 } in ();;


-- Error: distinct witness must have as one argument the region introduced with
-- this private, and a bound region variable in the environment for the other.
:check..
private r1                             in
private r2 with { w1: Distinct2 r2 r2 } in ();;


-- Parse private with witness for multi-way distinctness
:check..
private r1 r2 r3 with { w : Distinct3 r1 r2 r3 } in ();;


-- Error: distinct_n for n > 2 can only be used for regions introduced by the current privates
:check..
private r1 in
private r2 r3 with {w : Distinct3 r1 r2 r3} in ();;


-- #255: Letregions with deBruijn indices
:check..
private ^ ^ with { w : Distinct ^1 ^0 } in ();;


