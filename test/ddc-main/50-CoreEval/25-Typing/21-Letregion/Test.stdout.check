-- Parse letregion with no witnesses
letregion r1 in
()
:*: Unit
:!: Pure
:$: Empty


-- Parse letregion with one witness.
letregion r1 with {w1 : Const r1} in
()
:*: Unit
:!: Pure
:$: Empty


-- Parse letregion with multiple witnesses.
letregion r1 with {w1 : Const r1; w2 : Manifest r1} in
()
:*: Unit
:!: Pure
:$: Empty


-- Use the bound region in the body of the expression.
letregion r1 in
addInt [r1] [r1] [r2#] (2 [r1] ()) (3 [r1] ())
:*: Int r2#
:!: Alloc r2#
:$: Use r2#


-- As above, but with debruijn indices.
letregion ^ in
addInt [^0] [^0] [r2#] (2 [^0] ()) (3 [^0] ())
:*: Int r2#
:!: Alloc r2#
:$: Use r2#


-- Error: withregion must contain a region variable or constructor.
When checking expression.
  <batch>:22:17
  Withregion handle does not have region kind.
     Region var or ctor: e
               has kind: Effect
         but it must be: %
  
  with: withregion e in
        ()


-- Error: letregion cannot shadow region variables that are already in the
-- environment because the new witnesses may conflict with the old ones.
When checking expression.
  <batch>:30:1
  Region variables shadow existing ones.
             Region variables: r1 : Region
       are already in environment
  
  with: letregion r1 with {w1 : Mutable r1} in
        updateInt [r1] [r1] <w1> x (0 [r1] ())


-- Error: letregion can't shadow region variables that are already in the
-- environment.
When checking expression.
  <batch>:39:2
  Region variables shadow existing ones.
             Region variables: r : Region
       are already in environment
  
  with: letregion r with {w1 : Mutable r} in
        updateInt [r] [r] <w1> x (0 [r] ())


-- Error: bound region variable is free in the type of the body of a letregion.
When checking expression.
  <batch>:44:2
  Region variables escape scope of letregion.
         The region variables: r1 : Region
     is free in the body type: Int r1
  
  with: letregion r1 in
        4 [r1] ()


-- Error: bound region is free in the effect of a returned function.
When checking expression.
  <batch>:49:1
  Region variables escape scope of letregion.
         The region variables: r1 : Region
     is free in the body type: Unit -(Read r1 + Alloc r1 + Alloc r2# | Use r1 + Use r2#)> Int r2#
  
  with: letregion r1 with {w1 : Const r1} in
        \(x : Unit).
        addInt [r1] [r1] [r2#] (2 [r1] ()) (3 [r1] ())


-- Error: region variable appears in closure term
When checking expression.
  <batch>:55:1
  Region variables escape scope of letregion.
         The region variables: r1 : Region
     is free in the body type: Unit -(Read r0# + Alloc r0# | Use r1 + Use r0#)> Int r0#
  
  with: letregion r1 in
        let z = 5 [r1] () in
        \(x : Unit).
        let xs
              = Cons [r0#] [Int r1] z
                    (Nil [r0#] [Int r1] ()) in
        case xs of {
          Nil  
           -> 1 [r0#] ();
          Cons _ _ 
           -> 2 [r0#] ()
        }


-- Error: witness types with a letregion must use explicit type constructors.
When checking expression.
  <batch>:68:1
  Invalid witness type with letregion.
            The witness: w : c r1
    cannot be created with a letregion
  
  with: letregion r1 with {w : c r1} in
        ()


-- Parse letregion with witness for distinctness
letregion r1 in
letregion r2 with {w1 : Distinct2 r1 r2} in
()
:*: Unit
:!: Pure
:$: Empty


-- Error: distinct witness must have as one argument the region introduced with
-- this letregion, and a bound region variable in the environment for the other.
When checking expression.
  <batch>:82:1
  Invalid witness type with letregion.
            The witness: w1 : Distinct2 r2 r2
    cannot be created with a letregion
  
  with: letregion r2 with {w1 : Distinct2 r2 r2} in
        ()


-- Parse letregion with witness for multi-way distinctness
letregions r1 r2 r3 with {w : Distinct3 r1 r2 r3} in
()
:*: Unit
:!: Pure
:$: Empty


-- Error: distinct_n for n > 2 can only be used for regions introduced by the current letregions
When checking expression.
  <batch>:93:1
  Witness type is not for bound regions.
        letregion binds: r2 r3
    but witness type is: w : Distinct3 r1 r2 r3
  
  with: letregions r2 r3 with {w : Distinct3 r1 r2 r3} in
        ()


-- #255: Letregions with deBruijn indices
letregions ^ ^ with {w : Distinct2 ^1 ^0} in
()
:*: Unit
:!: Pure
:$: Empty


