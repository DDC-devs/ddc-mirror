-- Error: types of alternatives are not identical.
:check..
case 5 [r0#] () of {
        0 -> 0 [r0#] ();
        _ -> ();
};;


-- Error: discriminant type is not a data type.
:check..
case \(x : Unit). x of {
        _ -> ()
};;


-- Error: pattern binds more fields than provided by constructor.
:check..
let xx = Nil [r0#] [Int r0#] () in
case xx of {
        Nil          -> ();
        Cons x xs ys -> ();
};;


-- Error: annotation on pattern variable does not match field type
--        of constructor.
:check..
let xx = Nil [r0#] [Int r0#] () in
case xx of {
        Nil                  -> ();
        Cons (x:Unit) xs     -> ();
};;


-- Error: alternatives are not exhaustive, for a Small type.
:check..
\(xx:List r0# (Int r1#)).
case xx of {
        Cons _ _        -> ()
};;


-- Error: alternatives are not exhaustive, for a Large type.
:check..
\(xx:Int r0#).
case xx of {
        0       -> ();
};;


-- Error: alternatives are overlapping due to multiple defaults.
:check..
\(xx:Int r0#).
case xx of {
        _       -> ();
        _       -> ();
};;


-- Error: alternatives are overlapping because there is a default
--        earlier in the list.
:check..
\(xx:Int r0#).
case xx of {
        5       -> ();
        _       -> ();
        0       -> ();
};;


-- Error: alternatives are overlapping because the same constructor
--        appears multiple times.
:check..
\(xx:Int r0#).
case xx of {
        0       -> ();
        0       -> ();
        _       -> ();
};;


-- Error: pattern and discriminant types don't match.
:check..
let xx0  = Nil  [r0#] [Int r0#] () in
let xx1  = Cons [r0#] [Int r0#] (5 [r0#] ()) xx0 in
case xx1 of {
        ()  -> ()
};;


-- Error: pattern and discriminant types don't match.
:check..
\(xx:Int r0#).
case xx of {
        Nil -> ();
};;


-- Check that vars in alts are masked from closure
-- and effect includes the read of the discriminant.
:check..
let xx = Nil [r0#] [Int r0#] () in
case xx of {
        Nil       -> 0 [r0#] ();
        Cons x xs -> x;
};;


-- Check that the HeadRead effect is crushed out when
-- the read is on a type with no head region.
:check..
case () of { () -> () };;


-- Handle forget around the discriminant.
:eval..
letregion r with {w : Global r} in
let x = forget use [r] w in
        Cons [r] [Int r] (5 [r] ()) (Nil [r] [Int r] ()) in
case x of {
        Nil      -> 0 [r0#] ();
        Cons x _ -> addInt [:r r0# r0#:] x (0 [r0#] ());
};;

