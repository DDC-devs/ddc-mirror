-- Equivalence checker must crush effect and closure terms.
:check..
\(x : Int r0#).
\(y : Unit -(DeepRead (Int r0#) | DeepUse (Int r0#))> Unit).
\(z : Unit -(Read r0#           | Use r0#)>           Unit).
case x of {
        0       -> y;
        _       -> z
};;


-- Equivalence checker must handle alpha-equivalence.
:check..
\(x : Int r0#).
\(y : [a : Data]. a -> a).
\(z : [^ : Data]. ^0 -> ^0).
case x of {
        0       -> y;
        _       -> z
};;
