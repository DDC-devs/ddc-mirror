ok
ok
ok


-- Check that the size prims are available
size# :: [^ : Data].Nat#
size2# :: [^ : Data].Nat#


-- Get the size of prim types.
%s.Obj = type <{i64}>
@_DDC_Runtime_heapTop = external global  i64
@_DDC_Runtime_heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8

define internal fastcc i64 @nat() align 8  
{
l1.entry:
        ret i64 8
}

define internal fastcc i64 @int() align 8  
{
l3.entry:
        ret i64 8
}

define internal fastcc i64 @word16() align 8  
{
l5.entry:
        ret i64 2
}

define internal fastcc i64 @tag() align 8  
{
l7.entry:
        ret i64 4
}







-- Get the log2 size of prim types.
%s.Obj = type <{i64}>
@_DDC_Runtime_heapTop = external global  i64
@_DDC_Runtime_heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8

define internal fastcc i64 @nat() align 8  
{
l1.entry:
        ret i64 3
}

define internal fastcc i64 @int() align 8  
{
l3.entry:
        ret i64 3
}

define internal fastcc i64 @word8() align 8  
{
l5.entry:
        ret i64 0
}

define internal fastcc i64 @word16() align 8  
{
l7.entry:
        ret i64 1
}

define internal fastcc i64 @ptr() align 8  
{
l12.entry:
        ret i64 3
}

define internal fastcc i64 @tag() align 8  
{
l14.entry:
        ret i64 2
}



!11 = metadata !{metadata !"ptr_r", metadata !10, i32 0}
!10 = metadata !{metadata !"ptr_ROOT_9", null, i32 1}

