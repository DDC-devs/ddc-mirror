-- The inner function uses a value in region R0#.
let x : Int r0# = 5 [r0#] () in
\(z : Unit). addInt [r0#] [r0#] [r1#] x x
:*: Unit -(Read r0# + Alloc r1# | Use r0# + Use r1#)> Int r1#
:!: Alloc r0#
:$: Use r0# + Use r1#


-- The inner function uses a value in region R0#.
let x : Int r0# = 5 [r0#] () in
\(z : Unit). addInt [r0#] [r0#] [r1#] x x
:*: Unit -(Read r0# + Alloc r1# | Use r0# + Use r1#)> Int r1#
:!: Alloc r0#
:$: Use r0# + Use r1#


-- Inner function uses the bound value, but it is not free in the closure.
\(x : Int r0#). addInt [r0#] [r0#] [r1#] x x
:*: Int r0# -(Read r0# + Alloc r1# | Use r0# + Use r1#)> Int r1#
:!: Pure
:$: Use r0# + Use r1#


-- Inner function uses the bound value, and it is free in the closure.
\(x : Int r0#).\(y : Int r1#). addInt [r0#] [r1#] [r2#] x y
:*: Int r0# -(Pure | Use r0# + Use r1# + Use r2#)> Int r1# -(Read r0# + Read r1# + Alloc r2# | Use r0# + Use r1# + Use r2#)> Int r2#
:!: Pure
:$: Use r0# + Use r1# + Use r2#


-- Multiple levels of binding.
\(x : Int r0#).\(y : Int r1#).\(z : Int r2#).
addInt [r3#] [r0#] [r4#] (addInt [r1#] [r2#] [r3#] y z) x
:*: Int r0# -(Pure | Use r0# + Use r1# + Use r2# + Use r3# + Use r4#)> Int r1# -(Pure | Use r0# + Use r1# + Use r2# + Use r3# + Use r4#)> Int r2# -(Read r0# + Read r1# + Read r2# + Read r3# + Alloc r3# + Alloc r4# | Use r0# + Use r1# + Use r2# + Use r3# + Use r4#)> Int r4#
:!: Pure
:$: Use r0# + Use r1# + Use r2# + Use r3# + Use r4#


-- Inner function has a value in the closure whose type contains
-- a higher kinded type variable.
/\(a : Region ~> Data).
 \(x : a r1#).\(f : a r1# -> a r1#). f x
:*: [a : Region ~> Data].a r1# -> (a r1# -> a r1#) -(Pure | DeepUse (a r1#))> a r1#
:!: Pure
:$: Empty


-- Inner funtion has a value in the clousre whose type contains
-- a closure variable.
/\(e : Effect)./\(c : Closure).
 \(f : Unit -(e | c)> Unit).\(x : Unit). f x
:*: [e : Effect].[c : Closure].(Unit -(e | c)> Unit) -> Unit -(e | c)> Unit
:!: Pure
:$: Empty


-- Like above, and we've also instantiated the variable with a
-- pre-trimmed closure.
(/\(e : Effect)./\(c : Closure).
  \(f : Unit -(e | c)> Unit).\(x : Unit). f x) [Read r0#] [Use r1#]
:*: (Unit -(Read r0# | Use r1#)> Unit) -> Unit -(Read r0# | Use r1#)> Unit
:!: Pure
:$: Empty


-- Like above, and we've also instantiated the variable with a closure that
-- could be trimmed, but because it's explicit in the term we don't do so. 
(/\(e : Effect)./\(c : Closure).
  \(f : Unit -(e | c)> Unit).\(x : Unit). f x) [Read r0#] [DeepUse (Int r1#)]
:*: (Unit -(Read r0# | DeepUse (Int r1#))> Unit) -> Unit -(Read r0# | DeepUse (Int r1#))> Unit
:!: Pure
:$: Empty


-- Region handle in the type argument should show up in the overall closure.
(/\(a : Data).
  \(f : a -> a).\(x : a). f x) [Int r1#]
:*: (Int r1# -> Int r1#) -> Int r1# -> Int r1#
:!: Pure
:$: Empty


-- Local region should not appear in the closure of the overall term.
letregion r1 with {w1 : Const r1} in
purify <read [r1] w1> in
addInt [r1] [r0#] [r0#] (5 [r1] ()) (5 [r0#] ())
:*: Int r0#
:!: Read r0# + Alloc r0#
:$: Use r0#


-- Error: region is visible in the closure of the returned function.
-- We've purified the read and alloc effects, but we can still see
-- that the function uses the region due to the Use term in the
-- function's closure.
When checking expression.
  <batch>:72:1
  Region variables escape scope of letregion.
         The region variables: r1 : Region
    is free in the body type: Unit -(Read r0# + Alloc r0# | Use r1 + Use r0#)> Int r0#
  
  with: letregion r1 with {w1 : Const r1} in
        \(x : Unit).
        purify <read [r1] w1 & alloc [r1] w1> in
        addInt [r1] [r0#] [r0#] (2 [r1] ()) (3 [r0#] ())
