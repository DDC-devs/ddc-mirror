-- See if we can print out any type.
:check addInt


-- Instantiate the outer forall of the type of add with a region handle.
-- Region handles in the expression are automatically added to the store at
-- startup time.
:check addInt [r1#]


-- Instantiate all the foralls with different region handles.
:check addInt [r1#] [r2#] [r3#]


-- Same as above, but with nicer syntax.
:check addInt [:r1# r2# r3#:]


-- Instantiate all the foralls with the same region handle.
-- The 'add' primop causes the effect (Read R1# + Read R1#) which should be 
-- packed down to just (Read R1#).
:check addInt [:r1# r1# r1#:]


-- Wrap type lambdas around the 'add' primop and use these to rename the 
-- anonymous binders in its type.
:check /\(r1 r2 r3:Region).addInt [:r1 r2 r3:]


-- A fully applied integer constructor should cause an alloc effect.
:check (2 [r1#] ())


-- Addition should also read the args, and alloc the result.
:check addInt [:r1# r2# r3#:] (2 [r1#] ()) (3 [r2#] ())


-- Error: missing type annotation for parameter of lambda.
:check \x. x


-- Error: cannot shadow spec binders.
-- This breaks progress if we try to run it.
:check..
(/\(r : Region). \(x : Int r). /\(r : Region). \(y : Int r).
 case x of {
        0       -> x;
        _       -> y;
 }) [r0#] (2 [r0#] ()) [r1#] (3 [r1#] ());;


-- Error: cannot shadow spec binders.
:check..
(/\(r : Region). \(x : Int r). /\(r : Region). \(_ : Unit). 2 [r] ()) 
        [r1#];;


-- Error: cannot shadow spec binders.
:check..
(/\(r : Region). \(x : Int r). /\(r : Region). \(_ : Unit). 2 [r] ()) 
        [r1#] 
        (5 [r1#] ()) 
        [r2#];;


-- Error: Type variable not in environment.
:kind a


-- Error: Type constructor not in environment.
:kind Whatever


-- Error: Data constructor not in environment.
:type Whatever


-- Error: Type constructor used as a data constructor.
:type Unit


-- Error: Data constructor used as a type constructor.
:kind ()


-- Error: Type variable used as a value variable.
:check (/\(a : Data). \(x : a). a)

