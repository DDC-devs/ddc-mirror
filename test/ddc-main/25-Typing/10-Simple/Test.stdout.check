-- See if we can print out any type.
addInt
:*: [^ ^ ^ : Region].Int ^2 -> Int ^1 -(Read ^1 + Read ^2 + Alloc ^0 | Use ^2)> Int ^0
:!: Pure
:$: Empty


-- Instantiate the outer forall of the type of add with a region handle.
-- Region handles in the expression are automatically added to the store at
-- startup time.
addInt [r1#]
:*: [^ ^ : Region].Int r1# -> Int ^1 -(Read ^1 + Read r1# + Alloc ^0 | Use r1#)> Int ^0
:!: Pure
:$: Use r1#


-- Instantiate all the foralls with different region handles.
addInt [r1#] [r2#] [r3#]
:*: Int r1# -> Int r2# -(Read r1# + Read r2# + Alloc r3# | Use r1#)> Int r3#
:!: Pure
:$: Use r1# + Use r2# + Use r3#


-- Same as above, but with nicer syntax.
addInt [r1#] [r2#] [r3#]
:*: Int r1# -> Int r2# -(Read r1# + Read r2# + Alloc r3# | Use r1#)> Int r3#
:!: Pure
:$: Use r1# + Use r2# + Use r3#


-- Instantiate all the foralls with the same region handle.
-- The 'add' primop causes the effect (Read R1# + Read R1#) which should be 
-- packed down to just (Read R1#).
addInt [r1#] [r1#] [r1#]
:*: Int r1# -> Int r1# -(Read r1# + Alloc r1# | Use r1#)> Int r1#
:!: Pure
:$: Use r1#


-- Wrap type lambdas around the 'add' primop and use these to rename the 
-- anonymous binders in its type.
/\(r1 r2 r3 : Region). addInt [r1] [r2] [r3]
:*: [r1 r2 r3 : Region].Int r1 -> Int r2 -(Read r1 + Read r2 + Alloc r3 | Use r1)> Int r3
:!: Pure
:$: Empty


-- A fully applied integer constructor should cause an alloc effect.
2 [r1#] ()
:*: Int r1#
:!: Alloc r1#
:$: Use r1#


-- Addition should also read the args, and alloc the result.
addInt [r1#] [r2#] [r3#] (2 [r1#] ()) (3 [r2#] ())
:*: Int r3#
:!: Read r1# + Read r2# + Alloc r1# + Alloc r2# + Alloc r3#
:$: Use r1# + Use r2# + Use r3#


-- Error: cannot shadow spec binders.
-- This breaks progress if we try to run it.
When checking expression.
  <batch>:41:32
  Cannot shadow named spec variable.
    binder: r : Region
    is already in the environment.
  with: /\(r : Region).
         \(y : Int r).
        case x of {
          0  
           -> x;
          _ 
           -> y
        }


-- Error: cannot shadow spec binders.
When checking expression.
  <batch>:50:32
  Cannot shadow named spec variable.
    binder: r : Region
    is already in the environment.
  with: /\(r : Region).
         \(_ : Unit). 2 [r] ()


-- Error: cannot shadow spec binders.
When checking expression.
  <batch>:56:32
  Cannot shadow named spec variable.
    binder: r : Region
    is already in the environment.
  with: /\(r : Region).
         \(_ : Unit). 2 [r] ()


-- Error: Type variable not in environment.
When checking type.
  Undefined type variable: a


-- Error: Type constructor not in environment.
When checking type.
  Undefined type constructor: Whatever


-- Error: Data constructor not in environment.
When checking expression.
  <batch>:71:2
  Undefined data constructor: Whatever


-- Error: Type constructor used as a data constructor.
While parsing.
  Parse error in "<batch>" (line 1, column 1)
  Unexpected constructor "Unit".
  Expected an expression.


-- Error: Data constructor used as a type constructor.
While parsing.
  Parse error in "<batch>" (line 1, column 1)
  Unexpected constructor "()".
  Expected a type.


-- Error: Type variable used as a value variable.
When checking expression.
  <batch>:83:27
  Undefined value variable: a

