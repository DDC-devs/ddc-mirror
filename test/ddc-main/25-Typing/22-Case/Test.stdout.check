-- Error: types of alternatives are not identical.
When checking expression.
  Mismatch in alternative result types.
     Type of alternative: Int R0#
          does not match: Unit
  
  with: case 5 [R0#] () of {
          0  
           -> 0 [R0#] ();
          _ 
           -> ()
        }


-- Error: discriminant type is not a data type.
When checking expression.
  Scrutinee of case expression is not algebraic data.
       Scrutinee type: Unit -> Unit
  
  with: caselet _ 
          = \(x : Unit). x in
        ()


-- Error: pattern binds more fields than provided by constructor.
When checking expression.
  Pattern has more binders than there are fields in the constructor.
       Contructor: Cons
              has: 2 fields
    but there are: 3 binders in the pattern
  
  with: case xx of {
          Nil  
           -> ();
          Cons x xs ys 
           -> ()
        }


-- Error: annotation on pattern variable does not match field type
--        of constructor.
When checking expression.
  Annotation on pattern variable does not match type of field.
         Annotation type: Unit
              Field type: Int R0#
  
  with: case xx of {
          Nil  
           -> ();
          Cons (x : Unit) xs 
           -> ()
        }


-- Error: alternatives are not exhaustive, for a Small type.
When checking expression.
  Case alternatives are non-exhaustive.
   Constructors not matched: Nil
  
  with: caselet Cons _ _  = xx in
        ()


-- Error: alternatives are not exhaustive, for a Large type.
When checking expression.
  Case alternatives are non-exhaustive.
  
  with: caselet 0   = xx in
        ()


-- Error: alternatives are overlapping due to multiple defaults.
When checking expression.
  Case alternatives are overlapping.
  
  with: case xx of {
          _ 
           -> ();
          _ 
           -> ()
        }


-- Error: alternatives are overlapping because there is a default
--        earlier in the list.
When checking expression.
  Case alternatives are overlapping.
  
  with: case xx of {
          5  
           -> ();
          _ 
           -> ();
          0  
           -> ()
        }


-- Error: alternatives are overlapping because the same constructor
--        appears multiple times.
When checking expression.
  Case alternatives are overlapping.
  
  with: case xx of {
          0  
           -> ();
          0  
           -> ();
          _ 
           -> ()
        }


-- Error: pattern and discriminant types don't match.
When checking expression.
  Cannot instantiate constructor type with scrutinee type args.
   Either the constructor has an invalid type,
   or the type of the scrutinee does not match the type of the pattern.
          Scrutinee type: List R0# (Int R0#)
        Constructor type: Unit
  
  with: caselet ()   = xx1 in
        ()


-- Error: pattern and discriminant types don't match.
When checking expression.
  Scrutinee type does not match result of pattern type.
          Scrutinee type: Int R0#
            Pattern type: [^ : Data].Unit -(Alloc R0# | Empty)> List R0# ^0
  
  with: caselet Nil   = xx in
        ()


-- Check that vars in alts are masked from closure
-- and effect includes the read of the discriminant.
let xx : List R0# (Int R0#)
      = Nil [R0#] [Int R0#] () in
case xx of {
  Nil  
   -> 0 [R0#] ();
  Cons (x : Int R0#) (xs : List R0# (Int R0#)) 
   -> x
}
:*: Int R0#
:!: Read R0# + Alloc R0#
:$: Use R0#


-- Check that the HeadRead effect is crushed out when
-- the read is on a type with no head region.
caselet ()   = () in
()
:*: Unit
:!: Pure
:$: Empty


-- Handle forget around the discriminant.
5

