-- Ok: let expression with explicit type annotation.
let x : Int r0# = 5 [r0#] () in
x
:*: Int r0#
:!: Alloc r0#
:$: Use r0#


-- Ok: let expression with no type annotation.
let x : Int r0# = 5 [r0#] () in
x
:*: Int r0#
:!: Alloc r0#
:$: Use r0#


-- Error: let binder has incorrect type annotation.
When checking expression.
  <batch>:10:2
  Type mismatch in let-binding.
                  The binder: x
                    has type: Int r0#
       but the body has type: Unit
  
  with: let x : Int r0# = () in
        x


-- Error: outer function is missing a Use annotation.
When checking expression.
  <batch>:15:1
  Type mismatch in let-binding.
                  The binder: fac
                    has type: [r : Region].Int r -> Int r -(Read r + Alloc r | Use r)> Int r
       but the body has type: [r : Region].Int r -(Pure | Use r)> Int r -(Read r + Alloc r | Use r)> Int r
  
  with: letrec {
          fac : [r : Region].Int r -> Int r -(Read r + Alloc r | Use r)> Int r
            = /\(r : Region).
               \(acc n : Int r).
              case n of {
                0  
                 -> acc;
                1  
                 -> acc;
                _ 
                 -> fac [r] (mulInt [r] [r] [r] acc n)
                        (subInt [r] [r] [r] n (1 [r] ()))
              }
        } in
        fac [r1#] (1 [r1#] ()) (5 [r1#] ())


-- Error: inner function is missing an Alloc effect.
When checking expression.
  <batch>:30:1
  Type mismatch in let-binding.
                  The binder: fac
                    has type: [r : Region].Int r -(Pure | Use r)> Int r -(Read r | Use r)> Int r
       but the body has type: [r : Region].Int r -(Pure | Use r)> Int r -(Read r + Alloc r | Use r)> Int r
  
  with: letrec {
          fac : [r : Region].Int r -(Pure | Use r)> Int r -(Read r | Use r)> Int r
            = /\(r : Region).
               \(acc n : Int r).
              case n of {
                0  
                 -> acc;
                1  
                 -> acc;
                _ 
                 -> fac [r] (mulInt [r] [r] [r] acc n)
                        (subInt [r] [r] [r] n (1 [r] ()))
              }
        } in
        fac [r1#] (1 [r1#] ()) (5 [r1#] ())


-- Error: region var on the Int return type should be r1.
When checking expression.
  <batch>:53:17
  Type mismatch in application.
       Function expects: List r2 (Int r1)
        but argument is: List r2 (Int r2)
  
  with: Cons [r2] [Int r1] m
            (enumFromTo [r1] [r2]
                 (addInt [r1] [r1] [r1] m (1 [r1] ())) n)


-- Error: second effect should have Read r1 instead of Read r2.
When checking expression.
  <batch>:64:1
  Type mismatch in let-binding.
                  The binder: enumFromTo
                    has type: [r1 r2 : Region].Int r1 -(Pure | Use r1 + Use r2)> Int r1 -(Read r2 + Alloc r1 + Alloc r2 | Use r1 + Use r2)> List r2 (Int r1)
       but the body has type: [r1 r2 : Region].Int r1 -(Pure | Use r1 + Use r2)> Int r1 -(Read r1 + Read r2 + Alloc r1 + Alloc r2 | Use r1 + Use r2)> List r2 (Int r1)
  
  with: letrec {
          enumFromTo : [r1 r2 : Region].Int r1 -(Pure | Use r1 + Use r2)> Int r1 -(Read r2 + Alloc r1 + Alloc r2 | Use r1 + Use r2)> List r2 (Int r1)
            = /\(r1 r2 : Region).
               \(m n : Int r1).
              case eqInt [r1] [r1] [r1] m n of {
                0  
                 -> Cons [r2] [Int r1] m
                        (enumFromTo [r1] [r2]
                             (addInt [r1] [r1] [r1] m (1 [r1] ())) n);
                _ 
                 -> Cons [r2] [Int r1] m
                        (Nil [r2] [Int r1] ())
              }
        } in
        enumFromTo [r1#] [r2#] (5 [r1#] ()) (9 [r1#] ())


-- Should be ok.
letrec {
  enumFromTo : [r1 r2 : Region].Int r1 -(Pure | Use r1 + Use r2)> Int r1 -(Read r1 + Alloc r1 + Alloc r2 | Use r1 + Use r2)> List r2 (Int r1)
    = /\(r1 r2 : Region).
       \(m n : Int r1).
      case eqInt [r1] [r1] [r1] m n of {
        0  
         -> Cons [r2] [Int r1] m
                (enumFromTo [r1] [r2]
                     (addInt [r1] [r1] [r1] m (1 [r1] ())) n);
        _ 
         -> Cons [r2] [Int r1] m
                (Nil [r2] [Int r1] ())
      }
} in
enumFromTo [r1#] [r2#] (5 [r1#] ()) (9 [r1#] ())
:*: List r2# (Int r1#)
:!: Read r1# + Alloc r1# + Alloc r2#
:$: Use r1# + Use r2#


-- Same as above, but the effect and closure terms are in a different order.
letrec {
  enumFromTo : [r1 r2 : Region].Int r1 -(Pure | Use r1 + Use r2)> Int r1 -(Read r1 + Alloc r1 + Alloc r2 | Use r1 + Use r2)> List r2 (Int r1)
    = /\(r1 r2 : Region).
       \(m n : Int r1).
      case eqInt [r1] [r1] [r1] m n of {
        0  
         -> Cons [r2] [Int r1] m
                (enumFromTo [r1] [r2]
                     (addInt [r1] [r1] [r1] m (1 [r1] ())) n);
        _ 
         -> Cons [r2] [Int r1] m
                (Nil [r2] [Int r1] ())
      }
} in
enumFromTo [r1#] [r2#] (5 [r1#] ()) (9 [r1#] ())
:*: List r2# (Int r1#)
:!: Read r1# + Alloc r1# + Alloc r2#
:$: Use r1# + Use r2#


-- Error: binding must have data kind.
When checking expression.
  <batch>:122:3
  Let binding does not have data kind.
        The binding for: e2
               has type: Effect
              with kind: Comp
         but it must be: * 
  
  with: let e2 : Effect = e1 in
        ()


-- Error: binding must have data kind.
When checking expression.
  <batch>:129:3
  Let binding does not have data kind.
        The binding for: e2
               has type: Effect
              with kind: Comp
         but it must be: * 
  
  with: letrec {
          e2 : Effect = e1
        } in
        ()


-- Error: body must have data kind.
When checking expression.
  <batch>:136:3
  Let body does not have data kind.
   Body of let has type: Effect
              with kind: Comp
         but it must be: * 
  
  with: let x : Unit = () in
        e1


-- Error: body must have data kind.
When checking expression.
  <batch>:143:3
  Let body does not have data kind.
   Body of let has type: Effect
              with kind: Comp
         but it must be: * 
  
  with: letrec {
          foo : Unit -> Unit
            = \(x : Unit). ()
        } in
        e1


-- Error: right of letrec binding must be a lambda
When checking expression.
  <batch>:149:2
  Letrec can only bind lambda abstractions.
        This is not one: ()
  
  with: letrec {
          foo : Unit = ()
        } in
        foo

-- Ok: letrec with multiple anonymous binders.
5

