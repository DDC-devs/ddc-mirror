ok


-- Two possible schedules, but should be one with only one manifest array (ys)
module Test with
letrec {
  y$runproc$process : Ref# Int# -> [ys$'$k : Rate].RateNat# ys$'$k -> Series# ys$'$k Int# -> Process#
    = \(y$ref : Ref# Int#).
      /\(ys$'$k : Rate).
       \(ys$'$k$r : RateNat# ys$'$k).\(us$s : Series# ys$'$k Int#).
      let y$proc : Process#
            = sreduce# [ys$'$k] [Int#] y$ref
                  (\(x2 x3 : Int#). add# [Int#] x2 x3) 0i# us$s in
      y$proc;
  
  xs$runproc$process : Vector# Int# -> Int# -> [ys$'$k : Rate].RateNat# ys$'$k -> Series# ys$'$k Int# -> Process#
    = \(ys : Vector# Int#).\(y : Int#).
      /\(ys$'$k : Rate).
       \(ys$'$k$r : RateNat# ys$'$k).\(us$s : Series# ys$'$k Int#).
      let xs$s : Series# ys$'$k Int#
            = smap# [ys$'$k] [Int#] [Int#]
                  (\(x0 : Int#). add# [Int#] 1i# x0) us$s in
      let ys$s : Series# ys$'$k Int#
            = smap# [ys$'$k] [Int#] [Int#]
                  (\(x5 : Int#). add# [Int#] y x5) xs$s in
      let ys$proc : Process# = sfill# [ys$'$k] [Int#] ys ys$s in
      ys$proc;
  
  test : Vector# Int# -> Vector# Int#
    = \(us : Vector# Int#).
      let y$ref : Ref# Int# = new# [Int#] 0i# in
      let y$runproc : Bool#
            = runProcess# [Int#] us (y$runproc$process y$ref) in
      let y : Int# = read# [Int#] y$ref in
      let ys : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let xs$runproc : Bool#
            = runProcess# [Int#] us (xs$runproc$process ys y) in
      ys
}


