:set Synth

-- map2 with two filtered - should be outlawed!
--:flow-rate..
--module Test with letrec
--test    (us : Vector# Int#) : Vector# Int#
-- =      let us1  = vfilter# [Int#] (gt# [Int#] 1i#) us 
--     in let us2  = vfilter# [Int#] (gt# [Int#] 2i#) us
--     in let us'  = vmap2# [Int#] [Int#] [Int#] (add# [Int#]) us1 us2
--     in     us'
--;;


-- Simple filter - return filtered
:flow-rate..
module Test with letrec
test    (us : Vector# Int#) : Vector# Int#
 = do   us'     = vfilter# (gt# 1i#) us 
        us'
;;


-- Map over a filter
:flow-rate..
module Test with letrec
test    (us : Vector# Int#) : Vector# Int#
 = do   us'  = vfilter# (gt# 1i#) us 
        us'' = vmap# (add# 2i#) us'
        us''
;;


-- Filter of a filtered, return both. Should be single kernel
:flow-rate..
module Test with letrec
test    (us : Vector# Int#) : Tuple2# (Vector# Int#) (Vector# Int#)
 = do   us'  = vfilter# (gt# 1i#) us 
        us'' = vfilter# (gt# 2i#) us'
        T2# us' us''
;;


-- Filter and fold, then use fold value in map over original and filtered. Three kernels:
-- 1- filter, fold
-- 2- map original
-- 3- map filtered
:flow-rate..
module Test with letrec
test    (orig : Vector# Int#) : Tuple2# (Vector# Int#) (Vector# Int#)
        -- Kernel 1
 = do   filt  = vfilter# (gt#  1i#) orig 
        fold  = vreduce#  add# 0i# filt

        -- Kernel 2
        morig = vmap# (add# fold) orig

        -- Kernel 3
        mfilt = vmap# (add# fold) filt
        T2# morig mfilt
;;


