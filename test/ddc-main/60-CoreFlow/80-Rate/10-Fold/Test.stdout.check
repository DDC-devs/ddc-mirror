ok


-- Simple fold over a vector
module Test with
letrec {
  x3$runproc$process : Ref# Int# -> [u1$k : Rate].RateNat# u1$k -> Series# u1$k Int# -> Process#
    = \(x3$ref : Ref# Int#).
      /\(u1$k : Rate).
       \(u1$k$r : RateNat# u1$k).\(u1$s : Series# u1$k Int#).
      let x3$proc : Process#
            = sreduce# [u1$k] [Int#] x3$ref
                  (\(x0 x1 : Int#). add# [Int#] x0 x1) 0i# u1$s in
      x3$proc;
  
  test : Vector# Int# -> Int#
    = \(u1 : Vector# Int#).
      let x3$ref : Ref# Int# = new# [Int#] 0i# in
      let x3$runproc : Bool#
            = runProcess# [Int#] u1 (x3$runproc$process x3$ref) in
      let x3 : Int# = read# [Int#] x3$ref in
      x3
}


-- Two folds over same vector
module Test with
letrec {
  x3$runproc$process : Ref# Int# -> Ref# Int# -> [u1$k : Rate].RateNat# u1$k -> Series# u1$k Int# -> Process#
    = \(x7$ref x3$ref : Ref# Int#).
      /\(u1$k : Rate).
       \(u1$k$r : RateNat# u1$k).\(u1$s : Series# u1$k Int#).
      let x3$proc : Process#
            = sreduce# [u1$k] [Int#] x3$ref
                  (\(x0 x1 : Int#). add# [Int#] x0 x1) 0i# u1$s in
      let x7$proc : Process#
            = sreduce# [u1$k] [Int#] x7$ref
                  (\(x4 x5 : Int#). mul# [Int#] x4 x5) 1i# u1$s in
      pjoin# x3$proc x7$proc;
  
  test : Vector# Int# -> Int#
    = \(u1 : Vector# Int#).
      let x3$ref : Ref# Int# = new# [Int#] 0i# in
      let x7$ref : Ref# Int# = new# [Int#] 1i# in
      let x3$runproc : Bool#
            = runProcess# [Int#] u1 (x3$runproc$process x7$ref x3$ref) in
      let x3 : Int# = read# [Int#] x3$ref in
      let x7 : Int# = read# [Int#] x7$ref in
      let x8 : Int# = add# [Int#] x3 x7 in
      x8
}

