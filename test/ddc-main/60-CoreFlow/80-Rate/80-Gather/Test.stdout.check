ok
ok

module Test with
letrec {
  flub$runproc$process : [flub$'$k orig$k : Rate].RateVec# flub$'$k Nat# -> RateVec# orig$k Int# -> Vector# Int# -> [flub$PROC : Proc].Unit -> Process# flub$PROC flub$'$k
    = /\(flub$'$k orig$k : Rate).
       \(ix$rv : RateVec# flub$'$k Nat#).\(orig$rv : RateVec# orig$k Int#).\(flub : Vector# Int#).
      /\(flub$PROC : Proc).
       \(_ : Unit).
      let orig$s : Series# flub$PROC orig$k Int# = series# [flub$PROC] [orig$k] [Int#] orig$rv in
      let ix$s : Series# flub$PROC flub$'$k Nat# = series# [flub$PROC] [flub$'$k] [Nat#] ix$rv in
      let flub$s : Series# flub$PROC flub$'$k Int# = sgather# [flub$PROC] [orig$k] [flub$'$k] [Int#] orig$rv ix$s in
      let flub$proc : Process# flub$PROC flub$'$k = sfill# [flub$PROC] [flub$'$k] [Int#] flub flub$s in
      flub$proc;
  
  test : Vector# Int# -> Vector# Nat# -> Vector# Int#
    = \(orig : Vector# Int#).\(ix : Vector# Nat#).
      let flub : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] orig) in
      let flub$runproc : Unit
            = ratify1# [Int#] [Unit] orig
                  (/\(orig$k : Rate).
                    \(orig$rv : RateVec# orig$k Int#).
                   ratify1# [Nat#] [Unit] ix
                       (/\(flub$'$k : Rate).
                         \(ix$rv : RateVec# flub$'$k Nat#).
                        runProcess# [flub$'$k] (flub$runproc$process [flub$'$k] [orig$k] ix$rv orig$rv flub))) in
      flub
}

module Test with
letrec {
  ix'$runproc$process : [ix$k orig$k : Rate].RateVec# ix$k Nat# -> RateVec# orig$k Int# -> Vector# Int# -> Nat# -> [ix'$PROC : Proc].Unit -> Process# ix'$PROC ix$k
    = /\(ix$k orig$k : Rate).
       \(ix$rv : RateVec# ix$k Nat#).\(orig$rv : RateVec# orig$k Int#).\(flub : Vector# Int#).\(len : Nat#).
      /\(ix'$PROC : Proc).
       \(_ : Unit).
      let orig$s : Series# ix'$PROC orig$k Int# = series# [ix'$PROC] [orig$k] [Int#] orig$rv in
      let ix$s : Series# ix'$PROC ix$k Nat# = series# [ix'$PROC] [ix$k] [Nat#] ix$rv in
      let ix'$flags : Series# ix'$PROC ix$k Bool#
            = smap# [ix'$PROC] [ix$k] [Nat#] [Bool#]
                  (\(x0 : Nat#). gt# [Nat#] len x0) ix$s in
      smkSel# [ix'$PROC] [ix$k] [ix$k] ix'$flags
          (/\(ix'$'$k : Rate).
            \(ix'$sel : Sel1# ix'$PROC ix$k ix'$'$k).
           let ix'$s : Series# ix'$PROC ix'$'$k Nat# = spack# [ix'$PROC] [ix$k] [ix'$'$k] [Nat#] ix'$sel ix$s in
           let flub$s : Series# ix'$PROC ix'$'$k Int# = sgather# [ix'$PROC] [orig$k] [ix'$'$k] [Int#] orig$rv ix'$s in
           let flub$proc : Process# ix'$PROC ix'$'$k = sfill# [ix'$PROC] [ix'$'$k] [Int#] flub flub$s in
           presize# [ix'$PROC] [ix'$'$k] [ix$k]
               (rsel1# [ix'$PROC] [ix'$'$k] [ix$k] [ix'$'$k] ix'$sel (rid# [ix'$PROC] [ix'$'$k])) flub$proc);
  
  test : Vector# Int# -> Vector# Nat# -> Vector# Int#
    = \(orig : Vector# Int#).\(ix : Vector# Nat#).
      let len : Nat# = vlength# [Int#] orig in
      let flub : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] orig) in
      let ix'$runproc : Unit
            = ratify1# [Int#] [Unit] orig
                  (/\(orig$k : Rate).
                    \(orig$rv : RateVec# orig$k Int#).
                   ratify1# [Nat#] [Unit] ix
                       (/\(ix$k : Rate).
                         \(ix$rv : RateVec# ix$k Nat#).
                        runProcess# [ix$k] (ix'$runproc$process [ix$k] [orig$k] ix$rv orig$rv flub len))) in
      flub
}


