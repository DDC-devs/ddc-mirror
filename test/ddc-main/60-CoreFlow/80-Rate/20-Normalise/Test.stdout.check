ok


-- Normalise - sum, then map. Requires two kernels
module Test with
letrec {
  n$runproc$process : [x4$'$k : Rate].RateVec# x4$'$k Int# -> Ref# Int# -> [x4$'$k$PROC : Proc].Unit -> Process# x4$'$k$PROC x4$'$k
    = /\(x4$'$k : Rate).
       \(u1$rv : RateVec# x4$'$k Int#).\(n$ref : Ref# Int#).
      /\(x4$'$k$PROC : Proc).
       \(_ : Unit).
      let u1$s : Series# x4$'$k$PROC x4$'$k Int# = series# [x4$'$k$PROC] [x4$'$k] [Int#] u1$rv in
      let n$proc : Process# x4$'$k$PROC x4$'$k
            = sreduce# [x4$'$k$PROC] [x4$'$k] [Int#] n$ref
                  (\(x0 x1 : Int#). add# [Int#] x0 x1) 0i# u1$s in
      n$proc;
  
  x4$runproc$process : [x4$'$k : Rate].RateVec# x4$'$k Int# -> Vector# Int# -> Int# -> [x4$'$k$PROC : Proc].Unit -> Process# x4$'$k$PROC x4$'$k
    = /\(x4$'$k : Rate).
       \(u1$rv : RateVec# x4$'$k Int#).\(x4 : Vector# Int#).\(n : Int#).
      /\(x4$'$k$PROC : Proc).
       \(_ : Unit).
      let u1$s : Series# x4$'$k$PROC x4$'$k Int# = series# [x4$'$k$PROC] [x4$'$k] [Int#] u1$rv in
      let x4$s : Series# x4$'$k$PROC x4$'$k Int#
            = smap# [x4$'$k$PROC] [x4$'$k] [Int#] [Int#]
                  (\(x : Int#). div# [Int#] x n) u1$s in
      let x4$proc : Process# x4$'$k$PROC x4$'$k = sfill# [x4$'$k$PROC] [x4$'$k] [Int#] x4 x4$s in
      x4$proc;
  
  test : Vector# Int# -> Vector# Int#
    = \(u1 : Vector# Int#).
      let n$ref : Ref# Int# = new# [Int#] 0i# in
      let n$runproc : Unit
            = ratify1# [Int#] [Unit] u1
                  (/\(x4$'$k : Rate).
                    \(u1$rv : RateVec# x4$'$k Int#).
                   runProcess# [x4$'$k] (n$runproc$process [x4$'$k] u1$rv n$ref)) in
      let n : Int# = read# [Int#] n$ref in
      let x4 : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] u1) in
      let x4$runproc : Unit
            = ratify1# [Int#] [Unit] u1
                  (/\(x4$'$k : Rate).
                    \(u1$rv : RateVec# x4$'$k Int#).
                   runProcess# [x4$'$k] (x4$runproc$process [x4$'$k] u1$rv x4 n)) in
      x4
}


-- Normalise with extra reduce
module Test with
letrec {
  n$runproc$process : [xs$'$k : Rate].RateVec# xs$'$k Int# -> Ref# Int# -> [xs$'$k$PROC : Proc].Unit -> Process# xs$'$k$PROC xs$'$k
    = /\(xs$'$k : Rate).
       \(u1$rv : RateVec# xs$'$k Int#).\(n$ref : Ref# Int#).
      /\(xs$'$k$PROC : Proc).
       \(_ : Unit).
      let u1$s : Series# xs$'$k$PROC xs$'$k Int# = series# [xs$'$k$PROC] [xs$'$k] [Int#] u1$rv in
      let n$proc : Process# xs$'$k$PROC xs$'$k
            = sreduce# [xs$'$k$PROC] [xs$'$k] [Int#] n$ref
                  (\(x0 x1 : Int#). add# [Int#] x0 x1) 0i# u1$s in
      n$proc;
  
  xs$runproc$process : [xs$'$k : Rate].RateVec# xs$'$k Int# -> Ref# Int# -> Vector# Int# -> Int# -> [xs$'$k$PROC : Proc].Unit -> Process# xs$'$k$PROC xs$'$k
    = /\(xs$'$k : Rate).
       \(u1$rv : RateVec# xs$'$k Int#).\(y$ref : Ref# Int#).\(xs : Vector# Int#).\(n : Int#).
      /\(xs$'$k$PROC : Proc).
       \(_ : Unit).
      let u1$s : Series# xs$'$k$PROC xs$'$k Int# = series# [xs$'$k$PROC] [xs$'$k] [Int#] u1$rv in
      let xs$s : Series# xs$'$k$PROC xs$'$k Int#
            = smap# [xs$'$k$PROC] [xs$'$k] [Int#] [Int#]
                  (\(x : Int#). div# [Int#] x n) u1$s in
      let xs$proc : Process# xs$'$k$PROC xs$'$k = sfill# [xs$'$k$PROC] [xs$'$k] [Int#] xs xs$s in
      let y$proc : Process# xs$'$k$PROC xs$'$k
            = sreduce# [xs$'$k$PROC] [xs$'$k] [Int#] y$ref
                  (\(x4 x5 : Int#). mul# [Int#] x4 x5) 1i# u1$s in
      pjoin# [xs$'$k$PROC] [xs$'$k] xs$proc y$proc;
  
  test : Vector# Int# -> Tuple2# (Vector# Int#) Int#
    = \(u1 : Vector# Int#).
      let n$ref : Ref# Int# = new# [Int#] 0i# in
      let n$runproc : Unit
            = ratify1# [Int#] [Unit] u1
                  (/\(xs$'$k : Rate).
                    \(u1$rv : RateVec# xs$'$k Int#).
                   runProcess# [xs$'$k] (n$runproc$process [xs$'$k] u1$rv n$ref)) in
      let n : Int# = read# [Int#] n$ref in
      let xs : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] u1) in
      let y$ref : Ref# Int# = new# [Int#] 1i# in
      let xs$runproc : Unit
            = ratify1# [Int#] [Unit] u1
                  (/\(xs$'$k : Rate).
                    \(u1$rv : RateVec# xs$'$k Int#).
                   runProcess# [xs$'$k] (xs$runproc$process [xs$'$k] u1$rv y$ref xs n)) in
      let y : Int# = read# [Int#] y$ref in
      let x7 : Tuple2# (Vector# Int#) Int#
            = T2# [Vector# Int#] [Int#] xs y in
      x7
}


