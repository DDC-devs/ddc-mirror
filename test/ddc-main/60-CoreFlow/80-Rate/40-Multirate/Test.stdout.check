ok


-- Use both separately - no reason they should have same rate. Thus, two processes.
module Test with
letrec {
  test : Vector# Int# -> Vector# Int# -> Tuple3# (Vector# Int#) (Vector# Int#) Int#
    = \(us vs : Vector# Int#).
      let x2 : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let _ : Bool#
            = runProcess# [Int#] us
                  (/\(us$k : Rate).
                    \(_ : RateNat# us$k).\(us$s : Series# us$k Int#).
                   let x2$s : Series# us$k Int#
                         = smap# [us$k] [Int#] [Int#]
                               (\(x0 : Int#). add# [Int#] 1i# x0) us$s in
                   let x2$proc : Process# = sfill# [us$k] [Int#] x2 x2$s in
                   x2$proc) in
      let x5 : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] vs) in
      let x9$ref : Ref# Int# = new# [Int#] 0i# in
      let _ : Bool#
            = runProcess# [Int#] vs
                  (/\(vs$k : Rate).
                    \(_ : RateNat# vs$k).\(vs$s : Series# vs$k Int#).
                   let x5$s : Series# vs$k Int#
                         = smap# [vs$k] [Int#] [Int#]
                               (\(x3 : Int#). add# [Int#] 2i# x3) vs$s in
                   let x5$proc : Process# = sfill# [vs$k] [Int#] x5 x5$s in
                   let x9$proc : Process#
                         = sreduce# [vs$k] [Int#] x9$ref
                               (\(x6 x7 : Int#). add# [Int#] x6 x7) 0i# x5$s in
                   pjoin# x5$proc x9$proc) in
      let x9 : Int# = read# [Int#] x9$ref in
      T3# [Vector# Int#] [Vector# Int#] [Int#] x2 x5 x9
}


-- Try the criss cross one
module Test with
letrec {
  test : Vector# Int# -> Vector# Int# -> Tuple2# (Vector# Int#) (Vector# Int#)
    = \(us vs : Vector# Int#).
      let x6$ref : Ref# Int# = new# [Int#] 0i# in
      let _ : Bool#
            = runProcess# [Int#] us
                  (/\(us$k : Rate).
                    \(_ : RateNat# us$k).\(us$s : Series# us$k Int#).
                   let x2$s : Series# us$k Int#
                         = smap# [us$k] [Int#] [Int#]
                               (\(x0 : Int#). add# [Int#] 1i# x0) us$s in
                   let x6$proc : Process#
                         = sreduce# [us$k] [Int#] x6$ref
                               (\(x3 x4 : Int#). add# [Int#] x3 x4) 0i# x2$s in
                   x6$proc) in
      let x6 : Int# = read# [Int#] x6$ref in
      let x13$ref : Ref# Int# = new# [Int#] 0i# in
      let x19 : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] vs) in
      let _ : Bool#
            = runProcess# [Int#] vs
                  (/\(vs$k : Rate).
                    \(_ : RateNat# vs$k).\(vs$s : Series# vs$k Int#).
                   let x9$s : Series# vs$k Int#
                         = smap# [vs$k] [Int#] [Int#]
                               (\(x7 : Int#). add# [Int#] 2i# x7) vs$s in
                   let x13$proc : Process#
                         = sreduce# [vs$k] [Int#] x13$ref
                               (\(x10 x11 : Int#). add# [Int#] x10 x11) 0i# x9$s in
                   let x19$s : Series# vs$k Int#
                         = smap# [vs$k] [Int#] [Int#]
                               (\(x17 : Int#). add# [Int#] x6 x17) vs$s in
                   let x19$proc : Process# = sfill# [vs$k] [Int#] x19 x19$s in
                   pjoin# x13$proc x19$proc) in
      let x13 : Int# = read# [Int#] x13$ref in
      let x16 : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let _ : Bool#
            = runProcess# [Int#] us
                  (/\(us$k : Rate).
                    \(_ : RateNat# us$k).\(us$s : Series# us$k Int#).
                   let x16$s : Series# us$k Int#
                         = smap# [us$k] [Int#] [Int#]
                               (\(x14 : Int#). add# [Int#] x13 x14) us$s in
                   let x16$proc : Process# = sfill# [us$k] [Int#] x16 x16$s in
                   x16$proc) in
      T2# [Vector# Int#] [Vector# Int#] x16 x19
}


-- Criss cross, but manifest two more vectors
module Test with
letrec {
  test : Vector# Int# -> Vector# Int# -> Tuple2# (Vector# Int#) (Vector# Int#)
    = \(us vs : Vector# Int#).
      let x9 : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] vs) in
      let x13$ref : Ref# Int# = new# [Int#] 0i# in
      let _ : Bool#
            = runProcess# [Int#] vs
                  (/\(vs$k : Rate).
                    \(_ : RateNat# vs$k).\(vs$s : Series# vs$k Int#).
                   let x9$s : Series# vs$k Int#
                         = smap# [vs$k] [Int#] [Int#]
                               (\(x7 : Int#). add# [Int#] 2i# x7) vs$s in
                   let x9$proc : Process# = sfill# [vs$k] [Int#] x9 x9$s in
                   let x13$proc : Process#
                         = sreduce# [vs$k] [Int#] x13$ref
                               (\(x10 x11 : Int#). add# [Int#] x10 x11) 0i# x9$s in
                   pjoin# x13$proc x9$proc) in
      let x13 : Int# = read# [Int#] x13$ref in
      let x16 : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] us) in
      let x6$ref : Ref# Int# = new# [Int#] 0i# in
      let _ : Bool#
            = runProcess# [Int#] us
                  (/\(us$k : Rate).
                    \(_ : RateNat# us$k).\(us$s : Series# us$k Int#).
                   let x2$s : Series# us$k Int#
                         = smap# [us$k] [Int#] [Int#]
                               (\(x0 : Int#). add# [Int#] 1i# x0) us$s in
                   let x16$s : Series# us$k Int#
                         = smap# [us$k] [Int#] [Int#]
                               (\(x14 : Int#). add# [Int#] x13 x14) x2$s in
                   let x16$proc : Process# = sfill# [us$k] [Int#] x16 x16$s in
                   let x6$proc : Process#
                         = sreduce# [us$k] [Int#] x6$ref
                               (\(x3 x4 : Int#). add# [Int#] x3 x4) 0i# x2$s in
                   pjoin# x6$proc x16$proc) in
      let x6 : Int# = read# [Int#] x6$ref in
      let x19 : Vector# Int#
            = vnew# [Int#] (vlength# [Int#] vs) in
      let _ : Bool#
            = runProcess# [Int#] x9
                  (/\(vs$k : Rate).
                    \(_ : RateNat# vs$k).\(x9$s : Series# vs$k Int#).
                   let x19$s : Series# vs$k Int#
                         = smap# [vs$k] [Int#] [Int#]
                               (\(x17 : Int#). add# [Int#] x6 x17) x9$s in
                   let x19$proc : Process# = sfill# [vs$k] [Int#] x19 x19$s in
                   x19$proc) in
      T2# [Vector# Int#] [Vector# Int#] x16 x19
}
