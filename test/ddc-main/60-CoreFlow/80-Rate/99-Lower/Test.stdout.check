ok
ok


-- Simple fold over a vector
module Test with
letrec {
  x3$runproc$process : [t1 : Rate].Ref# Int# -> RateNat# t1 -> Series# t1 Int# -> Unit
    = /\(t1 : Rate).
       \(x0 : Ref# Int#).\(_ : RateNat# t1).\(x2 : Series# t1 Int#).
      let x0$init : Int# = read# [Int#] x0 in
      let x0$acc : Ref# Int# = new# [Int#] x0$init in
      let _ : Unit
            = loop# [t1]
                  (\(x1 : Nat#).
                   let x2$elem : Int# = next# [Int#] [t1] x2 x1 in
                   let x0$val : Int# = read# [Int#] x0$acc in
                   let x3 : Int# = add# [Int#] x0$val x2$elem in
                   let _ : Unit = write# [Int#] x0$acc x3 in
                   ()) in
      let x0$res : Int# = read# [Int#] x0$acc in
      let _ : Unit = write# [Int#] x0 x0$res in
      ();
  
  test : Vector# Int# -> Int#
    = \(x8 : Vector# Int#).
      let x9 : Ref# Int# = new# [Int#] 0i# in
      let x14 : Bool#
            = runKernel# [Int#] x8
                  (/\(t10 : Rate).
                    \(x11 : RateNat# t10).\(x12 : Series# t10 Int#). x3$runproc$process [t10] x9 x11 x12) in
      let x16 : Int# = read# [Int#] x9 in
      x16
}


-- Something like a normalise
module Test with
letrec {
  x3$runproc$process : [t1 : Rate].Ref# Int# -> RateNat# t1 -> Series# t1 Int# -> Unit
    = /\(t1 : Rate).
       \(x0 : Ref# Int#).\(_ : RateNat# t1).\(x2 : Series# t1 Int#).
      let x0$init : Int# = read# [Int#] x0 in
      let x0$acc : Ref# Int# = new# [Int#] x0$init in
      let _ : Unit
            = loop# [t1]
                  (\(x1 : Nat#).
                   let x2$elem : Int# = next# [Int#] [t1] x2 x1 in
                   let x0$val : Int# = read# [Int#] x0$acc in
                   let x6 : Int# = add# [Int#] x0$val x2$elem in
                   let _ : Unit = write# [Int#] x0$acc x6 in
                   ()) in
      let x0$res : Int# = read# [Int#] x0$acc in
      let _ : Unit = write# [Int#] x0 x0$res in
      ();
  
  x5$runproc$process : [t10 : Rate].Vector# Int# -> Int# -> RateNat# t10 -> Series# t10 Int# -> Unit
    = /\(t10 : Rate).
       \(x8 : Vector# Int#).\(x9 : Int#).\(_ : RateNat# t10).\(x11 : Series# t10 Int#).
      let _ : Unit
            = loop# [t10]
                  (\(x5 : Nat#).
                   let x11$elem : Int# = next# [Int#] [t10] x11 x5 in
                   let x14$elem : Int# = div# [Int#] x11$elem x9 in
                   let _ : Unit = vwrite# [Int#] x8 x5 x14$elem in
                   ()) in
      ();
  
  test : Vector# Int# -> Vector# Int#
    = \(x17 : Vector# Int#).
      let x18 : Ref# Int# = new# [Int#] 0i# in
      let x23 : Bool#
            = runKernel# [Int#] x17
                  (/\(t19 : Rate).
                    \(x20 : RateNat# t19).\(x21 : Series# t19 Int#). x3$runproc$process [t19] x18 x20 x21) in
      let x25 : Int# = read# [Int#] x18 in
      let x26 : Nat# = vlength# [Int#] x17 in
      let x27 : Vector# Int# = vnew# [Int#] x26 in
      let x33 : Bool#
            = runKernel# [Int#] x17
                  (/\(t29 : Rate).
                    \(x30 : RateNat# t29).\(x31 : Series# t29 Int#). x5$runproc$process [t29] x27 x25 x30 x31) in
      x27
}


-- Filter and two folds, then use fold values in map over original and filtered. Three kernels:
-- 1- filter, fold, fold
-- 2- map original
-- 3- map filtered
module Test with
letrec {
  x10$runproc$process : [t1 : Rate].Ref# Int# -> RateNat# t1 -> Series# t1 Int# -> Unit
    = /\(t1 : Rate).
       \(x0 : Ref# Int#).\(_ : RateNat# t1).\(x2 : Series# t1 Int#).
      let x0$init : Int# = read# [Int#] x0 in
      let x0$acc : Ref# Int# = new# [Int#] x0$init in
      let _ : Unit
            = loop# [t1]
                  (\(x1 : Nat#).
                   let x2$elem : Int# = next# [Int#] [t1] x2 x1 in
                   let x0$val : Int# = read# [Int#] x0$acc in
                   let x13 : Int# = add# [Int#] x0$val x2$elem in
                   let _ : Unit = write# [Int#] x0$acc x13 in
                   ()) in
      let x0$res : Int# = read# [Int#] x0$acc in
      let _ : Unit = write# [Int#] x0 x0$res in
      ();
  
  x2$runproc$process : [t11 : Rate].Vector# Int# -> Ref# Int# -> Int# -> RateNat# t11 -> Series# t11 Int# -> Unit
    = /\(t11 : Rate).
       \(x8 : Vector# Int#).\(x9 : Ref# Int#).\(x10 : Int#).\(_ : RateNat# t11).\(x12 : Series# t11 Int#).
      let t17$count : Ref# Nat# = new# [Nat#] 0# in
      let x9$init : Int# = read# [Int#] x9 in
      let x9$acc : Ref# Int# = new# [Int#] x9$init in
      let _ : Unit
            = loop# [t11]
                  (\(x5 : Nat#).
                   let x12$elem : Int# = next# [Int#] [t11] x12 x5 in
                   let x15$elem : Bool# = gt# [Int#] 1i# x12$elem in
                   let _ : Unit
                         = guard# t17$count x15$elem
                               (\(x6 : Nat#).
                                let x9$val : Int# = read# [Int#] x9$acc in
                                let x14 : Int# = add# [Int#] x9$val x12$elem in
                                let _ : Unit = write# [Int#] x9$acc x14 in
                                let x27$elem : Int# = add# [Int#] x10 x12$elem in
                                let _ : Unit = vwrite# [Int#] x8 x6 x27$elem in
                                ()) in
                   ()) in
      let x9$res : Int# = read# [Int#] x9$acc in
      let _ : Unit = write# [Int#] x9 x9$res in
      let x7 : Nat# = read# [Nat#] t17$count in
      let _ : Unit = vtrunc# [Int#] x7 x8 in
      ();
  
  x13$runproc$process : [t35 : Rate].Vector# Int# -> Int# -> RateNat# t35 -> Series# t35 Int# -> Unit
    = /\(t35 : Rate).
       \(x33 : Vector# Int#).\(x34 : Int#).\(_ : RateNat# t35).\(x36 : Series# t35 Int#).
      let _ : Unit
            = loop# [t35]
                  (\(x11 : Nat#).
                   let x36$elem : Int# = next# [Int#] [t35] x36 x11 in
                   let x39$elem : Int# = add# [Int#] x34 x36$elem in
                   let _ : Unit = vwrite# [Int#] x33 x11 x39$elem in
                   ()) in
      ();
  
  test : Vector# Int# -> Tuple2# (Vector# Int#) (Vector# Int#)
    = \(x42 : Vector# Int#).
      let x43 : Ref# Int# = new# [Int#] 0i# in
      let x48 : Bool#
            = runKernel# [Int#] x42
                  (/\(t44 : Rate).
                    \(x45 : RateNat# t44).\(x46 : Series# t44 Int#). x10$runproc$process [t44] x43 x45 x46) in
      let x50 : Int# = read# [Int#] x43 in
      let x51 : Ref# Int# = new# [Int#] 0i# in
      let x52 : Nat# = vlength# [Int#] x42 in
      let x53 : Vector# Int# = vnew# [Int#] x52 in
      let x59 : Bool#
            = runKernel# [Int#] x42
                  (/\(t55 : Rate).
                    \(x56 : RateNat# t55).\(x57 : Series# t55 Int#). x2$runproc$process [t55] x53 x51 x50 x56 x57) in
      let x61 : Int# = read# [Int#] x51 in
      let x62 : Nat# = vlength# [Int#] x42 in
      let x63 : Vector# Int# = vnew# [Int#] x62 in
      let x69 : Bool#
            = runKernel# [Int#] x42
                  (/\(t65 : Rate).
                    \(x66 : RateNat# t65).\(x67 : Series# t65 Int#). x13$runproc$process [t65] x63 x61 x66 x67) in
      T2# [Vector# Int#] [Vector# Int#] x63 x53
}

