ok
ok


-- Simple fold over a vector
module Test with
letrec {
  x3$runproc$process : [u1$k : Rate].RateVec# u1$k Int# -> Ref# Int# -> [x3$PROC : Proc].Unit -> Unit
    = /\(u1$k : Rate).
       \(u1$rv : RateVec# u1$k Int#).\(x3$ref : Ref# Int#).
      /\(x3$PROC : Proc).
       \(_ : Unit).
      let u1$s : Series# x3$PROC u1$k Int# = series# [x3$PROC] [u1$k] [Int#] u1$rv in
      let x3$ref$init : Int# = read# [Int#] x3$ref in
      let x3$ref$acc : Ref# Int# = new# [Int#] x3$ref$init in
      let _ : Unit
            = loop# [u1$k]
                  (\(x5 : Nat#).
                   let u1$s$elem : Int# = next# [Int#] [x3$PROC] [u1$k] u1$s x5 in
                   let x3$ref$val : Int# = read# [Int#] x3$ref$acc in
                   let x6 : Int# = add# [Int#] x3$ref$val u1$s$elem in
                   let _ : Unit = write# [Int#] x3$ref$acc x6 in
                   ()) in
      let x3$ref$res : Int# = read# [Int#] x3$ref$acc in
      let _ : Unit = write# [Int#] x3$ref x3$ref$res in
      ();
  
  test : Vector# Int# -> Int#
    = \(u1 : Vector# Int#).
      let x3$ref : Ref# Int# = new# [Int#] 0i# in
      let x3$runproc : Unit
            = ratify1# [Int#] [Unit] u1
                  (/\(u1$k : Rate).
                    \(u1$rv : RateVec# u1$k Int#).
                   let x3 : [t1 : Proc].Unit -> Unit
                         = /\(t1 : Proc).
                            \(x2 : Unit). x3$runproc$process [u1$k] u1$rv x3$ref [t1] x2 in
                   let x4 : Unit = runProcessUnit# [u1$k] x3 in
                   x4) in
      let x3 : Int# = read# [Int#] x3$ref in
      x3
}


-- Something like a normalise
module Test with
letrec {
  n$runproc$process : [x4$'$k : Rate].RateVec# x4$'$k Int# -> Ref# Int# -> [n$PROC : Proc].Unit -> Unit
    = /\(x4$'$k : Rate).
       \(us$rv : RateVec# x4$'$k Int#).\(n$ref : Ref# Int#).
      /\(n$PROC : Proc).
       \(_ : Unit).
      let us$s : Series# n$PROC x4$'$k Int# = series# [n$PROC] [x4$'$k] [Int#] us$rv in
      let n$ref$init : Int# = read# [Int#] n$ref in
      let n$ref$acc : Ref# Int# = new# [Int#] n$ref$init in
      let _ : Unit
            = loop# [x4$'$k]
                  (\(x2 : Nat#).
                   let us$s$elem : Int# = next# [Int#] [n$PROC] [x4$'$k] us$s x2 in
                   let n$ref$val : Int# = read# [Int#] n$ref$acc in
                   let x8 : Int# = add# [Int#] n$ref$val us$s$elem in
                   let _ : Unit = write# [Int#] n$ref$acc x8 in
                   ()) in
      let n$ref$res : Int# = read# [Int#] n$ref$acc in
      let _ : Unit = write# [Int#] n$ref n$ref$res in
      ();
  
  x4$runproc$process : [x4$'$k : Rate].RateVec# x4$'$k Int# -> Vector# Int# -> Int# -> [x4$PROC : Proc].Unit -> Unit
    = /\(x4$'$k : Rate).
       \(us$rv : RateVec# x4$'$k Int#).\(x4 : Vector# Int#).\(n : Int#).
      /\(x4$PROC : Proc).
       \(_ : Unit).
      let x4$buf : Buffer# Int# = vbuf# [Int#] x4 in
      let us$s : Series# x4$PROC x4$'$k Int# = series# [x4$PROC] [x4$'$k] [Int#] us$rv in
      let _ : Unit
            = loop# [x4$'$k]
                  (\(x6 : Nat#).
                   let us$s$elem : Int# = next# [Int#] [x4$PROC] [x4$'$k] us$s x6 in
                   let x4$s$elem : Int# = div# [Int#] us$s$elem n in
                   let _ : Unit = vwrite# [Int#] x4$buf x6 x4$s$elem in
                   ()) in
      ();
  
  test : Vector# Int# -> Vector# Int#
    = \(us : Vector# Int#).
      let n$ref : Ref# Int# = new# [Int#] 0i# in
      let n$runproc : Unit
            = ratify1# [Int#] [Unit] us
                  (/\(x4$'$k : Rate).
                    \(us$rv : RateVec# x4$'$k Int#).
                   let x4 : [t2 : Proc].Unit -> Unit
                         = /\(t2 : Proc).
                            \(x3 : Unit). n$runproc$process [x4$'$k] us$rv n$ref [t2] x3 in
                   let x5 : Unit = runProcessUnit# [x4$'$k] x4 in
                   x5) in
      let n : Int# = read# [Int#] n$ref in
      let x7 : Nat# = vlength# [Int#] us in
      let x4 : Vector# Int# = vnew# [Int#] x7 in
      let x4$runproc : Unit
            = ratify1# [Int#] [Unit] us
                  (/\(x4$'$k : Rate).
                    \(us$rv : RateVec# x4$'$k Int#).
                   let x10 : [t8 : Proc].Unit -> Unit
                         = /\(t8 : Proc).
                            \(x9 : Unit). x4$runproc$process [x4$'$k] us$rv x4 n [t8] x9 in
                   let x11 : Unit = runProcessUnit# [x4$'$k] x10 in
                   x11) in
      x4
}


-- Filter and two folds, then use fold values in map over original and filtered. Three kernels:
-- 1- filter, fold, fold
-- 2- map original
-- 3- map filtered
Error transforming core program.
  Kind mismatch.
                  Expected kind: Proc
   does not match inferred kind: Rate
  
  with: morig$'$k

