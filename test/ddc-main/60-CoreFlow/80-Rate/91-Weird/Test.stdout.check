ok

-- I don't remember the details, but something strange with forwarding was going on here
module Test with
let x5$runproc$process : Vector# Nat# -> Nat# -> Nat# -> [x5$'$k : Rate].RateNat# x5$'$k -> Process#
      = \(x6 : Vector# Nat#).\(x y : Nat#).
        /\(x5$'$k : Rate).
         \(x5$'$k$r : RateNat# x5$'$k).
        let x5$s : Series# x5$'$k Nat#
              = sgenerate# [x5$'$k] [Nat#]
                    (\(x3 : Nat#). add# [Nat#] y x3) in
        let x6$s : Series# x5$'$k Nat#
              = smap# [x5$'$k] [Nat#] [Nat#]
                    (\(x1 : Nat#). add# [Nat#] x x1) x5$s in
        let x6$proc : Process# = sfill# [x5$'$k] [Nat#] x6 x6$s in
        x6$proc
letrec {
  foo : Vector# Nat# -> Nat# -> Vector# Nat#
    = \(m : Vector# Nat#).\(i : Nat#).
      let x0 : Nat# = add# [Nat#] 2# 1# in
      let y : Nat# = add# [Nat#] 1# x0 in
      let x : Nat# = add# [Nat#] y y in
      let x6 : Vector# Nat# = vnew# [Nat#] i in
      let x5$runproc : Bool#
            = runProcess0# i (x5$runproc$process x6 x y) in
      x6
}

