ok
ok


-- Fuse map into fill.
module Test with
letrec {
  map : [t0 : Rate].Vector# Int# -> Series# t0 Int# -> Unit
    = /\(t0 : Rate).
       \(x1 : Vector# Int#).\(x2 : Series# t0 Int#).
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x2$elem = next# [Int#] [t0] x2 x0 in
                   let x3 = mul# [Int#] x2$elem 2i# in
                   let x7$elem = add# [Int#] x3 1i# in
                   let _ = vwrite# [Int#] x1 x0 x7$elem in
                   ()) in
      ()
}


-- Fuse map into fold.
module Test with
letrec {
  foldMap : [t0 : Rate].Ref# Int# -> Series# t0 Int# -> Unit
    = /\(t0 : Rate).
       \(x1 : Ref# Int#).\(x2 : Series# t0 Int#).
      let x1$init = read# [Int#] x1 in
      let x1$acc = new# [Int#] x1$init in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x2$elem = next# [Int#] [t0] x2 x0 in
                   let x8$elem = mul# [Int#] x2$elem 2i# in
                   let x1$val = read# [Int#] x1$acc in
                   let x3 = add# [Int#] x1$val x8$elem in
                   let _ = write# [Int#] x1$acc x3 in
                   ()) in
      let x1$res = read# [Int#] x1$acc in
      let _ = write# [Int#] x1 x1$res in
      ()
}


-- Map/Map fusion, filling a vector.
module Test with
letrec {
  map : [t0 : Rate].Vector# Int# -> Series# t0 Int# -> Unit
    = /\(t0 : Rate).
       \(x1 : Vector# Int#).\(x2 : Series# t0 Int#).
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x2$elem = next# [Int#] [t0] x2 x0 in
                   let x7$elem = add# [Int#] 1i# x2$elem in
                   let x9$elem = mul# [Int#] 2i# x7$elem in
                   let _ = vwrite# [Int#] x1 x0 x9$elem in
                   ()) in
      ()
}


-- Map and Reduce the same series.
module Test with
letrec {
  foldMap : [t0 : Rate].Vector# Int# -> Ref# Int# -> Series# t0 Int# -> Unit
    = /\(t0 : Rate).
       \(x1 : Vector# Int#).\(x2 : Ref# Int#).\(x3 : Series# t0 Int#).
      let x2$init = read# [Int#] x2 in
      let x2$acc = new# [Int#] x2$init in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x3$elem = next# [Int#] [t0] x3 x0 in
                   let x6$elem = mul# [Int#] 2i# x3$elem in
                   let x10$elem = add# [Int#] 1i# x6$elem in
                   let x2$val = read# [Int#] x2$acc in
                   let x4 = add# [Int#] x2$val x3$elem in
                   let _ = write# [Int#] x2$acc x4 in
                   let _ = vwrite# [Int#] x1 x0 x10$elem in
                   ()) in
      let x2$res = read# [Int#] x2$acc in
      let _ = write# [Int#] x2 x2$res in
      ()
}
