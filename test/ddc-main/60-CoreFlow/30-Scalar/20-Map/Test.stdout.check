ok
ok


-- Fuse map into fill.
module Test with
letrec {
  map: [p: Proc].[k: Rate].Vector# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(v: Vector# Int#).λ(ins: RateVec# k Int#).
      let v$buf  
            = vbuf# [Int#] v in
      let x3     
            = series# [p] [k] [Int#] ins in
      let x2     
            = loop# [k]
                  (λ(x0: Nat#).
                   let x3$elem
                         = next# [Int#] [p] [k] x3 x0 in
                   let x4      = mul# [Int#] x3$elem 2i# in
                   let x4$elem
                         = add# [Int#] x4 1i# in
                   let x1     
                         = vwrite# [Int#] v$buf x0 x4$elem in
                   ()) in
      ()
}


-- Fuse map into fold.
module Test with
letrec {
  foldMap: [p: Proc].[k: Rate].Ref# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(x: Ref# Int#).λ(ins: RateVec# k Int#).
      let x4     
            = series# [p] [k] [Int#] ins in
      let x$init 
            = read# [Int#] x in
      let x$acc  
            = new# [Int#] x$init in
      let x5     
            = loop# [k]
                  (λ(x2: Nat#).
                   let x4$elem
                         = next# [Int#] [p] [k] x4 x2 in
                   let x5$elem
                         = mul# [Int#] x4$elem 2i# in
                   let x$val  
                         = read# [Int#] x$acc in
                   let x7      = add# [Int#] x$val x5$elem in
                   let x3     
                         = write# [Int#] x$acc x7 in
                   ()) in
      let x$res  
            = read# [Int#] x$acc in
      let x6     
            = write# [Int#] x x$res in
      ()
}


-- Map/Map fusion, filling a vector.
module Test with
letrec {
  map: [p: Proc].[k: Rate].Vector# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(v: Vector# Int#).λ(ins: RateVec# k Int#).
      let v$buf  
            = vbuf# [Int#] v in
      let x4     
            = series# [p] [k] [Int#] ins in
      let x5     
            = loop# [k]
                  (λ(x1: Nat#).
                   let x4$elem
                         = next# [Int#] [p] [k] x4 x1 in
                   let x5$elem
                         = add# [Int#] 1i# x4$elem in
                   let x6$elem
                         = mul# [Int#] 2i# x5$elem in
                   let x3     
                         = vwrite# [Int#] v$buf x1 x6$elem in
                   ()) in
      ()
}


-- Map and Reduce the same series.
module Test with
letrec {
  foldMap: [p: Proc].[k: Rate].Vector# Int# -> Ref# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(v: Vector# Int#).λ(x: Ref# Int#).λ(ins: RateVec# k Int#).
      let v$buf  
            = vbuf# [Int#] v in
      let s      
            = series# [p] [k] [Int#] ins in
      let x$init 
            = read# [Int#] x in
      let x$acc  
            = new# [Int#] x$init in
      let x7     
            = loop# [k]
                  (λ(x1: Nat#).
                   let s$elem 
                         = next# [Int#] [p] [k] s x1 in
                   let x$val  
                         = read# [Int#] x$acc in
                   let x9      = add# [Int#] x$val s$elem in
                   let x3     
                         = write# [Int#] x$acc x9 in
                   let s2$elem
                         = mul# [Int#] 2i# s$elem in
                   let s3$elem
                         = add# [Int#] 1i# s2$elem in
                   let x6     
                         = vwrite# [Int#] v$buf x1 s3$elem in
                   ()) in
      let x$res  
            = read# [Int#] x$acc in
      let x8     
            = write# [Int#] x x$res in
      ()
}
