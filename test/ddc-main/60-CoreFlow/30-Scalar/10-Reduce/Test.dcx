:set SuppressLetTypes


-- Single reduction of input series.
:flow-lower..
module Test with letrec
fold    [k : Rate] (x : Ref# Int#) 
        (s : Series# k Int#) : Process#
 = sreduce# [k] [Int#] x (add# [Int#]) 0i# s
;;


-- Two reductions over the same input series.
:flow-lower..
module Test with letrec
ffold   [k : Rate] (x1 x2 : Ref# Int#)
        (s : Series# k Int#) : Process#
 = pjoin# (sreduce# [k] [Int#] x1 (add# [Int#]) 0i# s)
          (sreduce# [k] [Int#] x2 (mul# [Int#]) 1i# s)
;;


-- Three reductions over the same input series
:flow-lower..
module Test with letrec
fffold  [k : Rate] (x1 x2 x3 : Ref# Int#)
        (s : Series# k Int#) : Process#
 = pjoin# (sreduce# [k] [Int#] x1 (add# [Int#]) 0i# s)
 ( pjoin# (sreduce# [k] [Int#] x2 (mul# [Int#]) 1i# s)
          (sreduce# [k] [Int#] x3 (mul# [Int#]) 1i# s))
;;

