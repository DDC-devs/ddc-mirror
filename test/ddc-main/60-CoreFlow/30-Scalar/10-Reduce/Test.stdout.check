ok
ok


-- Single reduction of input series.
module Test with
letrec {
  fold: [p: Proc].[k: Rate].Ref# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(x: Ref# Int#).λ(v: RateVec# k Int#).
      let s      
            = series# [p] [k] [Int#] v in
      let x$init 
            = read# [Int#] x in
      let x$acc  
            = new# [Int#] x$init in
      let x4     
            = loop# [k]
                  (λ(x2: Nat#).
                   let s$elem 
                         = next# [Int#] [p] [k] s x2 in
                   let x$val  
                         = read# [Int#] x$acc in
                   let x6      = add# [Int#] x$val s$elem in
                   let x3     
                         = write# [Int#] x$acc x6 in
                   ()) in
      let x$res  
            = read# [Int#] x$acc in
      let x5     
            = write# [Int#] x x$res in
      ()
}


-- Two reductions over the same input series.
module Test with
letrec {
  ffold: [p: Proc].[k: Rate].Ref# Int# -> Ref# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(x1 x2: Ref# Int#).λ(v: RateVec# k Int#).
      let s      
            = series# [p] [k] [Int#] v in
      let x1$init
            = read# [Int#] x1 in
      let x1$acc 
            = new# [Int#] x1$init in
      let x2$init
            = read# [Int#] x2 in
      let x2$acc 
            = new# [Int#] x2$init in
      let x9     
            = loop# [k]
                  (λ(x4: Nat#).
                   let s$elem 
                         = next# [Int#] [p] [k] s x4 in
                   let x1$val 
                         = read# [Int#] x1$acc in
                   let x12     = add# [Int#] x1$val s$elem in
                   let x5     
                         = write# [Int#] x1$acc x12 in
                   let x2$val 
                         = read# [Int#] x2$acc in
                   let x13     = mul# [Int#] x2$val s$elem in
                   let x8     
                         = write# [Int#] x2$acc x13 in
                   ()) in
      let x1$res 
            = read# [Int#] x1$acc in
      let x10    
            = write# [Int#] x1 x1$res in
      let x2$res 
            = read# [Int#] x2$acc in
      let x11    
            = write# [Int#] x2 x2$res in
      ()
}


-- Three reductions over the same input series
module Test with
letrec {
  fffold: [p: Proc].[k: Rate].Ref# Int# -> Ref# Int# -> Ref# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(x1 x2 x3: Ref# Int#).λ(v: RateVec# k Int#).
      let s      
            = series# [p] [k] [Int#] v in
      let x1$init
            = read# [Int#] x1 in
      let x1$acc 
            = new# [Int#] x1$init in
      let x2$init
            = read# [Int#] x2 in
      let x2$acc 
            = new# [Int#] x2$init in
      let x3$init
            = read# [Int#] x3 in
      let x3$acc 
            = new# [Int#] x3$init in
      let x13    
            = loop# [k]
                  (λ(x5: Nat#).
                   let s$elem 
                         = next# [Int#] [p] [k] s x5 in
                   let x1$val 
                         = read# [Int#] x1$acc in
                   let x17     = add# [Int#] x1$val s$elem in
                   let x6     
                         = write# [Int#] x1$acc x17 in
                   let x2$val 
                         = read# [Int#] x2$acc in
                   let x18     = mul# [Int#] x2$val s$elem in
                   let x9     
                         = write# [Int#] x2$acc x18 in
                   let x3$val 
                         = read# [Int#] x3$acc in
                   let x19     = mul# [Int#] x3$val s$elem in
                   let x10    
                         = write# [Int#] x3$acc x19 in
                   ()) in
      let x1$res 
            = read# [Int#] x1$acc in
      let x14    
            = write# [Int#] x1 x1$res in
      let x2$res 
            = read# [Int#] x2$acc in
      let x15    
            = write# [Int#] x2 x2$res in
      let x3$res 
            = read# [Int#] x3$acc in
      let x16    
            = write# [Int#] x3 x3$res in
      ()
}

