ok
ok
ok


-- Multiply a parameter series by one created with replication.
module Test with
letrec {
  repsme : [t0 : Rate].Series# t0 Float32# -> Vector# Float32# -> Unit
    = /\(t0 : Rate).
       \(x1 : Series# t0 Float32#).\(x2 : Vector# Float32#).
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x1$elem = next# [Float32#] [t0] x1 x0 in
                   let x7$elem = mul# [Float32#] 23.0f32# x1$elem in
                   let _ = vwrite# [Float32#] x2 x0 x7$elem in
                   ()) in
      ()
}


-- Fill a vector with segmentedly replicated elements.
module Test with
letrec {
  repsme : [t0 : Rate].Series# t0 Nat# -> Series# t0 Float32# -> Vector# Float32# -> Unit
    = /\(t0 : Rate).
       \(x1 : Series# t0 Nat#).\(x2 : Series# t0 Float32#).\(x3 : Vector# Float32#).
      let t4$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x1$elem = next# [Nat#] [t0] x1 x0 in
                   let x2$elem = next# [Float32#] [t0] x2 x0 in
                   let _
                         = segment# t4$count x1$elem
                               (\(x4 x5 : Nat#).
                                let x9$elem = mul# [Float32#] 2.0f32# x2$elem in
                                let _ = vwrite# [Float32#] x3 x5 x9$elem in
                                ()) in
                   ()) in
      ()
}


-- Multiply two series created by reps.
-- In the lowered code the multiply ends up in the segment context.
module Test with
letrec {
  repsme : [t0 : Rate].Series# t0 Nat# -> Series# t0 Float32# -> Series# t0 Float32# -> Vector# Float32# -> Unit
    = /\(t0 : Rate).
       \(x1 : Series# t0 Nat#).\(x2 x3 : Series# t0 Float32#).\(x4 : Vector# Float32#).
      let t5$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x1$elem = next# [Nat#] [t0] x1 x0 in
                   let x2$elem = next# [Float32#] [t0] x2 x0 in
                   let x3$elem = next# [Float32#] [t0] x3 x0 in
                   let _
                         = segment# t5$count x1$elem
                               (\(x5 x6 : Nat#).
                                let x12$elem = mul# [Float32#] x2$elem x3$elem in
                                let _ = vwrite# [Float32#] x4 x6 x12$elem in
                                ()) in
                   ()) in
      ()
}


-- As above, but do the multiplication before replication.
module Test with
letrec {
  repsme : [t0 : Rate].Series# t0 Nat# -> Series# t0 Float32# -> Series# t0 Float32# -> Vector# Float32# -> Unit
    = /\(t0 : Rate).
       \(x1 : Series# t0 Nat#).\(x2 x3 : Series# t0 Float32#).\(x4 : Vector# Float32#).
      let t5$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x1$elem = next# [Nat#] [t0] x1 x0 in
                   let x2$elem = next# [Float32#] [t0] x2 x0 in
                   let x3$elem = next# [Float32#] [t0] x3 x0 in
                   let x10$elem = mul# [Float32#] x2$elem x3$elem in
                   let _
                         = segment# t5$count x1$elem
                               (\(x5 x6 : Nat#).
                                let _ = vwrite# [Float32#] x4 x6 x10$elem in
                                ()) in
                   ()) in
      ()
}
