ok
ok

module Test with
letrec {
  mm: [p: Proc].[k: Rate].Vector# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(out1: Vector# Int#).λ(ins: RateVec# k Int#).
      let out1$buf
            = vbuf# [Int#] out1 in
      let out1$count
            = new# [Nat#] 0# in
      let ins1   
            = series# [p] [k] [Int#] ins in
      let ins2   
            = series# [p] [k] [Int#] ins in
      let x3     
            = loop# [k]
                  (λ(x0: Nat#).
                   let ins1$elem
                         = next# [Int#] [p] [k] ins1 x0 in
                   let ^       = read# [Nat#] out1$count in
                   let x1     
                         = vwrite# [Int#] out1$buf ^0 ins1$elem in
                   let ^       = read# [Nat#] out1$count in
                   let ^       = add# [Nat#] ^0 1# in
                   let x2     
                         = write# [Nat#] out1$count ^0 in
                   ()) in
      let x7     
            = loop# [k]
                  (λ(x4: Nat#).
                   let ins2$elem
                         = next# [Int#] [p] [k] ins2 x4 in
                   let ^       = read# [Nat#] out1$count in
                   let x5     
                         = vwrite# [Int#] out1$buf ^0 ins2$elem in
                   let ^       = read# [Nat#] out1$count in
                   let ^       = add# [Nat#] ^0 1# in
                   let x6     
                         = write# [Nat#] out1$count ^0 in
                   ()) in
      let x8     
            = read# [Nat#] out1$count in
      let x9     
            = vtrunc# [Int#] x8 out1 in
      ()
}


module Test with
letrec {
  mm: [p: Proc].[k: Rate].Vector# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(out2: Vector# Int#).λ(ins: RateVec# k Int#).
      let out2$buf
            = vbuf# [Int#] out2 in
      let out2$count
            = new# [Nat#] 0# in
      let ins'   
            = series# [p] [k] [Int#] ins in
      let ins'   
            = series# [p] [k] [Int#] ins in
      let x7     
            = loop# [k]
                  (λ(x1: Nat#).
                   let ins'$elem
                         = next# [Int#] [p] [k] ins' x1 in
                   let ap2$elem
                         = add# [Int#] 1i# ins'$elem in
                   let lts$elem
                         = gt# [Int#] 1i# ap2$elem in
                   let x6     
                         = guard# lts$elem
                               (λ(x3: Unit).
                                let x16     = read# [Nat#] out2$count in
                                let x4     
                                      = vwrite# [Int#] out2$buf x16 ap2$elem in
                                let x17     = read# [Nat#] out2$count in
                                let x18     = add# [Nat#] x17 1# in
                                let x5     
                                      = write# [Nat#] out2$count x18 in
                                ()) in
                   ()) in
      let x13    
            = loop# [k]
                  (λ(x8: Nat#).
                   let ins'$elem
                         = next# [Int#] [p] [k] ins' x8 in
                   let ap2$elem
                         = add# [Int#] 1i# ins'$elem in
                   let lts$elem
                         = gt# [Int#] 1i# ap2$elem in
                   let x12    
                         = guard# lts$elem
                               (λ(x9: Unit).
                                let x19     = read# [Nat#] out2$count in
                                let x10    
                                      = vwrite# [Int#] out2$buf x19 ap2$elem in
                                let x20     = read# [Nat#] out2$count in
                                let x21     = add# [Nat#] x20 1# in
                                let x11    
                                      = write# [Nat#] out2$count x21 in
                                ()) in
                   ()) in
      let x14    
            = read# [Nat#] out2$count in
      let x15    
            = vtrunc# [Int#] x14 out2 in
      ()
}


module Test with
letrec {
  mm: [p: Proc].[k: Rate].Vector# Int# -> Vector# Int# -> RateVec# k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(out1 out2: Vector# Int#).λ(ins: RateVec# k Int#).
      let out1$buf
            = vbuf# [Int#] out1 in
      let out2$buf
            = vbuf# [Int#] out2 in
      let out1$count
            = new# [Nat#] 0# in
      let out2$count
            = new# [Nat#] 0# in
      let ins'   
            = series# [p] [k] [Int#] ins in
      let ins'   
            = series# [p] [k] [Int#] ins in
      let x9     
            = loop# [k]
                  (λ(x1: Nat#).
                   let ins'$elem
                         = next# [Int#] [p] [k] ins' x1 in
                   let x22     = read# [Nat#] out1$count in
                   let x3     
                         = vwrite# [Int#] out1$buf x22 ins'$elem in
                   let x23     = read# [Nat#] out1$count in
                   let x24     = add# [Nat#] x23 1# in
                   let x4     
                         = write# [Nat#] out1$count x24 in
                   let ap2$elem
                         = add# [Int#] 1i# ins'$elem in
                   let lts$elem
                         = gt# [Int#] 1i# ap2$elem in
                   let x8     
                         = guard# lts$elem
                               (λ(x5: Unit).
                                let x25     = read# [Nat#] out2$count in
                                let x6     
                                      = vwrite# [Int#] out2$buf x25 ap2$elem in
                                let x26     = read# [Nat#] out2$count in
                                let x27     = add# [Nat#] x26 1# in
                                let x7     
                                      = write# [Nat#] out2$count x27 in
                                ()) in
                   ()) in
      let x17    
            = loop# [k]
                  (λ(x10: Nat#).
                   let ins'$elem
                         = next# [Int#] [p] [k] ins' x10 in
                   let x28     = read# [Nat#] out1$count in
                   let x11    
                         = vwrite# [Int#] out1$buf x28 ins'$elem in
                   let x29     = read# [Nat#] out1$count in
                   let x30     = add# [Nat#] x29 1# in
                   let x12    
                         = write# [Nat#] out1$count x30 in
                   let ap2$elem
                         = add# [Int#] 1i# ins'$elem in
                   let lts$elem
                         = gt# [Int#] 1i# ap2$elem in
                   let x16    
                         = guard# lts$elem
                               (λ(x13: Unit).
                                let x31     = read# [Nat#] out2$count in
                                let x14    
                                      = vwrite# [Int#] out2$buf x31 ap2$elem in
                                let x32     = read# [Nat#] out2$count in
                                let x33     = add# [Nat#] x32 1# in
                                let x15    
                                      = write# [Nat#] out2$count x33 in
                                ()) in
                   ()) in
      let x18    
            = read# [Nat#] out1$count in
      let x19    
            = vtrunc# [Int#] x18 out1 in
      let x20    
            = read# [Nat#] out2$count in
      let x21    
            = vtrunc# [Int#] x20 out2 in
      ()
}

module Test with
letrec {
  mm: [p: Proc].[k: Rate].Vector# Int# -> Vector# Int# -> Vector# Int# -> Series# p k Int# -> Series# p k Int# -> Unit
    = Λ(p: Proc).Λ(k: Rate).
      λ(out1 out2 out3: Vector# Int#).λ(ins1 ins2: Series# p k Int#).
      let out1$buf
            = vbuf# [Int#] out1 in
      let out2$buf
            = vbuf# [Int#] out2 in
      let out3$buf
            = vbuf# [Int#] out3 in
      let out1$count
            = new# [Nat#] 0# in
      let out2$count
            = new# [Nat#] 0# in
      let out3$count
            = new# [Nat#] 0# in
      let x15    
            = loop# [k]
                  (λ(x1: Nat#).
                   let ins1$elem
                         = next# [Int#] [p] [k] ins1 x1 in
                   let x30     = read# [Nat#] out1$count in
                   let x3     
                         = vwrite# [Int#] out1$buf x30 ins1$elem in
                   let x31     = read# [Nat#] out1$count in
                   let x32     = add# [Nat#] x31 1# in
                   let x5     
                         = write# [Nat#] out1$count x32 in
                   let ap2$elem
                         = add# [Int#] 1i# ins1$elem in
                   let lts$elem
                         = gt# [Int#] 1i# ap2$elem in
                   let popop$elem
                         = add# [Int#] 2i# ap2$elem in
                   let xs$elem
                         = gt# [Int#] 1i# ins1$elem in
                   let x10    
                         = guard# lts$elem
                               (λ(x6: Unit).
                                let x33     = read# [Nat#] out2$count in
                                let x7     
                                      = vwrite# [Int#] out2$buf x33 popop$elem in
                                let x34     = read# [Nat#] out2$count in
                                let x35     = add# [Nat#] x34 1# in
                                let x8     
                                      = write# [Nat#] out2$count x35 in
                                ()) in
                   let x14    
                         = guard# xs$elem
                               (λ(x11: Unit).
                                let x36     = read# [Nat#] out3$count in
                                let x12    
                                      = vwrite# [Int#] out3$buf x36 ins1$elem in
                                let x37     = read# [Nat#] out3$count in
                                let x38     = add# [Nat#] x37 1# in
                                let x13    
                                      = write# [Nat#] out3$count x38 in
                                ()) in
                   ()) in
      let x23    
            = loop# [k]
                  (λ(x16: Nat#).
                   let ins2$elem
                         = next# [Int#] [p] [k] ins2 x16 in
                   let x39     = read# [Nat#] out1$count in
                   let x17    
                         = vwrite# [Int#] out1$buf x39 ins2$elem in
                   let x40     = read# [Nat#] out1$count in
                   let x41     = add# [Nat#] x40 1# in
                   let x18    
                         = write# [Nat#] out1$count x41 in
                   let ap2$elem
                         = add# [Int#] 1i# ins2$elem in
                   let lts$elem
                         = gt# [Int#] 1i# ap2$elem in
                   let popop$elem
                         = add# [Int#] 2i# ap2$elem in
                   let x22    
                         = guard# lts$elem
                               (λ(x19: Unit).
                                let x42     = read# [Nat#] out2$count in
                                let x20    
                                      = vwrite# [Int#] out2$buf x42 popop$elem in
                                let x43     = read# [Nat#] out2$count in
                                let x44     = add# [Nat#] x43 1# in
                                let x21    
                                      = write# [Nat#] out2$count x44 in
                                ()) in
                   ()) in
      let x24    
            = read# [Nat#] out1$count in
      let x25    
            = vtrunc# [Int#] x24 out1 in
      let x26    
            = read# [Nat#] out2$count in
      let x27    
            = vtrunc# [Int#] x26 out2 in
      let x28    
            = read# [Nat#] out3$count in
      let x29    
            = vtrunc# [Int#] x28 out3 in
      ()
}
