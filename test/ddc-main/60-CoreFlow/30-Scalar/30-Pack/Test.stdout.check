ok
ok


-- Pack with an existing series of flags.
module Test with
letrec {
  packMe: [p: Proc].[k0: Rate].[a: Data].RateVec# k0 a -> Vector# a -> RateVec# k0 Bool# -> Unit
    = Λ(p: Proc).Λ(k0: Rate).Λ(a: Data).
      λ(sR: RateVec# k0 a).λ(v: Vector# a).λ(flagR: RateVec# k0 Bool#).
      let v$buf  
            = vbuf# [a] v in
      let v$count
            = new# [Nat#] 0# in
      let flags  
            = series# [p] [k0] [Bool#] flagR in
      let s      
            = series# [p] [k0] [a] sR in
      let x5     
            = loop# [k0]
                  (λ(x0: Nat#).
                   let flags$elem
                         = next# [Bool#] [p] [k0] flags x0 in
                   let s$elem 
                         = next# [a] [p] [k0] s x0 in
                   let x4     
                         = guard# flags$elem
                               (λ(x1: Unit).
                                let ^       = read# [Nat#] v$count in
                                let x2     
                                      = vwrite# [a] v$buf ^0 s$elem in
                                let ^       = read# [Nat#] v$count in
                                let ^       = add# [Nat#] ^0 1# in
                                let x3     
                                      = write# [Nat#] v$count ^0 in
                                ()) in
                   ()) in
      let x6     
            = read# [Nat#] v$count in
      let x7     
            = vtrunc# [a] x6 v in
      ()
}


-- Filter, producing our own flags.
module Test with
letrec {
  filter: [p: Proc].[k0: Rate].[a: Data].(a -> Bool#) -> Vector# a -> RateVec# k0 a -> Unit
    = Λ(p: Proc).Λ(k0: Rate).Λ(a: Data).
      λ(f: a -> Bool#).λ(v: Vector# a).λ(sR: RateVec# k0 a).
      let v$buf  
            = vbuf# [a] v in
      let v$count
            = new# [Nat#] 0# in
      let s      
            = series# [p] [k0] [a] sR in
      let x6     
            = loop# [k0]
                  (λ(x1: Nat#).
                   let s$elem 
                         = next# [a] [p] [k0] s x1 in
                   let flags$elem
                         = f s$elem in
                   let x5     
                         = guard# flags$elem
                               (λ(x2: Unit).
                                let x9      = read# [Nat#] v$count in
                                let x3     
                                      = vwrite# [a] v$buf x9 s$elem in
                                let x10     = read# [Nat#] v$count in
                                let x11     = add# [Nat#] x10 1# in
                                let x4     
                                      = write# [Nat#] v$count x11 in
                                ()) in
                   ()) in
      let x7     
            = read# [Nat#] v$count in
      let x8     
            = vtrunc# [a] x7 v in
      ()
}


-- Filter, and also materialize the input in a new selector context.
Error transforming core program.
  Multiple fills to the same output, in 'interfering contexts' (eg same branch of an append)


-- Nested filter.
-- Ensure we can handle nested selector contexts.
module Test with
letrec {
  filter: [p: Proc].[k0: Rate].[a: Data].(a -> Bool#) -> (a -> Bool#) -> Vector# a -> RateVec# k0 a -> Unit
    = Λ(p: Proc).Λ(k0: Rate).Λ(a: Data).
      λ(f g: a -> Bool#).λ(v: Vector# a).λ(s0R: RateVec# k0 a).
      let v$buf  
            = vbuf# [a] v in
      let v$count
            = new# [Nat#] 0# in
      let s0     
            = series# [p] [k0] [a] s0R in
      let x8     
            = loop# [k0]
                  (λ(x0: Nat#).
                   let s0$elem
                         = next# [a] [p] [k0] s0 x0 in
                   let flags1$elem
                         = f s0$elem in
                   let x7     
                         = guard# flags1$elem
                               (λ(x2: Unit).
                                let flags2$elem
                                      = g s0$elem in
                                let x6     
                                      = guard# flags2$elem
                                            (λ(x3: Unit).
                                             let x11     = read# [Nat#] v$count in
                                             let x4     
                                                   = vwrite# [a] v$buf x11 s0$elem in
                                             let x12     = read# [Nat#] v$count in
                                             let x13     = add# [Nat#] x12 1# in
                                             let x5     
                                                   = write# [Nat#] v$count x13 in
                                             ()) in
                                ()) in
                   ()) in
      let x9     
            = read# [Nat#] v$count in
      let x10    
            = vtrunc# [a] x9 v in
      ()
}


-- Sequential filter.
-- Ensure we can handle two selector contexts on the same input.
module Test with
letrec {
  filter: [p: Proc].[k0: Rate].[a: Data].(a -> Bool#) -> (a -> Bool#) -> Vector# a -> Vector# a -> RateVec# k0 a -> Unit
    = Λ(p: Proc).Λ(k0: Rate).Λ(a: Data).
      λ(f g: a -> Bool#).λ(v1 v2: Vector# a).λ(s0R: RateVec# k0 a).
      let v1$buf 
            = vbuf# [a] v1 in
      let v2$buf 
            = vbuf# [a] v2 in
      let v1$count
            = new# [Nat#] 0# in
      let v2$count
            = new# [Nat#] 0# in
      let s0     
            = series# [p] [k0] [a] s0R in
      let x11    
            = loop# [k0]
                  (λ(x1: Nat#).
                   let s0$elem
                         = next# [a] [p] [k0] s0 x1 in
                   let flags1$elem
                         = f s0$elem in
                   let flags2$elem
                         = f s0$elem in
                   let x6     
                         = guard# flags1$elem
                               (λ(x3: Unit).
                                let x16     = read# [Nat#] v1$count in
                                let x4     
                                      = vwrite# [a] v1$buf x16 s0$elem in
                                let x17     = read# [Nat#] v1$count in
                                let x18     = add# [Nat#] x17 1# in
                                let x5     
                                      = write# [Nat#] v1$count x18 in
                                ()) in
                   let x10    
                         = guard# flags2$elem
                               (λ(x7: Unit).
                                let x19     = read# [Nat#] v2$count in
                                let x8     
                                      = vwrite# [a] v2$buf x19 s0$elem in
                                let x20     = read# [Nat#] v2$count in
                                let x21     = add# [Nat#] x20 1# in
                                let x9     
                                      = write# [Nat#] v2$count x21 in
                                ()) in
                   ()) in
      let x12    
            = read# [Nat#] v1$count in
      let x13    
            = vtrunc# [a] x12 v1 in
      let x14    
            = read# [Nat#] v2$count in
      let x15    
            = vtrunc# [a] x14 v2 in
      ()
}

