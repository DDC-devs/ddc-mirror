ok
ok


-- Pack with an existing series of flags.
module Test with
letrec {
  packMe : [t0 : Rate].[t1 : Data].Series# t0 t1 -> Vector# t1 -> Series# t0 Bool# -> Unit
    = /\(t0 : Rate)./\(t1 : Data).
       \(x2 : Series# t0 t1).\(x3 : Vector# t1).\(x4 : Series# t0 Bool#).
      let t5$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x2$elem = next# [t1] [t0] x2 x0 in
                   let x4$elem = next# [Bool#] [t0] x4 x0 in
                   let _
                         = guard# t5$count x4$elem
                               (\(x1 : Nat#).
                                let _ = vwrite# [t1] x3 x1 x2$elem in
                                ()) in
                   ()) in
      let x5 = read# [Nat#] t5$count in
      let _ = vtrunc# [t1] x5 x3 in
      ()
}


-- Filter, producing our own flags.
module Test with
letrec {
  filter : [t0 : Rate].[t1 : Data].(t1 -> Bool#) -> Vector# t1 -> Series# t0 t1 -> Unit
    = /\(t0 : Rate)./\(t1 : Data).
       \(x2 : t1 -> Bool#).\(x3 : Vector# t1).\(x4 : Series# t0 t1).
      let t9$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x4$elem = next# [t1] [t0] x4 x0 in
                   let x7$elem = x2 x4$elem in
                   let _
                         = guard# t9$count x7$elem
                               (\(x1 : Nat#).
                                let _ = vwrite# [t1] x3 x1 x4$elem in
                                ()) in
                   ()) in
      let x6 = read# [Nat#] t9$count in
      let _ = vtrunc# [t1] x6 x3 in
      ()
}


-- Filter, and also materialize the input in a new selector context.
module Test with
letrec {
  filter : [t0 : Rate].[t1 : Data].(t1 -> Bool#) -> Vector# t1 -> Vector# t1 -> Series# t0 t1 -> Unit
    = /\(t0 : Rate)./\(t1 : Data).
       \(x2 : t1 -> Bool#).\(x3 x4 : Vector# t1).\(x5 : Series# t0 t1).
      let t11$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x5$elem = next# [t1] [t0] x5 x0 in
                   let x8$elem = x2 x5$elem in
                   let _ = vwrite# [t1] x3 x0 x5$elem in
                   let _
                         = guard# t11$count x8$elem
                               (\(x1 : Nat#).
                                let _ = vwrite# [t1] x3 x1 x5$elem in
                                ()) in
                   ()) in
      let x7 = read# [Nat#] t11$count in
      let _ = vtrunc# [t1] x7 x3 in
      ()
}


-- Nested filter.
-- Ensure we can handle nested selector contexts.
module Test with
letrec {
  filter : [t0 : Rate].[t1 : Data].(t1 -> Bool#) -> (t1 -> Bool#) -> Vector# t1 -> Series# t0 t1 -> Unit
    = /\(t0 : Rate)./\(t1 : Data).
       \(x2 x3 : t1 -> Bool#).\(x4 : Vector# t1).\(x5 : Series# t0 t1).
      let t10$count = new# [Nat#] 0# in
      let t17$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x5$elem = next# [t1] [t0] x5 x0 in
                   let x8$elem = x2 x5$elem in
                   let _
                         = guard# t10$count x8$elem
                               (\(x1 : Nat#).
                                let x15$elem = x3 x5$elem in
                                let _
                                      = guard# t17$count x15$elem
                                            (\(x7 : Nat#).
                                             let _ = vwrite# [t1] x4 x7 x5$elem in
                                             ()) in
                                ()) in
                   ()) in
      let x8 = read# [Nat#] t17$count in
      let _ = vtrunc# [t1] x8 x4 in
      ()
}


-- Sequential filter.
-- Ensure we can handle two selector contexts on the same input.
module Test with
letrec {
  filter : [t0 : Rate].[t1 : Data].(t1 -> Bool#) -> (t1 -> Bool#) -> Vector# t1 -> Vector# t1 -> Series# t0 t1 -> Unit
    = /\(t0 : Rate)./\(t1 : Data).
       \(x2 x3 : t1 -> Bool#).\(x4 x5 : Vector# t1).\(x6 : Series# t0 t1).
      let t15$count = new# [Nat#] 0# in
      let t22$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x6$elem = next# [t1] [t0] x6 x0 in
                   let x9$elem = x2 x6$elem in
                   let x13$elem = x2 x6$elem in
                   let _
                         = guard# t15$count x9$elem
                               (\(x1 : Nat#).
                                let _ = vwrite# [t1] x4 x1 x6$elem in
                                ()) in
                   let _
                         = guard# t22$count x13$elem
                               (\(x8 : Nat#).
                                let _ = vwrite# [t1] x5 x8 x6$elem in
                                ()) in
                   ()) in
      let x9 = read# [Nat#] t15$count in
      let _ = vtrunc# [t1] x9 x4 in
      let x10 = read# [Nat#] t22$count in
      let _ = vtrunc# [t1] x10 x5 in
      ()
}

