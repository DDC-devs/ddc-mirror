:set lang Flow
:set Synth
:set SuppressLetTypes


-- Fill a vector with segment indices.
:flow-lower..
module Test with letrec
test    [k1 : Rate]
        (lens : Series# k1 Nat#)
        (v    : Vector# Nat#)
        : Process#
 = smkSegd# lens
   (/\(k2 : Rate). \(segd : Segd# k1 k2). 
     let s2 = sindices# segd 
     in  sfill# v s2)
;;


-- Fuse reps with indices.
:flow-lower..
module Test with letrec
test    [k1 : Rate]
        (lens : Series# k1 Nat#) (things : Series# k1 Nat#)
        (v    : Vector# Nat#)
        : Process#
 = smkSegd# lens
   (/\(k2 : Rate). \(segd : Segd# k1 k2). 
     let s2     = sindices# segd        in
     let s3     = sreps# segd things    in
     let s4     = smap2# add# s2 s3
     in  sfill# v s4)
;;


-- Gather chunks of some shared things vector.
-- We write ranges of the things vector to the first output, 
-- and copies of the first elemenet of the range to the second output.
-- The copies are replicated separately so the first element of the range
-- does not get read for each of the inner iterations.
:flow-lower..
module Test with letrec
test    [k1 : Rate]
        (lens      : Series# k1 Nat#) 
        (base      : Series# k1 Nat#)
        (things    : Vector# Float32#)
        (out1 out2 : Vector# Float32#)
        : Process#
 = smkSegd# lens
   (/\(k2 : Rate). \(segd : Segd# k1 k2). 
     let bases   = sreps#    segd base          in
     let offsets = sindices# segd               in
     let ixs     = smap2#    add# bases offsets in
     let results = sgather#  things ixs         in
     let firsts  = sgather#  things base        in
     let firstsr = sreps#    segd firsts 
     in  pjoin# (sfill# out1 results)
                (sfill# out2 firstsr))
;;
