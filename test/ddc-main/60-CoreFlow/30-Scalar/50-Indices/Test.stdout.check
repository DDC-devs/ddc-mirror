ok
ok
ok


-- Fill a vector with segment indices.
module Test with
letrec {
  test : [t0 : Rate].Series# t0 Nat# -> Vector# Nat# -> Unit
    = /\(t0 : Rate).
       \(x1 : Series# t0 Nat#).\(x2 : Vector# Nat#).
      let t3$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x1$elem = next# [Nat#] [t0] x1 x0 in
                   let _
                         = segment# t3$count x1$elem
                               (\(x3 x4 : Nat#).
                                let _ = vwrite# [Nat#] x2 x4 x3 in
                                ()) in
                   ()) in
      ()
}


-- Fuse reps with indices.
module Test with
letrec {
  test : [t0 : Rate].Series# t0 Nat# -> Series# t0 Nat# -> Vector# Nat# -> Unit
    = /\(t0 : Rate).
       \(x1 x2 : Series# t0 Nat#).\(x3 : Vector# Nat#).
      let t4$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x1$elem = next# [Nat#] [t0] x1 x0 in
                   let x2$elem = next# [Nat#] [t0] x2 x0 in
                   let _
                         = segment# t4$count x1$elem
                               (\(x4 x5 : Nat#).
                                let x11$elem = add# [Nat#] x4 x2$elem in
                                let _ = vwrite# [Nat#] x3 x5 x11$elem in
                                ()) in
                   ()) in
      ()
}


-- Gather chunks of some shared things vector.
-- We write ranges of the things vector to the first output, 
-- and copies of the first elemenet of the range to the second output.
-- The copies are replicated separately so the first element of the range
-- does not get read for each of the inner iterations.
module Test with
letrec {
  test : [t0 : Rate].Series# t0 Nat# -> Series# t0 Nat# -> Vector# Float32# -> Vector# Float32# -> Vector# Float32# -> Unit
    = /\(t0 : Rate).
       \(x1 x2 : Series# t0 Nat#).\(x3 x4 x5 : Vector# Float32#).
      let t6$count = new# [Nat#] 0# in
      let _
            = loop# [t0]
                  (\(x0 : Nat#).
                   let x1$elem = next# [Nat#] [t0] x1 x0 in
                   let x2$elem = next# [Nat#] [t0] x2 x0 in
                   let x16$elem = vread# [Float32#] x3 x2$elem in
                   let _
                         = segment# t6$count x1$elem
                               (\(x6 x7 : Nat#).
                                let x13$elem = add# [Nat#] x2$elem x6 in
                                let x15$elem = vread# [Float32#] x3 x13$elem in
                                let _ = vwrite# [Float32#] x4 x7 x15$elem in
                                let _ = vwrite# [Float32#] x5 x7 x16$elem in
                                ()) in
                   ()) in
      ()
}
