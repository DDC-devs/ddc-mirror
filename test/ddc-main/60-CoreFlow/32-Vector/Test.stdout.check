-- Lowering to produce complete vector programs. 
ok
ok


module Test with
letrec {
  test : [t0 : Rate].RateNat# t0 -> Ref# Float32# -> Series# t0 Float32# -> Series# t0 Float32# -> Unit
    = /\(t0 : Rate).
       \(x1 : RateNat# t0).\(x2 : Ref# Float32#).\(x3 x4 : Series# t0 Float32#).
      let _
            = split$8# [t0] x1
                  (\(x0 : RateNat# (Down8# t0)).
                   let x3$down = down$8# [t0] [Float32#] x0 x3 in
                   let x4$down = down$8# [t0] [Float32#] x0 x4 in
                   let x10 = vrep$8# [Float32#] 0.0f32# in
                   let x2$vec
                         = new# [Vec8# Float32#] x10 in
                   let _
                         = loop# [Down8# t0]
                               (\(x7 : Nat#).
                                let x3$elem = next$8# [Float32#] [t0] x3$down x7 in
                                let x4$elem = next$8# [Float32#] [t0] x4$down x7 in
                                let x8$elem = vmul$8# [Float32#] x3$elem x4$elem in
                                let x2$val
                                      = read# [Vec8# Float32#] x2$vec in
                                let x12 = vadd$8# [Float32#] x2$val x8$elem in
                                let _
                                      = write# [Vec8# Float32#] x2$vec x12 in
                                ()) in
                   let x2$res
                         = read# [Vec8# Float32#] x2$vec in
                   let x2$init = read# [Float32#] x2 in
                   let x14 = vproj$8$0# [Float32#] x2$res in
                   let x2$res$0 = add# [Float32#] x2$init x14 in
                   let x16 = vproj$8$1# [Float32#] x2$res in
                   let x2$res$1 = add# [Float32#] x2$res$0 x16 in
                   let x18 = vproj$8$2# [Float32#] x2$res in
                   let x2$res$2 = add# [Float32#] x2$res$1 x18 in
                   let x20 = vproj$8$3# [Float32#] x2$res in
                   let x2$res$3 = add# [Float32#] x2$res$2 x20 in
                   let x22 = vproj$8$4# [Float32#] x2$res in
                   let x2$res$4 = add# [Float32#] x2$res$3 x22 in
                   let x24 = vproj$8$5# [Float32#] x2$res in
                   let x2$res$5 = add# [Float32#] x2$res$4 x24 in
                   let x26 = vproj$8$6# [Float32#] x2$res in
                   let x2$res$6 = add# [Float32#] x2$res$5 x26 in
                   let x28 = vproj$8$7# [Float32#] x2$res in
                   let x2$res$7 = add# [Float32#] x2$res$6 x28 in
                   let _ = write# [Float32#] x2 x2$res$7 in
                   ())
                  (\(x8 : RateNat# (Tail8# t0)).
                   let x3$tail = tail$8# [t0] [Float32#] x8 x3 in
                   let x4$tail = tail$8# [t0] [Float32#] x8 x4 in
                   let x2$init = read# [Float32#] x2 in
                   let x2$acc = new# [Float32#] x2$init in
                   let _
                         = loop# [Tail8# t0]
                               (\(x9 : Nat#).
                                let x3$elem
                                      = next# [Float32#] [Tail8# t0] x3$tail x9 in
                                let x4$elem
                                      = next# [Float32#] [Tail8# t0] x4$tail x9 in
                                let x8$elem = mul# [Float32#] x3$elem x4$elem in
                                let x2$val = read# [Float32#] x2$acc in
                                let x29 = add# [Float32#] x2$val x8$elem in
                                let _ = write# [Float32#] x2$acc x29 in
                                ()) in
                   let x2$res = read# [Float32#] x2$acc in
                   let _ = write# [Float32#] x2 x2$res in
                   ()) in
      ()
}


module Flow with
letrec {
  eatPoints : [t0 : Rate].Float32# -> Float32# -> Vector# Float32# -> Ref# Float32# -> RateNat# t0 -> Series# t0 Float32# -> Series# t0 Float32# -> Unit
    = /\(t0 : Rate).
       \(x1 x2 : Float32#).\(x3 : Vector# Float32#).\(x4 : Ref# Float32#).\(x5 : RateNat# t0).\(x6 x7 : Series# t0 Float32#).
      let _
            = split$8# [t0] x5
                  (\(x0 : RateNat# (Down8# t0)).
                   let x6$down = down$8# [t0] [Float32#] x0 x6 in
                   let x7$down = down$8# [t0] [Float32#] x0 x7 in
                   let x13 = vrep$8# [Float32#] 0.0f32# in
                   let x4$vec
                         = new# [Vec8# Float32#] x13 in
                   let _
                         = loop# [Down8# t0]
                               (\(x10 : Nat#).
                                let x6$elem = next$8# [Float32#] [t0] x6$down x10 in
                                let x7$elem = next$8# [Float32#] [t0] x7$down x10 in
                                let x14 = vrep$8# [Float32#] x1 in
                                let x15 = vsub$8# [Float32#] x6$elem x14 in
                                let x16 = vrep$8# [Float32#] x1 in
                                let x17 = vsub$8# [Float32#] x6$elem x16 in
                                let x18 = vmul$8# [Float32#] x15 x17 in
                                let x19 = vrep$8# [Float32#] x2 in
                                let x20 = vsub$8# [Float32#] x7$elem x19 in
                                let x21 = vrep$8# [Float32#] x2 in
                                let x22 = vsub$8# [Float32#] x7$elem x21 in
                                let x23 = vmul$8# [Float32#] x20 x22 in
                                let x20$elem = vadd$8# [Float32#] x18 x23 in
                                let _ = vwrite$8# [Float32#] x3 x10 x20$elem in
                                let x4$val
                                      = read# [Vec8# Float32#] x4$vec in
                                let x25 = vadd$8# [Float32#] x4$val x20$elem in
                                let _
                                      = write# [Vec8# Float32#] x4$vec x25 in
                                ()) in
                   let x4$res
                         = read# [Vec8# Float32#] x4$vec in
                   let x4$init = read# [Float32#] x4 in
                   let x27 = vproj$8$0# [Float32#] x4$res in
                   let x4$res$0 = add# [Float32#] x4$init x27 in
                   let x29 = vproj$8$1# [Float32#] x4$res in
                   let x4$res$1 = add# [Float32#] x4$res$0 x29 in
                   let x31 = vproj$8$2# [Float32#] x4$res in
                   let x4$res$2 = add# [Float32#] x4$res$1 x31 in
                   let x33 = vproj$8$3# [Float32#] x4$res in
                   let x4$res$3 = add# [Float32#] x4$res$2 x33 in
                   let x35 = vproj$8$4# [Float32#] x4$res in
                   let x4$res$4 = add# [Float32#] x4$res$3 x35 in
                   let x37 = vproj$8$5# [Float32#] x4$res in
                   let x4$res$5 = add# [Float32#] x4$res$4 x37 in
                   let x39 = vproj$8$6# [Float32#] x4$res in
                   let x4$res$6 = add# [Float32#] x4$res$5 x39 in
                   let x41 = vproj$8$7# [Float32#] x4$res in
                   let x4$res$7 = add# [Float32#] x4$res$6 x41 in
                   let _ = write# [Float32#] x4 x4$res$7 in
                   ())
                  (\(x11 : RateNat# (Tail8# t0)).
                   let x6$tail = tail$8# [t0] [Float32#] x11 x6 in
                   let x7$tail = tail$8# [t0] [Float32#] x11 x7 in
                   let x3$tail = vtail8# [t0] [Float32#] x11 x3 in
                   let x4$init = read# [Float32#] x4 in
                   let x4$acc = new# [Float32#] x4$init in
                   let _
                         = loop# [Tail8# t0]
                               (\(x12 : Nat#).
                                let x6$elem
                                      = next# [Float32#] [Tail8# t0] x6$tail x12 in
                                let x7$elem
                                      = next# [Float32#] [Tail8# t0] x7$tail x12 in
                                let x42 = sub# [Float32#] x6$elem x1 in
                                let x43 = sub# [Float32#] x6$elem x1 in
                                let x44 = mul# [Float32#] x42 x43 in
                                let x45 = sub# [Float32#] x7$elem x2 in
                                let x46 = sub# [Float32#] x7$elem x2 in
                                let x47 = mul# [Float32#] x45 x46 in
                                let x20$elem = add# [Float32#] x44 x47 in
                                let _ = vwrite# [Float32#] x3$tail x12 x20$elem in
                                let x4$val = read# [Float32#] x4$acc in
                                let x48 = add# [Float32#] x4$val x20$elem in
                                let _ = write# [Float32#] x4$acc x48 in
                                ()) in
                   let x4$res = read# [Float32#] x4$acc in
                   let _ = write# [Float32#] x4 x4$res in
                   ()) in
      ()
}
