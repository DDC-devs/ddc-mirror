:set Indent

-- Use test 50's simple module
:with test/ddc-main/30-Transform/40-Rewrite/50-Modules/Module.dce

:set.. rule fromTo [r1 r2 r3 : %]
	(c : Int r3).
    toInt [:r2 r1:] (fromInt [:r3 r2:] c)
 =  newInt [:r3 r1:] c
;;

:set trans Rewrite

-- Not even trying
:trans..
let toInt = 5 [R0#] ()
in  toInt
;;

-- Redefinition with similar type, but not as big effect
:trans..
let toInt = /\(r1 r2 : %).
	     \(xs : List r1 Unit).
		0 [r2] ()
in  toInt [:R0# R0#:] (fromInt [:R0# R0#:] (5 [R0#] ()))
;;

-- Redefinition with same type
:trans..
let toInt = /\(r1 r2 : %).
	     \(xs : List r1 Unit).
		case xs of {
		    Nil -> 100 [r2] ();
		    Cons _ _ -> 1 [r2] ()
		}
in  toInt [:R0# R0#:] (fromInt [:R0# R0#:] (5 [R0#] ()))
;;

-- Letrec
:trans..
letrec {
toInt [r1 r2 : %]
    (xs : List r1 Unit) {Read r1 + Read r2 + Alloc r2 | Use r1 + Use r2}
    : Int r2
 = case xs of {
     Nil	-> 100 [r2] ();
     Cons _ xs' -> subInt [:r2 r2 r2:] (1 [r2] ()) (toInt [:r1 r2:] xs')
 }
}
in  toInt [:R0# R0#:] (fromInt [:R0# R0#:] (5 [R0#] ()))
;;

-- Lambda instead of let
:trans..
\(toInt : [r1 r2 : %]. List r1 Unit -(Read r1 + Read r2 + Alloc r2 | Use r1 + Use r2)> Int r2).
  toInt [:R0# R0#:] (fromInt [:R0# R0#:] (5 [R0#] ()))
;;

-- Try shadowing fromInt instead
:trans..
letrec {
fromInt [r1 r2 : %]
    (c : Int r1) {Read r1 + Alloc r1 + Alloc r2 | Use r1 + Use r2}
    : List r2 Unit
 = case c of {
     0	-> Nil [:r2 Unit:] ();
     _  -> Cons [:r2 Unit:] () (fromInt [:r1 r2:] (subInt [:r1 r1 r1:] c (2 [r1] ())))
 };
}
in  toInt [:R0# R0#:] (fromInt [:R0# R0#:] (5 [R0#] ()))
;;

-- Try shadowing newInt (only visible in result) instead
:trans..
letrec {
newInt [r1 r2 : %]
    (x : Int r1) {Read r1 + Alloc r2 | Use r1 + Use r2}
    : Int r2
 = copyInt [:r1 r2:] x
}
in  toInt [:R0# R0#:] (fromInt [:R0# R0#:] (5 [R0#] ()))
;;

-- Inside the same letrec
:trans..
letrec {
newInt [r1 r2 : %]
    (x : Int r1) {Read r1 + Read r2 + Alloc r1 + Alloc r2 | Use r1 + Use r2}
    : Int r2
 =  toInt [:r2 r2:] (fromInt [:r1 r2:] x)
}
in ()
;;


-- Now try with HOLES.
