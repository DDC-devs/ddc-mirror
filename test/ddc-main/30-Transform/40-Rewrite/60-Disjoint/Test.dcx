:with test/ddc-main/30-Transform/40-Rewrite/60-Disjoint/Module.dcs
:set.. rule mapMap [a b c : Data] [r1 r2 r3 : Region]
	[ef eg : Effect] [cf cg : Closure]
	(f : b -(ef|cf)> c) (g : a -(eg|cg)> b)
	(xs : List r3 a).
    Disjoint ef eg =>
	map [:r2 r1 b c ef cf:] f
		(map [:r3 r2 a b eg cg:] g xs) 
	= map [:r3 r1 a c (ef+eg) (cf+cg):]
	    (compose [:a b c ef eg cf cg:] f g) xs
;;

:set Indent
:set trans Rewrite

-- should rewrite, just reading
:trans..
map [:r0# r0# (Int r0#) (Int r0#) (Read r0# + Alloc r0#) (Use r0#):]
    (\(y : Int r0#). addInt [:r0# r0# r0#:] y (1 [r0#] ()))

    (map [:r0# r0# (Int r0#) (Int r0#) (Alloc r0# + Read r0#) (Use r0#):]
	(\(z : Int r0#). addInt [:r0# r0# r0#:] z (1 [r0#] ()))
	(Cons [:r0# (Int r0#):] (1 [r0#] ())
	    (Cons [:r0# (Int r0#):] (2 [r0#] ())
		(Nil [:r0# (Int r0#):] ()))))
;;

-- a write and a read from same region, no rewrite.
:trans..
letregion rMut with { wMut : Mutable rMut } in
let mutabl = 5 [rMut] () in

map [:r0# r0# (Int r0#) (Int r0#) (Read rMut + Alloc r0#) (Use r0# + Use rMut):]
    (\(y : Int r0#). copyInt [:rMut r0#:] mutabl)

    (map [:r0# r0# (Int r0#) (Int r0#) (Read r0# + Write rMut) (Use r0# + Use rMut):]
	(\(z : Int r0#).
	    let _ = updateInt [:rMut r0#:] {wMut} mutabl z
	    in	    z
	)
	(Cons [:r0# (Int r0#):] (1 [r0#] ())
	    (Cons [:r0# (Int r0#):] (2 [r0#] ())
		(Nil [:r0# (Int r0#):] ()))))
;;

-- a write and a read from different regions - do rewrite
:trans..
letregion rMut with { wMut : Mutable rMut } in
let mutabl = 5 [rMut] () in

map [:r0# r0# (Int r0#) (Int r0#) (Read r0# + Alloc r0#) (Use r0#):]
    (\(y : Int r0#). addInt [:r0# r0# r0#:] y (1 [r0#] ()))

    (map [:r0# r0# (Int r0#) (Int r0#) (Read r0# + Write rMut) (Use r0# + Use rMut):]
	(\(z : Int r0#).
	    let _ = updateInt [:rMut r0#:] {wMut} mutabl z
	    in	    z
	)
	(Cons [:r0# (Int r0#):] (1 [r0#] ())
	    (Cons [:r0# (Int r0#):] (2 [r0#] ())
		(Nil [:r0# (Int r0#):] ()))))
;;

-- a write and a read from different regions, but lambda-bound - don't rewrite
:trans..
/\(rMut : Region). \(wMut : Mutable rMut). \(dummy : Int r0#).
let mutabl = 5 [rMut] () in

map [:r0# r0# (Int r0#) (Int r0#) (Read r0# + Alloc r0#) (Use r0#):]
    (\(y : Int r0#). addInt [:r0# r0# r0#:] y (1 [r0#] ()))

    (map [:r0# r0# (Int r0#) (Int r0#) (Read r0# + Write rMut) (Use r0# + Use rMut):]
	(\(z : Int r0#).
	    let _ = updateInt [:rMut r0#:] {wMut} mutabl z
	    in	    z
	)
	(Cons [:r0# (Int r0#):] (1 [r0#] ())
	    (Cons [:r0# (Int r0#):] (2 [r0#] ())
		(Nil [:r0# (Int r0#):] ()))))
;;

-- lambda-bound different regions, but with a Distinctness witness. do rewrite.
:trans..
/\(rMut : Region). \(wMut : Mutable rMut). \(wDistinct : Distinct r0# rMut). \(dummy : Int r0#).
let mutabl = 5 [rMut] () in

map [:r0# r0# (Int r0#) (Int r0#) (Read r0# + Alloc r0#) (Use r0#):]
    (\(y : Int r0#). addInt [:r0# r0# r0#:] y (1 [r0#] ()))

    (map [:r0# r0# (Int r0#) (Int r0#) (Read r0# + Write rMut) (Use r0# + Use rMut):]
	(\(z : Int r0#).
	    let _ = updateInt [:rMut r0#:] {wMut} mutabl z
	    in	    z
	)
	(Cons [:r0# (Int r0#):] (1 [r0#] ())
	    (Cons [:r0# (Int r0#):] (2 [r0#] ())
		(Nil [:r0# (Int r0#):] ()))))
;;

