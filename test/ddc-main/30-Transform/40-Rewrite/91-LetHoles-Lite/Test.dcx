:set Indent
:set lang Lite
:with test/ddc-main/30-Transform/40-Rewrite/91-LetHoles-Lite/Int.dcl


-- now with a Const contraint and regions
:set.. rule unboxInt_boxInt [r : %] (s : Int#).
    Const r =>
    unboxInt [r] {boxInt [r] s}
    = s
;;
:set trans Rewrite


-- don't do it: not const
:trans..
letregion r				in
unboxInt [r] (boxInt [r] 5i#)
;;


-- do it: const
:trans..
letregion r with {w : Const r}		in
let x = unboxInt [r] (boxInt [r] 5i#)	in
    ()
;;


-- separated
:trans..
letregion r with {w : Const r}	in
let x = boxInt [r] 5i#		in
let y = unboxInt [r] x		in
    ()
;;


:set TraceTrans
:set.. trans
Inline Int-[boxInt, unboxInt];
fix 5 {Forward; BetaLets; Rewrite; Bubble}
;;


-- do the factorial
:trans..
letrec
main    [r : %] 
	<w : Const r>
	(_ : Int#)
	{ Read r + Alloc r | Use r }
        : Int#
 =     let x	= fac [r] <w> (boxInt [r] 1i#) (boxInt [r] 10i#)
    in let show = (unboxInt [r] x)
    in	   unboxInt [r] (boxInt [r] 0i#)

in ()
;;
