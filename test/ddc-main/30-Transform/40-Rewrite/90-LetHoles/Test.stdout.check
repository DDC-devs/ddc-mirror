ok
ok

-- don't look past lets normally
ok, added unbox_box
ok


-- don't rewrite non-locals
let x : Int r0#
      = boxi (5 [r0#] ()) in
let y : Int r0# = unboxi x in
let z : Int r0# = unboxi x in
weakclo {boxi; unboxi} in
addInt [r0#] [r0#] [r0#] y z


-- the {{ }} brackets indicate that the argument is cheap enough to be split across places
ok, added unbox_box
ok


-- rewrite y and z
let ^ : Int r0# = 5 [r0#] () in
let x : Int r0# = boxi ^0 in
let y : Int r0#
      = weakclo {boxi; unboxi} in
        ^0 in
let z : Int r0#
      = weakclo {boxi; unboxi} in
        ^0 in
addInt [r0#] [r0#] [r0#] y z


-- shadowing, don't rewrite
let ^ : Int r0# = 5 [r0#] () in
let x : Int r0# = boxi ^0 in
let x : Int r0# = 2 [r0#] () in
unboxi x


-- shadowing with lambdas, don't rewrite
let ^ : Int r0# = 5 [r0#] () in
let x : Int r0# = boxi ^0 in
\(x : Int r0#). unboxi x


-- some de bruijns. do rewrite
let ^ : Int r0# = 5 [r0#] () in
let ^ : Int r0# = boxi ^0 in
let ^ : Int r0# = 2 [r0#] () in
let b : Int r0#
      = weakclo {boxi; unboxi} in
        ^2 in
let ^ : Int r0# = 3 [r0#] () in
let c : Int r0#
      = weakclo {boxi; unboxi} in
        ^3 in
()


-- some surrounding de bruijns
let ^ : Int r0# = 2 [r0#] () in
let ^ : Int r0# = 5 [r0#] () in
let ^ : Int r0# = boxi ^0 in
let ^ : Int r0# = ^2 in
let c : Int r0#
      = weakclo {boxi; unboxi} in
        ^2 in
()


-- some lambda-y de bruijns
let ^ : Int r0# = 2 [r0#] () in
let ^ : Int r0# = 5 [r0#] () in
let ^ : Int r0# = boxi ^0 in
\(a ^ : Unit).
let ^ : Int r0# = ^3 in
let c : Int r0#
      = weakclo {boxi; unboxi} in
        ^3 in
()


-- now with a Const contraint and regions
ok, added unbox_box
ok


-- don't do it: not const
unboxi_ [r0#]
    (boxi_ [r0#] (5 [r0#] ()))


-- do it: const
letregion r with {w : Const r} in
let x : Int r
      = weakclo {boxi_; unboxi_; [r]} in
        5 [r] () in
()


-- separated
letregion r with {w : Const r} in
let ^ : Int r = 5 [r] () in
let x : Int r = boxi_ [r] ^0 in
let y : Int r
      = weakclo {boxi_; unboxi_; [r]} in
        ^0 in
()


ok, added silly
ok


-- don't fire, just unfold
let ^ : Int r0# = 5 [r0#] () in
let ^ : Int r0# = 3 [r0#] () in
let z : Int r0# = subInt [r0#] [r0#] [r0#] ^1 ^0 in
addInt [r0#] [r0#] [r0#] (0 [r0#] ()) z
