:set Indent

-- test using a binder twice
:set.. rule add_n_n (n : Int r0#).
    addInt [:r0# r0# r0#:] n n
  = mulInt [:r0# r0# r0#:] n (2 [r0#] ())
;;

:set trans Rewrite

-- simple one, do
:trans..
 addInt [:r0# r0# r0#:] (5 [r0#] ()) (5 [r0#] ())
;;

-- different values, don't
:trans..
 addInt [:r0# r0# r0#:] (5 [r0#] ()) (6 [r0#] ())
;;

-- more complicated value, do
:trans..
 addInt [:r0# r0# r0#:]
    (mulInt [:r0# r0# r0#:] (5 [r0#] ()) (3 [r0#] ()))
    (mulInt [:r0# r0# r0#:] (5 [r0#] ()) (3 [r0#] ()))
;;

-- different regions, don't
:trans..
 addInt [:r0# r0# r0#:]
    (mulInt [:r0# r0# r0#:] (5 [r0#] ()) (3 [r0#] ()))
    (mulInt [:r0# r1# r0#:] (5 [r0#] ()) (3 [r1#] ()))
;;

-- referencing let-bound vars, do
:trans..
let x = 5 [r0#] ()	in
addInt [:r0# r0# r0#:]
    x
    x
;;

-- shadowing, don't
:trans..
let x = 5 [r0#] ()	in
addInt [:r0# r0# r0#:]
    x
    (let x = 2 [r0#] () in x)
;;

-- with binders, do
:trans..
addInt [:r0# r0# r0#:]
    (let y = 5 [r0#] () in y)
    (let y = 5 [r0#] () in y)
;;

-- with binders different values, don't
:trans..
addInt [:r0# r0# r0#:]
    (let y = 5 [r0#] () in y)
    (let y = 0 [r0#] () in y)
;;

-- with binders same value different names, do
:trans..
addInt [:r0# r0# r0#:]
    (let y = 5 [r0#] () in y)
    (let z = 5 [r0#] () in z)
;;

