:set Indent

-- create a whacky rule (because only want to use builtins). wrap second param in another lambda
:set.. rule whacky0 [r1 : Region] [a : Region ~> Data] (x : a r1).
	Cons [r1] [a r1] x (Nil [r1] [a r1] ()) =
	Nil [r1] [a r1] ()
;;

-- should turn into a nil
:set trans Rewrite
:trans..
Cons [r0#] [Int r0#] (5 [r0#] ()) (Nil [r0#] [Int r0#] ())
;;

-- shouldn't turn into a nil; different regions
:trans..
Cons [r1#] [Int r0#] (5 [r0#] ()) (Nil [r1#] [Int r0#] ())
;;

-- try doing something with a function
:set.. rule whacky1 [r1 : Region] [a : Region ~> Data] [b : Data] (x : a r1 -> b).
	Cons [r1] [a r1 -> b] x (Nil [r1] [a r1 -> b] ()) =
	Nil [r1] [a r1 -> b] ()
;;

:set trans Rewrite
:trans..
Cons [r0#] [Int r0# -> Unit] (\(_:Int r0#). ()) (Nil [r0#] [Int r0# -> Unit] ())
;;

