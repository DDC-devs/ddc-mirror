ok

-- add zero on right. make copy
ok, added add0r
ok, added add0l

-- should work with any regions
ok
weakeff [Read r0# + Alloc r0#] in
weakclo {addInt; [r0#]} in
copyInt [r0#] [r0#] (5 [r0#] ())

weakeff [Read r1# + Read r2# + Alloc r2# + Alloc r3#] in
weakclo {addInt; [r2#]} in
copyInt [r1#] [r3#] (5 [r1#] ())

-- addInt is strict & closure free so we can reduce any copies in its args
ok, added addCopy1

ok, added addCopy2


-- simplify some nested zeroes
ok
weakeff [Read r0# + Read r1# + Alloc r1# + Alloc r2#] in
weakclo {addInt; [r1#]} in
copyInt [r0#] [r2#]
    (weakeff [Read r0# + Alloc r0#] in
     weakclo {addInt; [r0#]} in
     copyInt [r0#] [r0#] (5 [r0#] ()))


-- we can simplify out a copy of a literal.
ok, added copyLit
-- and a copy of a copy
ok, added copyCopy

-- some more nested zeroes
ok
weakeff [Read r0# + Read r1# + Alloc r1# + Alloc r2#] in
weakclo {addInt; [r1#]} in
copyInt [r0#] [r2#]
    (weakeff [Read r0# + Alloc r0#] in
     weakclo {addInt; [r0#]} in
     weakeff [Read r0# + Alloc r0#] in
     weakclo {copyInt; [r0#]} in
     5 [r0#] ())

-- add a let binding
let x : Int r9# = 5 [r9#] () in
weakeff [Read r1# + Read r7# + Alloc r1# + Alloc r2#] in
weakclo {addInt; [r1#]} in
copyInt [r7#] [r2#]
    (weakeff [Read r8# + Read r9# + Alloc r7# + Alloc r8#] in
     weakclo {addInt; [r8#]} in
     copyInt [r9#] [r7#] x)


-- nested inside a function: give the closures a workout
letrec {
  foo : [r1 r2 r3 : Region].Int r1 -(Read r1 + Read r2 + Alloc r2 + Alloc r3 | Use r1 + Use r2 + Use r3)> Int r3
    = /\(r1 r2 r3 : Region).
       \(x : Int r1).
      weakeff [Read r1 + Read r2 + Alloc r2 + Alloc r3] in
      weakclo {addInt; [r2]} in
      copyInt [r1] [r3] x
} in
foo [r0#] [r0#] [r0#] (5 [r0#] ())
