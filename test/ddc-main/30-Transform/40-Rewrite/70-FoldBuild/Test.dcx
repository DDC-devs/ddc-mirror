:with test/ddc-main/30-Transform/40-Rewrite/70-FoldBuild/Module.dcs

:set Indent
:set TraceTrans

:set.. rule foldrBuild_one
    [a b : Data] [r : Region]
    [ek1 ek2 ez eg1 eg2 : Effect]
    [ck1 ck2 cz cg1 cg2 : Closure]
    (k : a -(ek1|ck1)> b -(ek2|ck2)> b)
    (z : Unit -(ez|cz)> b)
    (g : [gb : Data]. [ec1 ec2 en : Effect]. [cc1 cc2 cn : Closure].
	(a -(ec1|cc1)> gb -(ec2|cc2)> gb)
       -(eg1|cg1)>
	(Unit -(en|cn)> gb)
       -(eg2+ec1+ec2+en|cg2+cc1)>
	gb).
foldr [:a b r ek1 ek2 ez ck1 ck2 cz:]
    k z
    (build [:a r eg1 eg2 cg1 cg2:] g)
= foldrAndBuild [:a b r ek1 ek2 ez ck1 ck2 cz:]
	      [:eg1 eg2 cg1 cg2:]
	k z g
;;

:set.. rule foldrBuild_fuse
    [a b : Data] [r : Region]
    [ek1 ek2 ez eg1 eg2 : Effect]
    [ck1 ck2 cz cg1 cg2 : Closure]
    (k : a -(ek1|ck1)> b -(ek2|ck2)> b)
    (z : Unit -(ez|cz)> b)
    (g : [gb : Data]. [ec1 ec2 en : Effect]. [cc1 cc2 cn : Closure].
	(a -(ec1|cc1)> gb -(ec2|cc2)> gb)
       -(eg1|cg1)>
	(Unit -(en|cn)> gb)
       -(eg2+ec1+ec2+en|cg2+cc1)>
	gb).
    Disjoint (ek1+ek2+ez) (eg1+eg2) =>
 foldrAndBuild [:a b r ek1 ek2 ez ck1 ck2 cz:]
	      [:eg1 eg2 cg1 cg2:]
	k z g
= g [:b ek1 ek2 ez ck1 ck2 cz:] k z
;;



-- :set.. rule foldrBuild
--     [a b : Data] [r : Region]
--     [ek1 ek2 ez eg1 eg2 : Effect]
--     [ck1 ck2 cz cg1 cg2 : Closure]
--     (k : a -(ek1|ck1)> b -(ek2|ck2)> b)
--     (z : Unit -(ez|cz)> b)
--     (g : [gb : Data]. [ec1 ec2 en : Effect]. [cc1 cc2 cn : Closure].
-- 	(a -(ec1|cc1)> gb -(ec2|cc2)> gb)
--        -(eg1|cg1)>
-- 	(Unit -(en|cn)> gb)
--        -(eg2+ec1+ec2+en|cg2+cc1)>
-- 	gb).
--     Disjoint (ek1+ek2+ez) (eg1+eg2) =>
-- foldr [:a b r ek1 ek2 ez ck1 ck2 cz:]
--     k z
--     (build [:a r eg1 eg2 cg1 cg2:] g)
-- = g [:b ek1 ek2 ez ck1 ck2 cz:] k z
-- ;;
-- 

-- TODO: the Fix simplifier isn't pushing this though,
--       So I've written the transform out explicitly.
:set.. trans
-- Here we would inline map, sum, filter, etc. But output is cleaner with them
-- Try to fuse anything we can, even fusing interfering foldr/builds into foldrAndBuild.
-- Also for cleaner output, don't anormalize
    fix 10 {BetaLets; Bubble; Rewrite; Forward; Prune};

-- By now we've turned all the foldr/builds we can into foldrAndBuild,
-- so inline any pesky builds that were getting in the way
-- But for cleaner output, don't inline anything else...
    Inline Module[build];

-- Crush again
    fix 10 {BetaLets; Bubble; Rewrite; Forward; Prune}
;;



-- sum = foldr (+) 0 xs
-- count  m  = build (count' m)
-- count' m = \c n -> if m == 0
--			then n
--			else c m (count' (m-1) c n)
:trans..
foldr [:(Int r0#) (Int r0#) r1#
	Pure (Read r0# + Alloc r0#) (Alloc r0#)
	(Use r0#) (Use r0#) (Use r0#):]
	plus zero
    (build [:(Int r0#) r1# Pure (Read r0# + Alloc r0#) (Use r0#) (Use r0#):] (countZ (10 [r0#] ())))
;;


-- map f xs = build (\c n -> foldr (c . f) n xs)

-- filter f xs = build (\c n -> foldr
--	(\x xs -> if f x
--		  then c x xs
--		  else xs) n xs)
:trans..

-- sum
foldr [:(Int r0#) (Int r0#) r1#
	Pure (Read r0# + Alloc r0#) (Alloc r0#)
	(Use r0#) (Use r0#) (Use r0#):]
	plus zero
    -- filter f xs
    (build [:(Int r0#) r1#
	Pure (Read r0# + Read r1# + Alloc r0# + Alloc r1#)
	-- (Read r0# + Alloc r0#) Pure
	(Use r0# + Use r1#)
	(Use r0# + Use r1#)
	:]
	(/\(bF : Data). /\(ec1F ec2F enF : Effect). /\(cc1F cc2F cnF : Closure).
	\(c : Int r0# -(ec1F|cc1F)> bF -(ec2F|cc2F)> bF).
	\(n : Unit -(enF|cnF)> bF).

	foldr [:(Int r0#) bF r1#
		Pure (Read r0# + Alloc r0# + ec1F + ec2F) enF
		(Use r0# + cc1F) (Use r0# + cc1F) cnF
		:] 
	    (\(x : Int r0#).
	     \(xs : bF).
	      case even x of {
		0 -> c x xs;
		_ -> xs
	      }
	     )
	    n
	    
	-- map Data2
	    (build [:(Int r0#) r1# 
		     Pure (Read r0# + Read r1# + Alloc r0# + Alloc r1#)
		     (Use r0# + Use r1#) (Use r0# + Use r1#) :]
		    (/\(b : Data). /\(ec1 ec2 en : Effect). /\(cc1 cc2 cn : Closure).
		    \(c : Int r0# -(ec1|cc1)> b -(ec2|cc2)> b).
		    \(n : Unit -(en|cn)> b).

		    foldr [:(Int r0#) b r1#
			    (Read r0# + Alloc r0# + ec1)
				ec2 en
			    (Use r0# + cc1) cc2 cn
			    :]

			(compose [:(Int r0#) (Int r0#) (b -(ec2|cc2)> b)
				   ec1 (Alloc r0# + Read r0#)
				   cc1 (Use r0#)
				 :] c double)
			n

			-- enum 100
			(build [:(Int r0#) r1# Pure (Read r0# + Alloc r0#) (Use r0#) (Use r0#):] (countZ (100 [r0#] ())))
		    ))))

;;


-- If it's only a 'build' at the start, the inner foldrs and builds don't know
-- what their entire effect will be. So they were not being fired.
:trans..

-- map Data2
(build [:(Int r0#) r1# 
	 Pure (Read r0# + Read r1# + Alloc r0# + Alloc r1#)
	 (Use r0# + Use r1#) (Use r0# + Use r1#) :]
	(/\(b : Data). /\(ec1 ec2 en : Effect). /\(cc1 cc2 cn : Closure).
	\(c : Int r0# -(ec1|cc1)> b -(ec2|cc2)> b).
	\(n : Unit -(en|cn)> b).

	foldr [:(Int r0#) b r1#
		(Read r0# + Alloc r0# + ec1)
		    ec2 en
		(Use r0# + cc1) cc2 cn
		:]

	    (compose [:(Int r0#) (Int r0#) (b -(ec2|cc2)> b)
		       ec1 (Alloc r0# + Read r0#)
		       cc1 (Use r0#)
		     :] c double)
	    n

	    -- enum 100
	    (build [:(Int r0#) r1# Pure (Read r0# + Alloc r0#) (Use r0#) (Use r0#):] (countZ (100 [r0#] ())))
	))
;;

