
:set trans Beta

-- Identity function
:trans (\(x : Unit). x) ()


-- Identify function with indices.
:trans (\(^ : Unit). ^0) ()


-- Avoid capture of value var by value lambda in value subst.
:trans..
let x = () in 
(\(y : Unit). \(x : Unit). y) x;;


-- Don't substitute past binder with the same name.
:trans..
let u = () in
(\(x : Unit). \(x : Unit). x) u;;


-- Avoid capture of value var by let binding in value subst.
:trans..
let x = () in 
(\(y : Unit). 
        let x = 2 [R0#] x 
        in addInt [:R0# R0# R0#:] x (3 [R0#] y)) x;;


-- Don't substitute past binder with the same name.
:trans..
let u = () in 
(\(x : Unit). 
        let x = 2 [R0#] u 
        in addInt [:R0# R0# R0#:] x (3 [R0#] u)) u;;


-- Avoid capture of value var by letrec binding in value subst.
:trans..
let x = () in 
(\(y : Unit). 
        letrec { x (z : Int R0#) : Int R0# = z } 
        in addInt [:R0# R0# R0#:] (x (2 [R0#] y)) (3 [R0#] y)) 
        x;;


-- Avoid capture of value var by match bining in value subst.
:trans..
let x = () in
(\(y : Unit).
       case Nil [R0#] [Int R0#] () of {
        Nil            -> 0 [R0#] ();
        Cons x xs      -> addInt [:R0# R0# R0#:]
                                 (3 [R0#] y)
                                 x
       })
       x;;


-- Should be ok.
:trans..
letregion r0 with { wc : Const r0; wg : Global r0 } in
let x = 5 [r0] () in
addInt [:r0 r0 R0#:]
        ((\(wc' : Const r0) (wg' : Global r0). \(_ : Unit).
                letregion r1 with { wl : Lazy r1 ; w1 : Const r1; w2 : Global r1 } in
                let x = purify read [r0] wc' & alloc [r1] w1 in
                        forget use  [r0] wg' & use   [r1] w2 in
                        addInt [:r0 r0 r1:] x x
                in  addInt [:r1 r1 r0:] x x)
                {:wc wg:} ())
        (5 [r0] ());;


-- Avoid capture of witness var by witness lambda in witness subst.
:trans..
letregion r0 with { wc : Const r0; wg : Global r0 } in
let x = 5 [r0] () in
addInt [:r0 r0 R0#:]
        ((\(wc' : Const r0) (wc : Global r0). \(_ : Unit).
                letregion r1 with { wl : Lazy r1 ; w1 : Const r1; w2 : Global r1 } in
                let x = purify read [r0] wc' & alloc [r1] w1 in
                        forget use  [r0] wc  & use   [r1] w2 in
                        addInt [:r0 r0 r1:] x x
                in  addInt [:r1 r1 r0:] x x)
                {:wc wg:} ())
        (5 [r0] ());;


-- Avoid capture of witness var by witness binding in witness subst.
:trans..
letregion r0 with { wc : Const r0; wg : Global r0 } in
let x = 5 [r0] () in
addInt [:r0 r0 R0#:]
        ((\(wc' : Const r0) (wg : Global r0). \(_ : Unit).
                letregion r1 with { wc : Lazy r1 ; w1 : Const r1; w2 : Global r1 } in
                let x = purify read [r0] wc' & alloc [r1] w1 in
                        forget use  [r0] wg  & use   [r1] w2 in
                        addInt [:r0 r0 r1:] x x
                in  addInt [:r1 r1 r0:] x x)
                {:wc wg:} ())
        (5 [r0] ());;


-- Rewrite outer type binder to avoid shadow conflict on type lambda.
:trans..
(\(f : [a : Data]. Unit -> Unit). /\(a : Data). f [a] ())
        (/\(a : Data). \(_ : Unit). ());;


-- Rewrite quantifier to avoid capture.
:trans..
(/\(a : Data). 
    (/\(b : Data). \(x : [a : Data]. a -> b). ())
    [a]);;


-- Rewrite variables on types of value binders.
:trans..
(\(x : Unit -> Unit). /\(r : Region). \(y : Int r). y)
        (\(_ : Unit). letregion r in ());;


-- Rewrite variables on types of witness binders.
:trans..
(\(x : Unit -> Unit). /\(r : Region). \(y : Int r). \(wg : Global r). \(wl : Lazy r).
        let x = forget use [r] wg in y 
        in  x)
        (\(_ : Unit). letregion r in ());;


-- In the resulting expression, check that closure variables are only
-- lowered when the corresponding bind is anonymous.
:trans..
let x = () in
(\(y : Unit). \(x : Int R0#). \(y : Unit). x) x;;

