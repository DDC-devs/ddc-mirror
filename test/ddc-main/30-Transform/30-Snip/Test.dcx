
:set +Indent
:set trans Snip

-- Identity function
:trun (\(x : Unit). x) ()


-- Identify function with indices.
:trun (\(^ : Unit). ^0) ()


-- Primitive operator.
:trun addInt [:r0# r0# r0#:] (1 [r0#] ()) (2 [r0#] ())


-- Nested applications
:trun.. 
addInt [:r0# r1# r2#:] 
       (1 [r0#] ()) 
       (addInt [:r1# r1# r1#:] 
               (2 [r1#] ()) 
               (addInt [:r3# r3# r1#:] 
                       (3 [r3#] ()) 
                       (4 [r3#] ())));;

-- Type abstraction
:trun (/\(t:Data).\(x:t).x) [List r0# (Int r0#)] (Nil [r0#] [Int r0#] ())


-- Primitive in case exp
:trun..
(\(u:Unit). 
case 1 [r0#] u of {
    0 -> 1 [r0#] u;
    _ -> addInt [:r0# r0# r0#:] (2 [r0#] u) (3 [r0#] u)
}) ();;


-- Letrec
:trun..
letrec {
 fac    [r:Region] (n : Int r) {Read r + Alloc r | Use r} : Int r
  = case n of {
        0       -> 1 [r] ();
        _       -> mulInt [:r r r:] n
                      (fac [r] (subInt [:r r r:] n
                                       (1 [r] ())));
     }
} in fac [r1#] (5 [r1#] ());;


-- Snip out discriminants of case expressions
:trun..
case (\(x : Int r0#). x) (5 [r0#] ()) of {
        _       -> ()
};;


-- Introduce new bindings for over-applied functions.
:set trans SnipOver
:trun..
let id [a : Data] (x : a)
        = x 
in 
let add (x : Int r0#) (y : Int r0#) 
        = addInt [:r0# r0# r0#:] x y

in  (id [Int r0# -(Pure | Use r0#)> Int r0# -(Read r0# + Alloc r0# | Use r0#)> Int r0#])
        add
        (2 [r0#] ())
        (3 [r0#] ());;


-- Function applied to several nested arguments with deBruijn binders.
:set lang Salt
:set trans Snip
:trans..
(/\(^ : Region)./\(^ : Data).
 \(^ : Ptr# ^1 Obj).\(^ : Nat#).\(^ : ^0).
    write# [^0] (takePtr# [^1] [Obj] ^2)
                (add# [Nat#] 8#
                        (shl# [Nat#] ^1 (size2# [Addr#]))) ^0);;

