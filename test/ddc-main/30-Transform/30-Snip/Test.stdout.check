
ok
ok

-- Identity function
let ^ : Unit -> Unit
      = \(x : Unit). x in
^0 ()
()


-- Identify function with indices.
let ^ : Unit -> Unit
      = \(^ : Unit). ^0 in
^0 ()
()


-- Primitive operator.
let ^ : Int r0# = 1 [r0#] () in
let ^ : Int r0# = 2 [r0#] () in
addInt [r0#] [r0#] [r0#] ^1 ^0
3


-- Nested applications
let ^ : Int r0# = 1 [r0#] () in
let ^ : Int r1#
      = let ^ : Int r1# = 2 [r1#] () in
        let ^ : Int r1#
              = let ^ : Int r3# = 3 [r3#] () in
                let ^ : Int r3# = 4 [r3#] () in
                addInt [r3#] [r3#] [r1#] ^1 ^0 in
        addInt [r1#] [r1#] [r1#] ^1 ^0 in
addInt [r0#] [r1#] [r2#] ^1 ^0
10

-- Type abstraction
let ^ : [t : Data].t -> t
      = /\(t : Data).
         \(x : t). x in
let ^ : List r0# (Int r0#)
      = Nil [r0#] [Int r0#] () in
^1 [List r0# (Int r0#)] ^0
Nil


-- Primitive in case exp
let ^ : Unit -(Read r0# + Alloc r0# | Use r0#)> Int r0#
      = \(u : Unit).
        let ^ : Int r0# = 1 [r0#] u in
        case ^0 of {
          0  
           -> 1 [r0#] u;
          _ 
           -> let ^ : Int r0# = 2 [r0#] u in
              let ^ : Int r0# = 3 [r0#] u in
              addInt [r0#] [r0#] [r0#] ^1 ^0
        } in
^0 ()
5


-- Letrec
letrec {
  fac : [r : Region].Int r -(Read r + Alloc r | Use r)> Int r
    = /\(r : Region).
       \(n : Int r).
      case n of {
        0  
         -> 1 [r] ();
        _ 
         -> let ^ : Int r
                  = let ^ : Int r
                          = let ^ : Int r = 1 [r] () in
                            subInt [r] [r] [r] n ^0 in
                    fac [r] ^0 in
            mulInt [r] [r] [r] n ^0
      }
} in
let ^ : Int r1# = 5 [r1#] () in
fac [r1#] ^0
120


-- Snip out discriminants of case expressions
let ^ : Int r0#
      = let ^ : Int r0# -> Int r0#
              = \(x : Int r0#). x in
        let ^ : Int r0# = 5 [r0#] () in
        ^1 ^0 in
letcase _  = ^0 in
()
()


-- Introduce new bindings for over-applied functions.
ok
let id : [a : Data].a -> a
      = /\(a : Data).
         \(x : a). x in
let add : Int r0# -(Pure | Use r0#)> Int r0# -(Read r0# + Alloc r0# | Use r0#)> Int r0#
      = \(x y : Int r0#). addInt [r0#] [r0#] [r0#] x y in
let ^ : Int r0# = 2 [r0#] () in
let ^ : Int r0# = 3 [r0#] () in
let ^ : Int r0# -(Pure | Use r0#)> Int r0# -(Read r0# + Alloc r0# | Use r0#)> Int r0#
      = id [Int r0# -(Pure | Use r0#)> Int r0# -(Read r0# + Alloc r0# | Use r0#)> Int r0#] add in
^0 ^2 ^1
5


-- Function applied to several nested arguments with deBruijn binders.
ok
ok
/\(^ : Region)./\(^ : Data).
 \(^ : Ptr# ^1 Obj).\(^ : Nat#).\(^ : ^0).
let ^ : Addr# = takePtr# [^1] [Obj] ^2 in
let ^ : Nat#
      = let ^ : Nat#
              = let ^ : Nat# = size2# [Addr#] in
                shl# [Nat#] ^3 ^0 in
        add# [Nat#] 8# ^0 in
write# [^0] ^1 ^0 ^2

