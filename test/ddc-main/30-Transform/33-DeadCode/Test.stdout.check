ok
ok

ok

-- No effects
* TRANSFORM INFORMATION: 
    fix 5:
        DeadCode:
            Removed:        3;
        DeadCode:
            Removed:        0

weakeff [Alloc R0#] in
weakclo {} in
weakeff [Alloc R0#] in
weakclo {} in
weakeff [Alloc R0#] in
weakclo {} in
()

-- Doesn't work for anonymous
* TRANSFORM INFORMATION: 
    fix 5:
        DeadCode:
            Removed:        0

let ^ : Int R0# = 5 [R0#] () in
let ^ : Int R0# = 5 [R0#] () in
let ^ : Int R0# = 5 [R0#] () in
()

-- Works for unnamed
* TRANSFORM INFORMATION: 
    fix 5:
        DeadCode:
            Removed:        3;
        DeadCode:
            Removed:        0

weakeff [Alloc R0#] in
weakclo {} in
weakeff [Alloc R0#] in
weakclo {} in
weakeff [Alloc R0#] in
weakclo {} in
()


-- Use one of them
* TRANSFORM INFORMATION: 
    fix 5:
        DeadCode:
            Removed:        1;
        DeadCode:
            Removed:        0

weakeff [Alloc R0#] in
weakclo {} in
let y : Int R0# = 5 [R0#] () in
y

-- Make mutable, but no update
* TRANSFORM INFORMATION: 
    fix 5:
        DeadCode:
            Removed:        1;
        DeadCode:
            Removed:        0

letregion r with {w : Mutable r} in
weakeff [Alloc r] in
weakclo {[r]} in
()

-- Do an update - update name is unmentioned
* TRANSFORM INFORMATION: 
    fix 5:
        DeadCode:
            Removed:        0

letregion r with {w : Mutable r} in
let x : Int r = 5 [r] () in
let y : Unit
      = updateInt [r] [r] <w> x (2 [r] ()) in
copyInt [r] [R0#] x

-- TODO Doesn't cascade, because of the weakclo produced...
* TRANSFORM INFORMATION: 
    fix 5:
        DeadCode:
            Removed:        1;
        DeadCode:
            Removed:        1;
        DeadCode:
            Removed:        1;
        DeadCode:
            Removed:        0

weakeff [Read R0# + Alloc R0#] in
weakclo {} in
weakeff [Read R0# + Alloc R0#] in
weakclo {[R0#]; addInt} in
weakeff [Read R0# + Alloc R0#] in
weakclo {[R0#]; addInt; subInt} in
()

