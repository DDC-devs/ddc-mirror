
-- Check for language compliance violations that would confuse
-- the backend compiler.
:set lang Salt


-- Error: name shadowing in function definition
:to-c..
module Main with letrec
foo (x : Int#) (x : Int#) : Int#
 = return# [Int#] x;;


-- Error: name shadowing in let-expression
:to-c..
module Main with letrec
foo (x : Int#) : Int#
 = let x = 0i# 
   in  return# [Int#] x;;


-- Error: use of debruijn binders
:to-c..
module Main with letrec
foo (^ : Int#) : Int#
 = return# [Int#] ^0;;


-- Error: general application
:to-c..
module Main with letrec
foo (^ : Int#) : Int#
 = (case 0i# of {_ -> add# [Int#]})
    ^0 ^0;;


-- Error: partially applied primop
:to-c..
module Main with letrec
foo (x : Int#) : Int#
 = let f = add# [Int#] x
   in  return# [Int#] (f x);;


-- Error: partial application not supported in Salt.
:to-c..
module Main with letrec
foo2 (x : Nat#) (y : Nat#) : Nat#
 = let foo1     = foo2 2#
   in  foo1 3#;;


-- Error: cannot instantiate a type variable at an unboxed type.
:to-c..
module Main with letrec
id  [a : *] (x : a) : a    = x
foo (x : Int#)      : Int# = id [Int#] x;;
