
-- Discarding witness declaration and application when converting to C
:set lang Salt
:set +Indent
:to-c..
module Main 
imports {
    allocRaw :: [r : %]. Tag# -> Nat# -> Ptr# r Obj;
    getTag   :: [r : %]. Ptr# r Obj -> Tag#;
}
with letrec {
addDistinct [r1 r2 r3 : %] <w1 : Mutable r1> <w2 : Distinct2 r1 r2> (x : Ptr# r1 Obj) (y : Ptr# r2 Obj)
    : Ptr# r3 Obj
 =  let x'  = unboxInt [r1] x in
    let y'  = unboxInt [r2] y in
    let r   = add# [Int#] x' y' in
    let z   = boxInt [r3] r in
    return# [Ptr# r3 Obj] z;


boxInt  [r : %] (x : Int#) : Ptr# r Obj
 = do { obj     = allocRaw [r] TAG0# 4#;
    addr    = takePtr# [r] [Obj] obj;
    write#  [Int#] addr 8# x;
    return# [Ptr# r Obj] obj;
    };


unboxInt [r : %] (obj : Ptr# r Obj) : Int#
 = do { addr    = takePtr# [r] [Obj] obj;
        x       = read#    [Int#] addr 8#;
        return# [Int#] x;
      };


main (argc : Nat#) (argv : Addr#) : Int#
 = 	 letregion r1 with { w1 : Mutable r1 } in
     letregion r2 with { w2 : Distinct r1 r2 } in
     let x1  : Ptr# r1 Obj = boxInt [r1] 5i# in
     let x2  : Ptr# r2 Obj = boxInt [r2] 7i# in
     let ret : Ptr# r1 Obj = addDistinct [:r1 r2 r1:] <w1> <w2> x1 x2 in
     let str : String#     = showInt# (unboxInt [r1] ret) in
     let _   : Void#       = putStrLn# str in
     return# [Int#] 0i#;
};;
