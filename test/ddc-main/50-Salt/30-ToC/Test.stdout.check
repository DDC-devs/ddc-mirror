
-- Convert a Core Salt module into raw C code.
ok
ok
Obj* addInt (Obj* _x, Obj* _y)
{
        int_t __sym_xZPm = 0;
        int_t __sym_yZPm = 0;
        int_t _r = 0;
        Obj* _z = 0;

        __sym_xZPm   = unboxInt(_x);
        __sym_yZPm   = unboxInt(_y);
        _r           = (__sym_xZPm + __sym_yZPm);
        _z           = boxInt(_r);
        return _z;
}

Obj* boxInt (int_t _x)
{
        Obj* _obj = 0;
        addr_t _addr = 0;

        _obj         = allocRaw(0, 4);
        _addr        = _TAKEPTR(Obj, _obj);
        _WRITE(int_t, _addr, 8, _x);
        return _obj;
}

int_t unboxInt (Obj* _obj)
{
        addr_t _addr = 0;
        int_t _x = 0;

        _addr        = _TAKEPTR(Obj, _obj);
        _x           = _READ(int_t, _addr, 8);
        return _x;
}

int_t main (nat_t _argc, addr_t _argv)
{
        Obj* _x = 0;
        Obj* _x2 = 0;
        int_t _x0 = 0;
        string_t _str = 0;

        _x           = boxInt(5);
        _x2          = addInt(_x, _x);
        _x0          = unboxInt(_x2);
        _str         = _showInt(_x0);
        _putStrLn(_str);
        return 0;
}


-- Discarding witness declaration and application when converting to C
ok
ok
Obj* addDistinct (Obj* _x, Obj* _y)
{
        int_t __sym_xZPm = 0;
        int_t __sym_yZPm = 0;
        int_t _r = 0;
        Obj* _z = 0;

        __sym_xZPm   = unboxInt(_x);
        __sym_yZPm   = unboxInt(_y);
        _r           = (__sym_xZPm + __sym_yZPm);
        _z           = boxInt(_r);
        return _z;
}

Obj* boxInt (int_t _x)
{
        Obj* _obj = 0;
        addr_t _addr = 0;

        _obj         = allocRaw(0, 4);
        _addr        = _TAKEPTR(Obj, _obj);
        _WRITE(int_t, _addr, 8, _x);
        return _obj;
}

int_t unboxInt (Obj* _obj)
{
        addr_t _addr = 0;
        int_t _x = 0;

        _addr        = _TAKEPTR(Obj, _obj);
        _x           = _READ(int_t, _addr, 8);
        return _x;
}

int_t main (nat_t _argc, addr_t _argv)
{
        Obj* _x1 = 0;
        Obj* _x2 = 0;
        Obj* _ret = 0;
        int_t _x0 = 0;
        string_t _str = 0;

        _x1          = boxInt(5);
        _x2          = boxInt(7);
        _ret         = addDistinct(_x1, _x2);
        _x0          = unboxInt(_ret);
        _str         = _showInt(_x0);
        _putStrLn(_str);
        return 0;
}


