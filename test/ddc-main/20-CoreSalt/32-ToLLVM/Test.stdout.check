ok
ok
ok


-- Check that the size prims are available
size# :: [^ : Data].Nat#
size2# :: [^ : Data].Nat#


-- Get the size of prim types.
%s.Obj = type <{i64}>
@_DDC__heapTop = external global  i64
@_DDC__heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8

define internal fastcc i64 @nat(%s.Obj*  %_v1._arg) align 8  
{
l2.entry:
        ret i64 8
}

define internal fastcc i64 @int(%s.Obj*  %_v4._arg) align 8  
{
l5.entry:
        ret i64 8
}

define internal fastcc i64 @word16(%s.Obj*  %_v7._arg) align 8  
{
l8.entry:
        ret i64 2
}

define internal fastcc i64 @tag(%s.Obj*  %_v10._arg) align 8  
{
l11.entry:
        ret i64 4
}







-- Get the log2 size of prim types.
%s.Obj = type <{i64}>
@_DDC__heapTop = external global  i64
@_DDC__heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8

define internal fastcc i64 @nat(%s.Obj*  %_v1._arg) align 8  
{
l2.entry:
        ret i64 3
}

define internal fastcc i64 @int(%s.Obj*  %_v4._arg) align 8  
{
l5.entry:
        ret i64 3
}

define internal fastcc i64 @word8(%s.Obj*  %_v7._arg) align 8  
{
l8.entry:
        ret i64 0
}

define internal fastcc i64 @word16(%s.Obj*  %_v10._arg) align 8  
{
l11.entry:
        ret i64 1
}

define internal fastcc i64 @ptr(%s.Obj*  %_v13._arg) align 8  
{
l17.entry:
        ret i64 3
}

define internal fastcc i64 @tag(%s.Obj*  %_v19._arg) align 8  
{
l20.entry:
        ret i64 2
}



!16 = !{!"ptr_r",  !15, i32 0}
!15 = !{!"ptr_ROOT_14", null, i32 1}



-- Function arguments without names still need to appear in the generated code.
%s.Obj = type <{i64}>
@_DDC__heapTop = external global  i64
@_DDC__heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8

define internal fastcc i64 @blerk(%s.Obj*  %_v1._arg) align 8  
{
l2.entry:
        ret i64 3
}





