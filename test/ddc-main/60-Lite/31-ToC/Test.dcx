
:set lang Lite
:set +Indent +SuppressImports
:set builder x86_64-darwin


-- Integer boxing,
--      packs a RawSmall Object.
:to-c..
module Test with letrec
boxInt [r : %] (i : Int#) { Alloc r | Use r } : Int r
        = I# [r] i;;


-- Integer unboxing,
--      unpacks a RawSmall Object.
:to-c..
module Test with letrec
unboxInt [r : %] (x : Int r) { Read r | $0 } : Int#
 = case x of 
        I# i  -> i;;


-- Boxed addition
:to-c..
module Test with letrec
addInt [r1 r2 r3 : %] 
        (x : Int r1) { !0 | Use r3 } 
        (y : Int r2) { Read r1 + Read r2 + Alloc r3 | Use r1 + Use r3}
        : Int r3
 =  case x of { I# i1 
 -> case y of { I# i2 
 -> I# [r3] (add# [Int#] i1 i2) } };;


-- Construct a singleton list,
--      packs a Boxed objet.
:to-c..
module Test with letrec
singleton [r1 r2 : %] (x : Int r2) { Alloc r1 | Use r1 } 
        : List r1 (Int r2)
 = Cons [r1] [Int r2] x (Nil [r1] [Int r2] ());;


-- #285: Case matches on unit arguments.
:to-salt..
module Test with letrec
foo [r1 : %] (x : Unit) : Unit
 = case x of { _ -> () };;

:to-salt..
module Test with letrec
foo [r1 : %] (x : Unit) : Unit
 = case x of { () -> () };;

