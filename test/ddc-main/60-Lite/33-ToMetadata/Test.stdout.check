ok
ok

-- Observable optimisations
-- Feed the output of this test to `opt -S -tbaa -basicaa -gvn -o - <test.ll>`
-- 
--    This test is equivalent to:
--      int gvn_test (int* x, int* y, int* z, int* beta) {
--        int a = *x + *y;
--        *z = a;
--        *beta = *x + *y;
--        return *beta;
--      }
--    Where we have (distinct x z) and (distinct y z)
--    The second load to x and y (to evaluate *x + *y) should be eliminated.
--
-- PROBLEM: since only load/stores can be annotated (and not function calls),
--    we have to inline addInt manually here.
--
ok
%s.Obj = type <{i64}>
@DDC.Runtime.heapTop = external global  i64
@DDC.Runtime.heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8

define external ccc void @foo(i64*  %x, i64*  %y, i64*  %z, i64*  %beta) align 8  
{
l9.entry:
        %xval1.addr1 = ptrtoint i64* %x to i64
        %xval1.addr2 = add i64 %xval1.addr1, 0
        %xval1.ptr   = inttoptr i64 %xval1.addr2 to i64*
        %xval1       = load i64* %xval1.ptr,    !tbaa !6
        %yval1.addr1 = ptrtoint i64* %y to i64
        %yval1.addr2 = add i64 %yval1.addr1, 0
        %yval1.ptr   = inttoptr i64 %yval1.addr2 to i64*
        %yval1       = load i64* %yval1.ptr,    !tbaa !7
        %a           = add i64 %xval1, %yval1
        %_v10.addr1  = ptrtoint i64* %z to i64
        %_v11.addr2  = add i64 %_v10.addr1, 0
        %_v12.ptr    = inttoptr i64 %_v11.addr2 to i64*
        store i64 %a, i64* %_v12.ptr,    !tbaa !8
        %xval2.addr1 = ptrtoint i64* %x to i64
        %xval2.addr2 = add i64 %xval2.addr1, 0
        %xval2.ptr   = inttoptr i64 %xval2.addr2 to i64*
        %xval2       = load i64* %xval2.ptr,    !tbaa !6
        %yval2.addr1 = ptrtoint i64* %y to i64
        %yval2.addr2 = add i64 %yval2.addr1, 0
        %yval2.ptr   = inttoptr i64 %yval2.addr2 to i64*
        %yval2       = load i64* %yval2.ptr,    !tbaa !7
        %b           = add i64 %xval2, %yval2
        %_v13.addr1  = ptrtoint i64* %beta to i64
        %_v14.addr2  = add i64 %_v13.addr1, 0
        %_v15.ptr    = inttoptr i64 %_v14.addr2 to i64*
        store i64 %b, i64* %_v15.ptr,    !tbaa !3
        ret void
}



!8 = metadata !{metadata !"foo_rz", metadata !5, i32 0}
!7 = metadata !{metadata !"foo_ry", metadata !6, i32 0}
!6 = metadata !{metadata !"foo_rx", metadata !5, i32 0}
!5 = metadata !{metadata !"foo_ROOT_4", null, i32 1}
!3 = metadata !{metadata !"foo_rbeta", metadata !2, i32 0}
!2 = metadata !{metadata !"foo_ROOT_1", null, i32 1}


-- Include elaborated witnesses in metadata tree
ok
%s.Obj = type <{i64}>
@DDC.Runtime.heapTop = external global  i64
@DDC.Runtime.heapMax = external global  i64
declare external ccc i64 @malloc(i64 ) align 8
declare external ccc void @abort() align 8
declare external ccc %s.Obj* @allocBoxed(i32 , i64 ) align 8
declare external ccc %s.Obj* @allocRawSmall(i32 , i64 ) align 8
declare external ccc %s.Obj* @getFieldOfBoxed(%s.Obj* , i64 ) align 8
declare external ccc i32 @getTag(%s.Obj* ) align 8
declare external ccc %s.Obj* @payloadOfRawSmall(%s.Obj* ) align 8
declare external ccc void @setFieldOfBoxed(%s.Obj* , i64 , %s.Obj* ) align 8

define external ccc %s.Obj* @bar() align 8  
{
l8.entry:
        %_v9         = call %s.Obj* @allocBoxed (i32 0, i64 0) 
        ret %s.Obj* %_v9
}



!7 = metadata !{metadata !"bar_r3", metadata !4, i32 0}
!6 = metadata !{metadata !"bar_r2", metadata !4, i32 0}
!5 = metadata !{metadata !"bar_r1", metadata !4, i32 0}
!4 = metadata !{metadata !"bar_ROOT_3", null, i32 1}
!2 = metadata !{metadata !"bar_ROOT_1", null, i32 1}
