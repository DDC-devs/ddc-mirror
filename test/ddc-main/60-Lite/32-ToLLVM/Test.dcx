
:set lang Lite
:set +Indent +SuppressImports
:set builder x86_64-darwin


-- Boxed addition
:to-llvm..
module Test with letrec
addInt [r1 r2 r3 : Region] 
        (x : Int r1) { Pure | Use r3 } 
        (y : Int r2) { Read r1 + Read r2 + Alloc r3 | Use r1 + Use r3}
        : Int r3
 =  case x of { I# i1 
 -> case y of { I# i2 
 -> I# [r3] (add# [Int#] i1 i2) } };;


-- None binders.
:to-llvm..
module Test with letrec
thing [r1 : Region] (z : Unit) { Alloc r1 | Use r1 } : Unit
 = do   _       = N# [r1] 5#
        ();;


-- Join points.
:to-llvm..
module Test 
imports { 
        addNat  :: [r1 r2 r3 : Region]
                . Nat r1 
                -(Pure | Use r3)> Nat r2 
                -(Read r1 + Read r2 + Alloc r3 | Use r1 + Use r3)> Nat r3;
}
with letrec
thing   [r1 : Region] 
        (b : Bool#) { Read r1 + Alloc r1 | Use r1 } 
        : Nat r1
 = let  x       = case b of
                        True#  -> N# [r1] 5#
                        False# -> N# [r1] 6#
   in   addNat [:r1 r1 r1:] x (N# [r1] 1#);;

