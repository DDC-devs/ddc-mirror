

:set lang Lite


-- Literals
:check 5#

:check 5i#


-- Primitives
:check..
add#;;

:kind Int
:kind Bool


-- Boxing bools
:check..
/\(r : %). \(x : Bool#). B# [r] x;;


-- Unboxing bools.
:check..
/\(r : %). \(x : Bool r). case x of { B# b -> b };;


-- Boxing ints
:check..
/\(r : %). \(x : Int#). I# [r] x;;


-- Unboxing ints
:check..
/\(r : %). \(x : Int r). case x of { I# i -> i };;


-- Boxed integer add
:check..
let unboxInt = /\(r : %). \(x : Int r). case x of { I# i -> i } in
let addInt [r1 r2 r3 : %] 
        (x : Int r1) { !0 | Use r3 } 
        (y : Int r2) { Read r1 + Read r2 + Alloc r3 | Use r1 + Use r3 }
        : Int r3
     =  case x of { I# i1 
     -> case y of { I# i2 
     -> I# [r3] (add# [Int#] i1 i2) } } in
letregion r1 in
unboxInt [r1] (addInt [:r1 r1 r1:] (I# [r1] 2i#) (I# [r1] 3i#));;
