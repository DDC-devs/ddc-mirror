:set Indent

-- add zero on right. make copy
:set rule add0r [r1 r2 r3 : Region] (x : Int r1). addInt [:r1 r2 r3:] x (0 [r2] ()) = copyInt [:r1 r3:] x
:set rule add0l [r1 r2 r3 : Region] (y : Int r2). addInt [:r1 r2 r3:] (0 [r1] ()) y = copyInt [:r2 r3:] y

-- should work with any regions
:set trans Rewrite
:trans addInt [:r0# r0# r0#:] (5 [r0#] ()) (0 [r0#] ())

:trans addInt [:r1# r2# r3#:] (5 [r1#] ()) (0 [r2#] ())

-- addInt is strict & closure free so we can reduce any copies in its args
:set.. rule addCopy1 [r1 r1' r2 r3 : Region] (x : Int r1') (y : Int r2).
    addInt [:r1 r2 r3:] (copyInt [:r1' r1:] x) y =
    addInt [:r1' r2 r3:] x y;;

:set.. rule addCopy2 [r1 r2 r2' r3 : Region] (x : Int r1) (y : Int r2').
    addInt [:r1 r2 r3:] x (copyInt [:r2' r2:] y) =
    addInt [:r1 r2' r3:] x y;;


-- simplify some nested zeroes
:set trans Rewrite
:trans addInt [:r0# r1# r2#:] (addInt [:r0# r0# r0#:] (5 [r0#] ()) (0 [r0#] ())) (0 [r1#] ())


-- we can simplify out a copy of a literal.
:set.. rule copyLit [r1 r2 : Region] (lit : [^ : Region]. Unit -(Alloc ^0 | Empty)> Int ^0).
    copyInt [:r1 r2:] (lit [r1] ()) =
    lit [r2] ();;
-- and a copy of a copy
:set.. rule copyCopy [r1 r2 r3 : Region] (x : Int r1).
    copyInt [:r2 r3:] (copyInt [:r1 r2:] x) =
    copyInt [:r1 r3:] x;;

-- some more nested zeroes
:set trans Rewrite
:trans addInt [:r0# r1# r2#:] (addInt [:r0# r0# r0#:] (5 [r0#] ()) (0 [r0#] ())) (0 [r1#] ())

-- add a let binding
:trans..
let x = 5 [r9#] () in
addInt [:r7# r1# r2#:]
    (addInt [:r9# r8# r7#:] x (0 [r8#] ()))
    (0 [r1#] ())
;;


-- nested inside a function: give the closures a workout
:trans..
letrec foo [r1 r2 r3 : Region]
    (x : Int r1)
    { Read r1 + Read r2 + Alloc r2 + Alloc r3 | Use r1 + Use r2 + Use r3 }
    : Int r3
 =  addInt [:r1 r2 r3:] x (0 [r2] ())
in
 foo [:r0# r0# r0#:] (5 [r0#] ())
;;
