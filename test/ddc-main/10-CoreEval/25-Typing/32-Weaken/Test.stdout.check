-- When choosing between two functions, 
-- use the weakening forms to make the type of the smaller
-- one match the larger.
/\(r1 r2 : Region).
 \(x : Int r1).
case x of {
  0  
   -> \(y : Int r2).
      weakeff [Read r1 + Read r2 + Alloc r2] in
      weakclo {x; [r2]} in
      y;
  _ 
   -> \(y : Int r2).
      addInt [r1] [r2] [r2] x (1 [r2] ())
}
:*: [r1 r2 : Region].Int r1 -(Read r1 | Use r1 + Use r2)> Int r2 -(Read r1 + Read r2 + Alloc r2 | Use r1 + Use r2)> Int r2
:!: Pure
:$: Empty


-- Error: type supplied to weakeff does not have effect kind
When checking expression.
  <batch>:21:20
  Type provided for a 'weakeff' does not have effect kind.
             Type: r1
         has kind: Region
  
  with: weakeff [r1] in
        weakclo {x; [r2]} in
        y


-- Weakens should still evaluate their args
10

