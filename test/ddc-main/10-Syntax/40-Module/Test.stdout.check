-- Load a module definition.
module Main 
exports {
        double :: [r : Region].Int r -(Read r + Alloc r | Use r)> Int r;
        main :: Unit -> Unit;
} 
imports {
        two :: [r5 : Region].Unit -(Alloc r5 | Empty)> Int r5;
} with
letregion rt with {w1 : Const rt; w2 : Lazy rt}
let one : Int rt
      = purify <read [rt] w1> in
        1 [rt] ()
letrec {
  main : Unit -> Unit
    = \(_ : Unit).
      letregion r0 in
      ();
  
  double : [r : Region].Int r -(Read r + Alloc r | Use r)> Int r
    = /\(r : Region).
       \(x : Int r).
      mulInt [r] [r] [r] x (two [r] ());
  
  thing : [r : Region].Int r -(Read r + Read rt + Alloc r | Use r + Use rt)> Int r
    = /\(r : Region).
       \(x : Int r). addInt [r] [rt] [r] x one
}


-- Load the same module using the offside rule.
module Main 
exports {
        double :: [r : Region].Int r -(Read r + Alloc r | Use r)> Int r;
        main :: Unit -> Unit;
} 
imports {
        two :: [r5 : Region].Unit -(Alloc r5 | Empty)> Int r5;
} with
letregion rt with {w1 : Const rt; w2 : Lazy rt}
let one : Int rt
      = purify <read [rt] w1> in
        1 [rt] ()
letrec {
  main : Unit -> Unit
    = \(_ : Unit).
      letregion r0 in
      ();
  
  double : [r : Region].Int r -(Read r + Alloc r | Use r)> Int r
    = /\(r : Region).
       \(x : Int r).
      mulInt [r] [r] [r] x (two [r] ());
  
  thing : [r : Region].Int r -(Read r + Read rt + Alloc r | Use r + Use rt)> Int r
    = /\(r : Region).
       \(x : Int r). addInt [r] [rt] [r] x one
}
