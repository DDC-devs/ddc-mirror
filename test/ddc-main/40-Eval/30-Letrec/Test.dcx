-- Simply recursive factorial.
:eval..
letrec {
 fac    [r:%] (n : Int r) {Read r + Alloc r | Use r} : Int r
  = case n of {
        0       -> 1 [r] ();
        _       -> mulInt [:r r r:] n
                      (fac [r] (subInt [:r r r:] n
                                       (1 [r] ())));
     }
} in fac [R1#] (5 [R1#] ());;


-- Tail recursive factorial.
:eval..
letrec {
 fac   [r:%] 
        (acc : Int r) {!0 | Use r}
        (n   : Int r) {Read r + Alloc r | Use r} : Int r
  = case n of {
        0       -> acc;
        1       -> acc;
        _       -> fac [r] (mulInt [:r r r:] acc n)
                           (subInt [:r r r:] n (1 [r] ()))
    }
} in fac [R1#] (1 [R1#] ()) (5 [R1#] ());;


-- Enumeration.
:eval..
letrec {
 enumFromTo 
        [r1 r2:%]
        (m : Int r1) {!0 | Use r1 + Use r2}
        (n : Int r1) {Read r1 + Alloc r1 + Alloc r2 | Use r1 + Use r2}
        : List r2 (Int r1)
  = case eqInt [:r1 r1 r1:] m n of {
        0 -> Cons [r2] [Int r1] m
                (enumFromTo [:r1 r2:]
                        (addInt [:r1 r1 r1:] m (1 [r1] ()))
                        n);
        _ -> Cons [r2] [Int r1] m
                (Nil [r2] [Int r1] ());
  }
} in enumFromTo [:R1# R2#:] (5 [R1#] ()) (9 [R1#] ());;


-- Handle forget around let-expression.
:eval..
letregion r with {w : Global r} in
forget <use [r] w> in
let x = () in
(\(x : Unit). x) x;;
