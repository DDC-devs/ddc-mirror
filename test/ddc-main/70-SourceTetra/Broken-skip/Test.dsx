
-- Effectful List map with implicit effect management.
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

mapS    [a b : Data] [e : Effect]
        (f : a -> S e b) (xx : List a) : S e (List b)
 = case xx of
        Nil       -> Nil
        Cons x xs -> Cons (f x) (mapS f xs)
;;


-- Error: primitive data constructor re-used.
:to-salt..
module Test where

data Bool where
        True  : Bool
        False : Bool

neg (x : Bool) : Bool
 = case x of
        True    -> False
        False   -> True
;;


:to-salt..
module Test where

data Blerk where Foo : Blerk
data Blerk where Bar : Blerk

next (x : Blerk) : Blerk
 = case x of
        Foo     -> Foo
;;

