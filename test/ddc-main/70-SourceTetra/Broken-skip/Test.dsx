


-- Case expressions on literals.
-- Need to unbox scrutinee.
:to-salt..
module Test where
swap (x : Nat#) : Nat#
 = case x of
        0       -> 1
        _       -> 0
;;


:to-salt..
module Test where

data Bool where
        True  : Bool
        False : Bool

neg (x : Bool) : Bool
 = case x of
        True    -> False
        False   -> True
;;



-- List map using the S computation type.
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

mapS    [a b : Data] [e : Effect]
        (f : a -> S e b) (xx : List a) : S e (List b)
 = case xx of
        Nil       -> box Nil
        Cons x xs -> Cons (f x) (run mapS f xs)
;;


