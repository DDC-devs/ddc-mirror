


-- Case expressions on literals.
-- Need to unbox scrutinee.
:to-salt..
module Test where
swap (x : Nat#) : Nat#
 = case x of
        0       -> 1
        _       -> 0
;;


:to-salt..
module Test where

data Bool where
        True  : Bool
        False : Bool

neg (x : Bool) : Bool
 = case x of
        True    -> False
        False   -> True
;;



-- List map using the S computation type.
:to-core..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

mapS    [a b : Data] [e : Effect]
        (f : a -> S e b) (xx : List a) : S e (List b)
 = case xx of
        Nil       -> box Nil
        Cons x xs -> Cons (f x) (run mapS f xs)
;;



-- Polymorphically take the head of a list, where the element
-- has its own primary region annotation. In the Salt code the head
-- function is passed the top level region as the location of the element.
:set Dump
:to-salt..
module Test where
data List (a : Data) where
        Cons    : a -> List a -> List a
        Nil     : List a

data Blerk (r : Region) where
        Hot     : Blerk r
        Cold    : Blerk r

head (def : a) (xx : List a) : a
 = case xx of
        Cons x _        -> x
        _               -> def

foo  (_ : Unit) : Blerk r
 = head Hot (Cons Cold Nil)
;;
