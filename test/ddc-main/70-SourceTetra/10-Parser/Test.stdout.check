

-- A module with no top-level things.
module Test where



-- Parse module with some top-level things.
-- Top level things are signaled by 'where'.
module Test where
x : Nat = 5
y : Nat
  = DEFIX add# x x


-- Factorial with primops.
module Test where
fac : Nat -> Nat
  = \(x : Nat).
    case x of {
      0  
       -> 1;
      _ 
       -> DEFIX mul# x (DEFIX fac (DEFIX sub# x 1))
    }


-- Factorial with infix operators.
module Test where
fac : Nat -> Nat
  = \(x : Nat).
    case x of {
      0  
       -> 1;
      _ 
       -> DEFIX x (INFIXOP "*") (DEFIX fac (DEFIX x (INFIXOP "-") 1))
    }


-- All the literals
module Test where
foo : Unit -> Unit
  = \(_ : Unit).
    let b1 = True# in
    let b2 = False# in
    let n1 = 1 in
    let n2 = 2 in
    let n100 = 100 in
    let i1 = 1i in
    let i2 = 2i in
    let i100 = 100i in
    let in1 = 1i in
    let in2 = 2i in
    let in100 = 100i in
    ()
