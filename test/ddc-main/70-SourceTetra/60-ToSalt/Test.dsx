:set builder x86_64-darwin
:set SuppressLetTypes
:set SuppressImports

-- Simple Functions.
:to-salt..
module Test where
foo (x : Nat) : Nat
 = add# 2 (add# 3 x)
;;


-- Match aginst literal Bools.
:to-salt..
module Test where
neg (x : Bool) : Bool
 = case x of
        True    -> False
        False   -> True
;;


-- Match against literal Nat.
:to-salt..
module Test where
foo (x : Nat) : Nat
 = case x of
        5       -> 6
        6       -> 7
        _       -> 0
;;


-- Nested case expression.
:to-salt..
module Test where
foo (x : Nat) (y : Nat) : Nat
 = case x of
        0       -> case y of
                        0       -> 1
                        _       -> 0
        _       -> 0
;;


-- Full application of top-level function.
:to-salt..
module Test where
add (x : Nat) (y : Nat) : Nat
 = add# x y

foo (x : Nat) : Nat
 = add x 5
;;


-- Flip an enumerated value.
:to-salt..
module Test where
data Blerk where
        Hot  : Blerk
        Cold : Blerk
flipit (x : Blerk) : Blerk
 = case x of
        Hot     -> Cold
        Cold    -> Hot
;;


-- Function to take the head of a monomorphic list.
:to-salt..
module Test where
data ListNat where
        Cons    : Nat -> ListNat -> ListNat
        Nil     : ListNat
head (xx : ListNat) : Nat
 = case xx of
        Cons x _        -> x
        _               -> 0
;;


-- Function to take the head of a polymorphic list.
:to-salt..
module Test where
data List (a : Data) where
        Cons    : a -> List a -> List a
        Nil     : List a

head (def : a) (xx : List a) : a
 = case xx of
        Cons x _        -> x
        _               -> def
;;


-- Case expressions on literals.
-- Need to unbox scrutinee.
:to-salt..
module Test where
swap (x : Nat) : Nat
 = case x of
        0       -> 1
        _       -> 0
;;


-- Polymorphically take the head of a list, where the element
-- is in the top-level region. In the Salt code the head function
-- is passed the top level region as the location of the element.
:to-salt..
module Test where
data List (a : Data) where
        Cons    : a -> List a -> List a
        Nil     : List a

head (def : a) (xx : List a) : a
 = case xx of
        Cons x _        -> x
        _               -> def

foo  (_ : Unit) : Nat
 = head 0 (Cons 1 Nil)
;;


-- Polymorphically take the head of a list, where the element
-- has its own primary region annotation. In the Salt code the head
-- function is passed the top level region as the location of the element.
:to-salt..
module Test where

data List (a : Data) where
        Cons    : a -> List a -> List a
        Nil     : List a

data Blerk (r : Region) where
        Hot     : Blerk r
        Cold    : Blerk r

head (def : a) (xx : List a) : a
 = case xx of
        Cons x _        -> x
        _               -> def

foo  (_ : Unit) : Blerk r
 = head Hot (Cons Cold Nil)
;;

