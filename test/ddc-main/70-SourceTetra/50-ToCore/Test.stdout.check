
-- List length using infix addition.
module Test 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  add : [a : Data].a -> a -> a
    = /\(a : Data).
       \(x y : a). add# [a] x y;
  
  length : [a : Data].List a -> Nat#
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> 0#;
        Cons (x : a) (xs : List a) 
         -> add [Nat#] 1# (length [a] xs)
      }
}


-- More list functions.
module Test 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  singleton : [a : Data].a -> List a
    = /\(a : Data).
       \(x : a).
      Cons [a] x (Nil [a]);
  
  append : [a : Data].List a -> List a -> List a
    = /\(a : Data).
       \(xx yy : List a).
      case xx of {
        Nil  
         -> yy;
        Cons (x : a) (xs : List a) 
         -> Cons [a] x (append [a] xs yy)
      };
  
  reverse : [a : Data].List a -> List a
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> Nil [a];
        Cons (x : a) (xs : List a) 
         -> append [a] (reverse [a] xs) (singleton [a] x)
      };
  
  map : [a b : Data].(a -> b) -> List a -> List b
    = /\(a b : Data).
       \(f : a -> b).\(xx : List a).
      case xx of {
        Nil  
         -> Nil [b];
        Cons (x : a) (xs : List a) 
         -> Cons [b] (f x) (map [a] [b] f xs)
      }
}
