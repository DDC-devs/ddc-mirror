
-- List length using infix addition.
module Test 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  add : [a : Data].a -> a -> a
    = /\(a : Data).
       \(x y : a). add# [a] x y;
  
  length : [a : Data].List a -> Nat#
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> 0;
        Cons (x : a) (xs : List a) 
         -> add [Nat#] 1 (length [a] xs)
      }
}


-- More list functions.
module Test 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  singleton : [a : Data].a -> List a
    = /\(a : Data).
       \(x : a).
      Cons [a] x (Nil [a]);
  
  append : [a : Data].List a -> List a -> List a
    = /\(a : Data).
       \(xx yy : List a).
      case xx of {
        Nil  
         -> yy;
        Cons (x : a) (xs : List a) 
         -> Cons [a] x (append [a] xs yy)
      };
  
  reverse : [a : Data].List a -> List a
    = /\(a : Data).
       \(xx : List a).
      case xx of {
        Nil  
         -> Nil [a];
        Cons (x : a) (xs : List a) 
         -> append [a] (reverse [a] xs) (singleton [a] x)
      };
  
  map : [a b : Data].(a -> b) -> List a -> List b
    = /\(a b : Data).
       \(f : a -> b).\(xx : List a).
      case xx of {
        Nil  
         -> Nil [b];
        Cons (x : a) (xs : List a) 
         -> Cons [b] (f x) (map [a] [b] f xs)
      }
}


-- Effectful List map with explicit effect management.
--  The result computation is boxed in both alternatives,
--  which means we must weaken the effect of the first alternative.
module Test 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  mapS : [a b : Data].[e : Effect].(a -> S e b) -> List a -> S e (List b)
    = /\(a b : Data)./\(e : Effect).
       \(f : a -> S e b).\(xx : List a).
      case xx of {
        Nil  
         -> box
            weakeff [e] in
            Nil [b];
        Cons (x : a) (xs : List a) 
         -> box
            Cons [b]
                (run f x)
                (run mapS [a] [b] [e] f xs)
      }
}


-- Effectful List map with explicit effect management.
--  The result computation is boxed just inside the outer lambda.
module Test 
data List (a : Data) where {
        Nil : List a;
        Cons : a -> List a -> List a;
}
with
letrec {
  mapS : [a b : Data].[e : Effect].(a -> S e b) -> List a -> S e (List b)
    = /\(a b : Data)./\(e : Effect).
       \(f : a -> S e b).\(xx : List a).
      box
      case xx of {
        Nil  
         -> Nil [b];
        Cons (x : a) (xs : List a) 
         -> Cons [b]
                (run f x)
                (run mapS [a] [b] [e] f xs)
      }
}


-- Polymorphically take the head of a polymorphic list where
-- the element type has a primary region variable.
module Test 
data List (a : Data) where {
        Cons : a -> List a -> List a;
        Nil : List a;
}

data Blerk (r : Region) where {
        Hot : Blerk r;
        Cold : Blerk r;
}
with
letrec {
  head : [a : Data].a -> List a -> a
    = /\(a : Data).
       \(def : a).\(xx : List a).
      case xx of {
        Cons (x : a) (_ : List a) 
         -> x;
        _ 
         -> def
      };
  
  foo : [r : Region].Unit -> Blerk r
    = /\(r : Region).
       \(_ : Unit).
      head [Blerk r] (Hot [r])
          (Cons [Blerk r] (Cold [r])
               (Nil [Blerk r]))
}
