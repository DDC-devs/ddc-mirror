
module Main 
import Things
import System.IO.Console
where

-- Some monomorphic CAF.
--  During code generation we wrap it in a value abstraction
--  to make it a function.
nat2  = 93

-- Some polymorphic CAF.
--  During code generation we insert a value abstraction under
--  the existing type abstraction to make it a function.
fnord2 [a: Data]: Fnord a
 = Fnord

-- A suspended computation as a CAF.
comp2  = writel "beep2"

-- Evaluate a suspended computation twice.
doTwice (s: S e a): S e a
 = do   run s
        run s

-- Verify that we can pass a suspended computation,
-- as well as invoking the transformed CAFs.
main (_: Unit): S Console Unit
 = doTwice (box do writel $ "derp = " 
                          % showNat 
                                ( nat1 + nat2
                                + defnord (fnord1 [Nat#])
                                + defnord (fnord2 [Nat#]))
                   writel text1
                   run comp1
                   run comp2)

