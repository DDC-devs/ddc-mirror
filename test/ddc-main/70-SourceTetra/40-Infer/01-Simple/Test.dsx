

-- Insert [?] holes for type applications of variables with explicit signatures.
-- We only reconstruct type applications for vars with signatures because we
-- can do it without proper constraint solving.
-- Convert source to core that includes holes, then fill holes at core level.
:infer..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

map [a b : Data] (f : a -> b) (xx : List a) : List b
 = case xs of
        Nil       -> Nil
        Cons x xs -> Cons (f x) (map f xs)
;;


-- Function application already has some explicit type arguments.
:infer..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

map [a b : Data] (f : a -> b) (xx : List a) : List b
 = case xs of
        Nil       -> Nil
        Cons x xs -> Cons [a] (f x) (map [a] f xs)
;;


-- If any type variables are not in scope in a top-level signature,
-- then insert quantifiers for these.
:infer..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

map (f : a -> b) (xx : List a) : List b
 = case xs of
        Nil       -> Nil
        Cons x xs -> Cons (f x) (map f xs)
;;


-- The expanded type for 'add' should be used when expanding the body
-- of 'length'.
:infer..
module Test where
data List (a : Data) where
        Nil     : List a
        Cons    : a -> List a -> List a

add (x y : a) : a 
        = add# [a] x y

length (xx : List a) : Nat
 = case xx of
        Nil       -> 0
        Cons x xs -> 1 + length xs
;;


-- Data type used in function signature has a region variable.
-- During elaboration we add a region parameter to the front of flipit.
:infer..
module Test where
data Blerk (r : Region) where
        Hot     : Blerk r
        Cold    : Blerk r

flipit (x : Blerk r) : Blerk r
 = case x of
        Hot     -> Cold
        Cold    -> Hot
;;
