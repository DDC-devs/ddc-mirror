
-- Checks renamer error reporting.
--	These expressions include constructors, data types and variables
--	that are being redefined within the same scope.
--

-- Can't use the same constructor name in a different data type.
data Foo = Foo
data Bar = Foo

-- Can't reuse the same constructor.
data Baz = Baz | Baz

-- Can't redefine a data type.
data Frob = Frob1
data Frob = Frob2

-- Redefined vars in lambda abstractions.
--	Not strictly an error, but less-than-useful.
--	If you _really_ want this then write (\x -> \x z -> x);
--
fun1	= \x x z -> x;
fun1b	= \x -> \x z -> x;

-- Redefined vars in patterns.
fun2 x	= case x of { Cons xx xx -> xx; };


-- Redefined vars in type expressions
--	as well as no function body for type sigs.
--	BL 4/2008: this isn't checked anymore
{-
funTT	:: forall a a
	.  a -> a;

funTR 	:: forall a %r1 b %r1 %r2
	.  a -> b -> List %r1 (Int %r2);

funTE 	:: forall a %r1 !e1 !e1
	.  Tuple2 %r1 (a -(!e1)> a);
-}

-- this should clash with the force function in Base.Thunk
force	= 27;

-- 'sin' is in the math library, but should be shadowed.
fun4 sin 	= sin + 1;

-- use of 'fun5' in fun6 should shadow the one at toplevel
dude	= 5;
fun5 dude 	= print dude;
fun6 fun5	= fun5 + 1;

-- make sure we can shadow vars defined at top level.
fun7 ()
 = do	dude = 5
 	dude
