
import Data.Int;
import Data.String;
import Data.Tuple;
import Data.Maybe;
import Class.Show;

data Animal %r1
	= Perch 
	{	name		:: String %r1;
		pos		:: Tuple2 %r1 (Int %r1) (Int %r1); 
		finCount	:: Int %r1; 
	}
		
	| Ant 
	{	name		:: String %r1;
		pos		:: Tuple2 %r1 (Int %r1) (Int %r1);
		color		:: String %r1; 
	};
	
topX	= 27;	


project Animal where
{	
	move ::	Animal -> (Int, Int) -> (Int, Int);
	move 	^obj (sx, sy)
	 = case _pos of {
	 	Tuple2 x y	-> (x + sx, y + sy);
	 };

	takeFinCount ::	Animal -> Maybe Int;
	takeFinCount 
	 = \case {
	 	Perch n p f	-> Just (f + topX);
		Ant   n p c	-> Nothing;
	 };
	
	prettyColor :: Animal -> String;
	prettyColor obj
	 = case obj of {
	 	Perch n p f	-> "(no color)";
		Ant   n p c	-> c;
	 };

	foo :: Animal -> ();
	foo obj
	 = do {
	 	fins	= obj.takeFinCount;
		();
	 };


	pretty :: Animal -> String;			
	pretty ^obj
	 = "Animal: " % _name % " " % _prettyColor % "\n";
}

	 	
main ()
 = do {	
 	fred	= Perch "fred" (1, 2) 7;

	fred#name	#= "Charlie";	

	();
 };
	
 		 
			
				
