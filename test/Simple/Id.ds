data Void;
data Unit %r1	= Unit;
data Data;
data Int %r1;
data Tuple2 %r1 a b = Tuple2 a b;
data Bool %r1
	= True | False;

data Apple %r1	= Apple;
data Orange %r1	= Orange;

effect !Console	:: !;
effect !Write	:: % -> !;

class Mutable 	:: % -> +;

foreign import extern "print"
	print :: forall %r1. Int %r1 -(!{!Console})> () 
	      :$ Data -> Data;

foreign import extern "update"
	update :: forall %r1. Int %r1 -(!Write %r1)> ()
		:- Mutable %r1
		:$ Data -> Data;

effect !Read	:: % -> !;

data List %r1 a 
	= Nil
	| Cons a (List %r1 a);

x	= 5;

argh b f
 = case b of {
 	True	-> print;
	False	-> update;
	False	-> f;
 };



app2 b f g x
 = case b of {
 	True	-> (f, f x);
	False	-> (g, g x);
	True	-> (print, print x);
 };



{-
map f xx
 = case xx of {
 	Nil		-> Nil;
	Cons x xs	-> Cons (f x) (map f xs);
 };


cons x xs	= Cons x xs;

cons2 a b xs	= Cons a (Cons b xs);

fstLet (a, b)
 = do {	
 	ak	= a;
 	ak;
 };
-}

{-
z	= 5;
leak b x y	
 = case b of {
 	True	-> x;
	False	-> y;
	False	-> do { update z ; z; };
 };
-}

dude	= Cons 1 (Cons 2 Nil);

{-
evil2 b f
 = do {	id y	
 	 = do { if b 
 		   then f
		   else (\z -> do {y; z; });
		y; };
		
	id id; };

a	= 3;
id x	= x;
y1	= id a;
y2	= id 5;



app f x	= f x;


selectF b x y
 = case b of {
 	True	-> x;
	False	-> y;
	True	-> (\x -> x);
 };


none ()		= 3;

merge g x
 = do {	y	= g x;
 	z	= g print;
	z;
 };


run ()	= merge (\f -> 3);

map f xx
 = case xx of {
 	Nil		-> Nil;
	Cons x xs	-> Cons (f x) (map f xs);
 };


evil b f 
	= if b 	then f
		else (\x -> f x);

id2	= id id;


evil2 b f
 = do {	id y	
 	 = do { if b 
 		   then f
		   else (\z -> do {y; z; });
		y; };
		
	id id; };
	   	
			

flip1 a b	= flip2 b a;
flip2 c d	= flip1 d do { z; c; };
z		= 5;

printFlip1 x y
 = do {	print x;
 	print y;
	printFlip2 x y; };
	

printFlip2 x y
 = do { print y;
 	print x;
	printFlip1 x y; };

run2 ()	= app print;

doId z	= id z;

dude b f x y
 = case b of {
 	True	-> f Apple;
	False	-> f Apple;
 };

app1 f x	= (f, f x);

select b x y
 = case b of {
 	True	-> x;
	False	-> y;
 };


app_selectF b x y h
 = h (selectF b x y);



fst x y	= x;

x	= 5;
fun  ()	= fst x 1;
fun2 ()	= fun;
fun3 ()	= fun2;

-}
