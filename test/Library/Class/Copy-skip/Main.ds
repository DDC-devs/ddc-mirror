
class Copy a where
 copy	:: forall b
	.  a -(!e1)> b
	:- Shape2 a b
	,  !e1 = !ReadT a

instance Copy Int where
 copy x = x + 0
 
instance Copy (List Int) where
 copy xx	
  = case xx of
  	[]	-> []
	(x:xs)	-> copy x : copy xs


-- test crushing of shape constraints
--	the copied list2 needs to have different region annots than list1
--	otherwise we'll get a purity error when we try and update it.
main ()
 = do	list	= [1, 2, 3]
 	total	= sumR @ list
	
	list2	= copy list
	(head list2) := 5

	print $ show total % "\n"
	
	
