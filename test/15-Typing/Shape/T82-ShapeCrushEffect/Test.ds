
-- Check that crushing ReadT effects respects the materiality of data types.
-- If it erroneously treads $c1 as being material then the use of copy2 in main
-- will cause an unmaskable read effect on %r1 in x
--
data IntFun %r1 a !e1 $c1
 	= FInt (Int %r1)
	| FFun (a -(!e1 $c1)> a)
 	

class Copy2 a where
  copy2 :: forall b. a -(!e1)> b
	:- !e1 = !ReadT a
	,  Shape2 a b


instance Copy2 (IntFun %r Int32 !e $c) where
 copy2 xx
  = case xx of 
	FInt i	-> FInt (copy i)
	FFun f	-> FFun f


x :: Int %r1 :- Mutable %r1
x	= 1


main ()
 = do	f2	= FFun ((+) x)
	f2'	= copy2 f2
	()