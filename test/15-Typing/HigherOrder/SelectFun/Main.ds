
succ :: Int -> Int;
succ x 	= x + 1;

increment x	
 = do {	x := x + 1; x; };


-- the types of f and g are unified with an explicit function type.
selectFun1 x f g 
 = case x of {
 	True	-> f;
	False	-> g;
	False	-> (\x -> x);
 };


-- like above, but the effect of the function now includes !Console
selectFun2 x f g 
 = case x of {
 	True	-> f;
	False	-> g;
	False	
	 -> do {
	 	h :: Int -> Int;
		h y	=  do { print $ show y; y; };
		h; 
	  };
		
 };


main ()
 = do {
	print $ show (selectFun1 True succ increment 5);
	print $ show (selectFun2 True succ increment 5);
 };
