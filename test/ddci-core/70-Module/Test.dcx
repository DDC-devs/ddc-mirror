-- Load a module definition.
:load..
module Foo 
exports {
        double :: [r : %]. Int r -(Read r + Alloc r | $0)> Int r;
        thing  :: [r : %]. Int r -(Read r + Alloc r | $0)> Int r;
        zero   :: Unit;
}
imports {
        Thing.whatever 
         with two :: [r5 : %]. Unit -(Alloc r5 | $0)> Int r5;
}
letregion rt with { w1 : Const rt ; w2 : Lazy rt} in
let     one = purify <read [rt] w1> in 1 [rt] ()  in
letrec { 
        double  [r : %] (x : Int r) 
                { Read r + Alloc r | Use r } 
         : Int r
         = mulInt [:r r r:] x (two [r] ());

        thing   [r : %] (x : Int r) 
                { Read r + Read rt + Alloc r | Use r + Use rt} 
         : Int r
         = addInt [:r rt r:] x one
};;
