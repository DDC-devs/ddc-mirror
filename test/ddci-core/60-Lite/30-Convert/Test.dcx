
:set lang Lite
:set +Indent +SuppressImports


-- Take the head of a list,
--      unpacks a Boxed object.
:to-salt..
module Main with letrec
head    [r : %] (def : Int r) 
        (xs : List r (Int r))   { Read r | Use r } 
        : Int r
 = case xs of 
        Cons x xs'      -> def
        _               -> def
;;


-- Integer unboxing,
--      unpacks a RawSmall Object.
:to-salt..
module Main with letrec
unboxInt [r : %] (x : Int r) { Read r | $0 } : Int32#
 = case x of 
        I32# i  -> i
;;


-- Nested case-expressions.
:to-salt..
module Main with letrec
addInt [r1 r2 r3 : %] 
        (x : Int r1) { !0 | $0 } 
        (y : Int r2) { Read r1 + Read r2 | Use r1 }
        : Int32#
 =  case x of { I32# i1 
 -> case y of { I32# i2 
 -> add# [Int32#] i1 i2 } }
;;


-- Boxed addition
-- TODO: this doesn't work yet.
--:to-salt..
--module Main with letrec
--addInt [r1 r2 r3 : %] 
--        (x : Int r1) { !0 | Use r3 } 
--        (y : Int r2) { Read r1 + Read r2 | Use r1 + Use r3}
--        : Int r3
-- =  case x of { I32# i1 
-- -> case y of { I32# i2 
-- -> I32# [r3] (add# [Int32#] i1 i2) } }
--;;
