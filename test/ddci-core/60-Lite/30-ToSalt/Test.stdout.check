
ok
ok

-- Set the builder explicitly so we get consistent object layouts.
ok
ok

-- Unboxed literal patterns.
module Test with
letrec {
  foo : Word16# -> Word16#
    = \(x : Word16#).
      case x of {
        5w16#  
         -> 6w16#;
        7w16#  
         -> 8w16#;
        _ 
         -> 0w16#
      }
}


module Test with
letrec {
  foo : Word32# -> Word32#
    = \(x : Word32#).
      case x of {
        5w32#  
         -> 6w32#;
        7w32#  
         -> 8w32#;
        _ 
         -> 0w32#
      }
}

module Test with
letrec {
  foo : Word64# -> Word64#
    = \(x : Word64#).
      case x of {
        5w64#  
         -> 6w64#;
        7w64#  
         -> 8w64#;
        _ 
         -> 0w64#
      }
}


-- Unboxed Bool pattern.
module Test with
letrec {
  foo : Bool# -> Bool#
    = \(x : Bool#).
      case x of {
        True#  
         -> False#;
        False#  
         -> True#
      }
}


-- Integer boxing,
--      packs a RawSmall Object.
module Test with
letrec {
  boxInt : [r : %].Int# -> Ptr# r Obj
    = /\(r : %).
       \(i : Int#).
      let x0 : Ptr# r Obj = allocRawSmall [r] TAG0# 8# in
      let x1 : Addr# = payloadOfRawSmall [r] x0 in
      let _ : Void# = write# [Int#] x1 0# i in
      x0
}


-- Integer unboxing,
--      unpacks a RawSmall Object.
module Test with
letrec {
  unboxInt : [r : %].Ptr# r Obj -> Int#
    = /\(r : %).
       \(x : Ptr# r Obj).
      let x0 : Tag# = getTag [r] x in
      case x0 of {
        TAG0#  
         -> let x1 : Addr# = payloadOfRawSmall [r] x in
            let i : Int# = read# [Int#] x1 0# in
            i;
        _ 
         -> fail# [Int#]
      }
}


-- Nested case-expressions.
module Test with
letrec {
  addInt : [r1 r2 r3 : %].Ptr# r1 Obj -> Ptr# r2 Obj -> Int#
    = /\(r1 r2 r3 : %).
       \(x : Ptr# r1 Obj).\(y : Ptr# r2 Obj).
      let x0 : Tag# = getTag [r1] x in
      case x0 of {
        TAG0#  
         -> let x1 : Addr# = payloadOfRawSmall [r1] x in
            let i1 : Int# = read# [Int#] x1 0# in
            let x2 : Tag# = getTag [r2] y in
            case x2 of {
              TAG0#  
               -> let x3 : Addr# = payloadOfRawSmall [r2] y in
                  let i2 : Int# = read# [Int#] x3 0# in
                  add# [Int#] i1 i2;
              _ 
               -> fail# [Int#]
            };
        _ 
         -> fail# [Int#]
      }
}


-- Boxed addition
module Test with
letrec {
  addInt : [r1 r2 r3 : %].Ptr# r1 Obj -> Ptr# r2 Obj -> Ptr# r3 Obj
    = /\(r1 r2 r3 : %).
       \(x : Ptr# r1 Obj).\(y : Ptr# r2 Obj).
      let x1 : Tag# = getTag [r1] x in
      case x1 of {
        TAG0#  
         -> let x2 : Addr# = payloadOfRawSmall [r1] x in
            let i1 : Int# = read# [Int#] x2 0# in
            let x3 : Tag# = getTag [r2] y in
            case x3 of {
              TAG0#  
               -> let x4 : Addr# = payloadOfRawSmall [r2] y in
                  let i2 : Int# = read# [Int#] x4 0# in
                  let x0 : Int# = add# [Int#] i1 i2 in
                  let x5 : Ptr# r3 Obj = allocRawSmall [r3] TAG0# 8# in
                  let x6 : Addr# = payloadOfRawSmall [r3] x5 in
                  let _ : Void# = write# [Int#] x6 0# x0 in
                  x5;
              _ 
               -> fail# [Ptr# r3 Obj]
            };
        _ 
         -> fail# [Ptr# r3 Obj]
      }
}


-- Take the head of an Int list,
--      unpacks a Boxed object.
module Test with
letrec {
  head : [r : %].Ptr# r Obj -> Ptr# r Obj -> Ptr# r Obj
    = /\(r : %).
       \(def xs : Ptr# r Obj).
      let x0 : Tag# = getTag [r] xs in
      case x0 of {
        TAG1#  
         -> let x : Ptr# r Obj
                  = getFieldOfBoxed [r] [Ptr# r Obj] xs 0# in
            let xs' : Ptr# r Obj
                  = getFieldOfBoxed [r] [Ptr# r Obj] xs 1# in
            x;
        _ 
         -> def
      }
}


-- Take the tail of an Int list
module Test with
letrec {
  tail : [r : %].Ptr# r Obj -> Ptr# r Obj -> Ptr# r Obj
    = /\(r : %).
       \(def xs : Ptr# r Obj).
      let x0 : Tag# = getTag [r] xs in
      case x0 of {
        TAG1#  
         -> let x : Ptr# r Obj
                  = getFieldOfBoxed [r] [Ptr# r Obj] xs 0# in
            let xs' : Ptr# r Obj
                  = getFieldOfBoxed [r] [Ptr# r Obj] xs 1# in
            xs;
        _ 
         -> def
      }
}


-- Take the head of a polymorphic list
module Test with
letrec {
  head : [r : %].[a : *].a -> Ptr# r Obj -> a
    = /\(r : %)./\(a : *).
       \(def : a).\(xs : Ptr# r Obj).
      let x0 : Tag# = getTag [r] xs in
      case x0 of {
        TAG1#  
         -> let x : a = getFieldOfBoxed [r] [a] xs 0# in
            let xs' : Ptr# r Obj
                  = getFieldOfBoxed [r] [Ptr# r Obj] xs 1# in
            x;
        _ 
         -> def
      }
}


-- Construct a singleton list,
--      packs a Boxed objet.
ok
module Test with
letrec {
  singleton : [r1 r2 : %].Int r2 -(Alloc r1 | Use r1)> List r1 (Int r2)
    = /\(r1 r2 : %).
       \(x : Int r2).
      let x0 : List r1 (Int r2)
            = Nil [r1] [Int r2] () in
      Cons [r1] [Int r2] x x0
}


-- Construct a singleton list,
--      packs a Boxed object.
module Test with
letrec {
  singleton : [r1 r2 : %].Ptr# r2 Obj -> Ptr# r1 Obj
    = /\(r1 r2 : %).
       \(x : Ptr# r2 Obj).
      let x1 : Ptr# r1 Obj = allocBoxed [r1] TAG0# 1# in
      let x2 : Ptr# _ Obj = allocBoxed [_] TAG0# 0# in
      let x3 : Ptr# _ Obj = x2 in
      let _ : Void#
            = setFieldOfBoxed [r1] [Ptr# _ Obj] x1 0# x3 in
      let x0 : Ptr# r1 Obj = x1 in
      let x4 : Ptr# r1 Obj = allocBoxed [r1] TAG1# 2# in
      let _ : Void#
            = setFieldOfBoxed [r1] [Ptr# r2 Obj] x4 0# x in
      let _ : Void#
            = setFieldOfBoxed [r1] [Ptr# r1 Obj] x4 1# x0 in
      x4
}


-- Full application.
module Test with
letrec {
  addInt : [r1 r2 r3 : %].Ptr# r1 Obj -> Ptr# r2 Obj -> Ptr# r3 Obj
    = /\(r1 r2 r3 : %).
       \(x : Ptr# r1 Obj).\(y : Ptr# r2 Obj).
      let x1 : Tag# = getTag [r1] x in
      case x1 of {
        TAG0#  
         -> let x2 : Addr# = payloadOfRawSmall [r1] x in
            let i1 : Int# = read# [Int#] x2 0# in
            let x3 : Tag# = getTag [r2] y in
            case x3 of {
              TAG0#  
               -> let x4 : Addr# = payloadOfRawSmall [r2] y in
                  let i2 : Int# = read# [Int#] x4 0# in
                  let x0 : Int# = add# [Int#] i1 i2 in
                  let x5 : Ptr# r3 Obj = allocRawSmall [r3] TAG0# 8# in
                  let x6 : Addr# = payloadOfRawSmall [r3] x5 in
                  let _ : Void# = write# [Int#] x6 0# x0 in
                  x5;
              _ 
               -> fail# [Ptr# r3 Obj]
            };
        _ 
         -> fail# [Ptr# r3 Obj]
      };
  
  double : [r1 r2 : %].Ptr# r1 Obj -> Ptr# r2 Obj
    = /\(r1 r2 : %).
       \(x : Ptr# r1 Obj). addInt [r1] [r1] [r2] x x
}


-- Construct a lists of units.
-- The head field of the Cons cells has no primary region.
module Test with
letrec {
  singleton : [r1 : %].Ptr# _ Obj -> Ptr# r1 Obj
    = /\(r1 : %).
       \(x : Ptr# _ Obj).
      let x1 : Ptr# r1 Obj = allocBoxed [r1] TAG0# 1# in
      let x2 : Ptr# _ Obj = allocBoxed [_] TAG0# 0# in
      let x3 : Ptr# _ Obj = x2 in
      let _ : Void#
            = setFieldOfBoxed [r1] [Ptr# _ Obj] x1 0# x3 in
      let x0 : Ptr# r1 Obj = x1 in
      let x4 : Ptr# r1 Obj = allocBoxed [r1] TAG1# 2# in
      let _ : Void#
            = setFieldOfBoxed [r1] [Ptr# _ Obj] x4 0# x in
      let _ : Void#
            = setFieldOfBoxed [r1] [Ptr# r1 Obj] x4 1# x0 in
      x4
}


-- Destruct a list of units.
-- The head field of the Cons cell has no primary region.
module Test with
letrec {
  headUnit : [r1 : %].Ptr# r1 Obj -> Ptr# _ Obj
    = /\(r1 : %).
       \(xx : Ptr# r1 Obj).
      let x0 : Tag# = getTag [r1] xx in
      case x0 of {
        TAG1#  
         -> let x : Ptr# _ Obj
                  = getFieldOfBoxed [r1] [Ptr# _ Obj] xx 0# in
            x;
        TAG0#  
         -> let x1 : Ptr# _ Obj = allocBoxed [_] TAG0# 0# in
            x1;
        _ 
         -> fail# [Ptr# _ Obj]
      }
}


-- Construct a singleton unit list and take its head.
module Test with
letrec {
  singleton : [r1 : %].Ptr# _ Obj -> Ptr# r1 Obj
    = /\(r1 : %).
       \(x : Ptr# _ Obj).
      let x1 : Ptr# r1 Obj = allocBoxed [r1] TAG0# 1# in
      let x2 : Ptr# _ Obj = allocBoxed [_] TAG0# 0# in
      let x3 : Ptr# _ Obj = x2 in
      let _ : Void#
            = setFieldOfBoxed [r1] [Ptr# _ Obj] x1 0# x3 in
      let x0 : Ptr# r1 Obj = x1 in
      let x4 : Ptr# r1 Obj = allocBoxed [r1] TAG1# 2# in
      let _ : Void#
            = setFieldOfBoxed [r1] [Ptr# _ Obj] x4 0# x in
      let _ : Void#
            = setFieldOfBoxed [r1] [Ptr# r1 Obj] x4 1# x0 in
      x4;
  
  headUnit : [r1 : %].Ptr# r1 Obj -> Ptr# _ Obj
    = /\(r1 : %).
       \(xx : Ptr# r1 Obj).
      let x5 : Tag# = getTag [r1] xx in
      case x5 of {
        TAG1#  
         -> let x : Ptr# _ Obj
                  = getFieldOfBoxed [r1] [Ptr# _ Obj] xx 0# in
            x;
        TAG0#  
         -> let x6 : Ptr# _ Obj = allocBoxed [_] TAG0# 0# in
            x6;
        _ 
         -> fail# [Ptr# _ Obj]
      };
  
  foo : Ptr# _ Obj -> Ptr# _ Obj
    = \(_ : Ptr# _ Obj).
      letregion r in
      let x7 : Ptr# _ Obj = allocBoxed [_] TAG0# 0# in
      let x8 : Ptr# _ Obj = x7 in
      let list : Ptr# r Obj = singleton [r] x8 in
      headUnit [r] list
}
