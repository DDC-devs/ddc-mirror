
ok
ok

-- Set the builder explicitly so we get consistent object layouts.
ok


-- Unboxed literal patterns.
module Main with
letrec {
  foo : Word16# -> Word16#
    = \(x : Word16#).
      case x of {
        5w16#  
         -> 6w16#;
        7w16#  
         -> 8w16#;
        _ 
         -> 0w16#
      }
}


module Main with
letrec {
  foo : Word32# -> Word32#
    = \(x : Word32#).
      case x of {
        5w32#  
         -> 6w32#;
        7w32#  
         -> 8w32#;
        _ 
         -> 0w32#
      }
}

module Main with
letrec {
  foo : Word64# -> Word64#
    = \(x : Word64#).
      case x of {
        5w64#  
         -> 6w64#;
        7w64#  
         -> 8w64#;
        _ 
         -> 0w64#
      }
}


-- Unboxed Bool pattern.
module Main with
letrec {
  foo : Bool# -> Bool#
    = \(x : Bool#).
      case x of {
        True#  
         -> False#;
        False#  
         -> True#
      }
}


-- Integer boxing,
--      packs a RawSmall Object.
module Main with
letrec {
  boxInt : Int# -> Ptr# Obj
    = \(i : Int#).
      let x0 : Ptr# Obj = allocRawSmall TAG0# 8# in
      let x1 : Addr# = payloadOfRawSmall x0 in
      let _ : Void# = write# [Int#] x1 0# i in
      x0
}


-- Integer unboxing,
--      unpacks a RawSmall Object.
module Main with
letrec {
  unboxInt : Ptr# Obj -> Int#
    = \(x : Ptr# Obj).
      let x0 : Tag# = getTag x in
      case x0 of {
        TAG0#  
         -> let x1 : Addr# = payloadOfRawSmall x in
            let i : Int# = read# [Int#] x1 0# in
            i;
        _ 
         -> fail# [Int#]
      }
}


-- Nested case-expressions.
module Main with
letrec {
  addInt : Ptr# Obj -> Ptr# Obj -> Int#
    = \(x y : Ptr# Obj).
      let x0 : Tag# = getTag x in
      case x0 of {
        TAG0#  
         -> let x1 : Addr# = payloadOfRawSmall x in
            let i1 : Int# = read# [Int#] x1 0# in
            let x2 : Tag# = getTag y in
            case x2 of {
              TAG0#  
               -> let x3 : Addr# = payloadOfRawSmall y in
                  let i2 : Int# = read# [Int#] x3 0# in
                  add# [Int#] i1 i2;
              _ 
               -> fail# [Int#]
            };
        _ 
         -> fail# [Int#]
      }
}


-- Boxed addition
module Main with
letrec {
  addInt : Ptr# Obj -> Ptr# Obj -> Ptr# Obj
    = \(x y : Ptr# Obj).
      let x0 : Tag# = getTag x in
      case x0 of {
        TAG0#  
         -> let x1 : Addr# = payloadOfRawSmall x in
            let i1 : Int# = read# [Int#] x1 0# in
            let x2 : Tag# = getTag y in
            case x2 of {
              TAG0#  
               -> let x3 : Addr# = payloadOfRawSmall y in
                  let i2 : Int# = read# [Int#] x3 0# in
                  let x4 : Ptr# Obj = allocRawSmall TAG0# 8# in
                  let x5 : Addr# = payloadOfRawSmall x4 in
                  let x6 : Int# = add# [Int#] i1 i2 in
                  let _ : Void# = write# [Int#] x5 0# x6 in
                  x4;
              _ 
               -> fail# [Ptr# Obj]
            };
        _ 
         -> fail# [Ptr# Obj]
      }
}


-- Take the head of an Int list,
--      unpacks a Boxed object.
module Main with
letrec {
  head : Ptr# Obj -> Ptr# Obj -> Ptr# Obj
    = \(def xs : Ptr# Obj).
      let x0 : Tag# = getTag xs in
      case x0 of {
        TAG1#  
         -> let x : Ptr# Obj = getFieldOfBoxed xs 0# in
            let xs' : Ptr# Obj = getFieldOfBoxed xs 1# in
            x;
        _ 
         -> def
      }
}


-- Take the tail of an Int list
module Main with
letrec {
  tail : Ptr# Obj -> Ptr# Obj -> Ptr# Obj
    = \(def xs : Ptr# Obj).
      let x0 : Tag# = getTag xs in
      case x0 of {
        TAG1#  
         -> let x : Ptr# Obj = getFieldOfBoxed xs 0# in
            let xs' : Ptr# Obj = getFieldOfBoxed xs 1# in
            xs;
        _ 
         -> def
      }
}


-- Take the head of a polymorphic list
module Main with
letrec {
  head : Ptr# Obj -> Ptr# Obj -> Ptr# Obj
    = \(def xs : Ptr# Obj).
      let x0 : Tag# = getTag xs in
      case x0 of {
        TAG1#  
         -> let x : Ptr# Obj = getFieldOfBoxed xs 0# in
            let xs' : Ptr# Obj = getFieldOfBoxed xs 1# in
            x;
        _ 
         -> def
      }
}


-- Construct a singleton list,
--      packs a Boxed objet.
ok
module Main with
letrec {
  singleton : [r1 r2 : %].Int r2 -(Alloc r1 | Use r1)> List r1 (Int r2)
    = /\(r1 r2 : %).
       \(x : Int r2).
      let x0 : List r1 (Int r2)
            = Nil [r1] [Int r2] () in
      Cons [r1] [Int r2] x x0
}


-- Construct a singleton list,
--      packs a Boxed object.
module Main with
letrec {
  singleton : Ptr# Obj -> Ptr# Obj
    = \(x : Ptr# Obj).
      let x0 : Ptr# Obj = allocBoxed TAG1# 16# in
      let _ : Void# = setFieldOfBoxed x0 0# x in
      let x1 : Ptr# Obj = allocBoxed TAG0# 8# in
      let x2 : Ptr# Obj = allocBoxed TAG0# 0# in
      let x3 : Ptr# Obj = x2 in
      let _ : Void# = setFieldOfBoxed x1 0# x3 in
      let x4 : Ptr# Obj = x1 in
      let _ : Void# = setFieldOfBoxed x0 1# x4 in
      x0
}


-- Full application.
module Main with
letrec {
  addInt : Ptr# Obj -> Ptr# Obj -> Ptr# Obj
    = \(x y : Ptr# Obj).
      let x0 : Tag# = getTag x in
      case x0 of {
        TAG0#  
         -> let x1 : Addr# = payloadOfRawSmall x in
            let i1 : Int# = read# [Int#] x1 0# in
            let x2 : Tag# = getTag y in
            case x2 of {
              TAG0#  
               -> let x3 : Addr# = payloadOfRawSmall y in
                  let i2 : Int# = read# [Int#] x3 0# in
                  let x4 : Ptr# Obj = allocRawSmall TAG0# 8# in
                  let x5 : Addr# = payloadOfRawSmall x4 in
                  let x6 : Int# = add# [Int#] i1 i2 in
                  let _ : Void# = write# [Int#] x5 0# x6 in
                  x4;
              _ 
               -> fail# [Ptr# Obj]
            };
        _ 
         -> fail# [Ptr# Obj]
      };
  
  double : Ptr# Obj -> Ptr# Obj
    = \(x : Ptr# Obj). addInt x x
}

