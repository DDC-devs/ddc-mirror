-- Identity function.
(\(x:Unit). x) ()


-- Substitute into inner lambda.
(\(i:Int R1#). \(x:Unit). i) (5 [R1#] ()) ()


-- Under-applied primitive constructor.
5


-- Under-applied primitive constructor.
5 [R0#]


-- Over-applied abstraction.
:eval..
letrec { thing [a:*] (x:a) : a = x }
in  thing [[^^^:%].Int ^2 -> Int ^1 -(Read ^1 + Read ^2 + Alloc ^0 | Use ^2)> Int ^0] 
          addInt
          [:R0# R0# R0#:]
          (10 [R0#] ())
          (20 [R0#] ());;


-- Handle shadowed witness binders.
:eval..
letregion r with { w : Const r } in
let x = 0 [r] () in
(\(w : [r : %]. Mutable r). \(_ : Unit). 
        updateInt [:r r:] <w [r]> x (5 [r] ())) <mutable> ();;
