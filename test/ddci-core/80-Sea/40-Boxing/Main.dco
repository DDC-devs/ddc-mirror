
module Main with letrec {
addInt32 (x : Ptr# Obj) (y : Ptr# Obj) : Ptr# Obj
 = do { z   = allocRaw# TAG0# 4;
        TAG0#  <- tag# x else fail# [Ptr# Obj];
        TAG0#  <- tag# y else fail# [Ptr# Obj];
        r   = add# [Int32#] 
                       (read# [Int32#] (fieldRaw# [Int32#] 0 x))
                       (read# [Int32#] (fieldRaw# [Int32#] 0 y));
        write# [Int32#] (fieldRaw# [Int32#] 0 z) r;
        return# [Ptr# Obj] z;
      };


subInt32 (x : Ptr# Obj) (y : Ptr# Obj) : Ptr# Obj
 = do { z   = allocRaw# TAG0# 4;
        TAG0#  <- tag# x else fail# [Ptr# Obj];
        TAG0#  <- tag# y else fail# [Ptr# Obj];
        r   = sub# [Int32#] 
                        (read# [Int32#] (fieldRaw# [Int32#] 0 x))
                        (read# [Int32#] (fieldRaw# [Int32#] 0 y));
        write# [Int32#] (fieldRaw# [Int32#] 0 z) r;
        return# [Ptr# Obj] z;
      };


mulInt32 (x : Ptr# Obj) (y : Ptr# Obj) : Ptr# Obj
 = do { z   = allocRaw# TAG0# 4;
        TAG0#  <- tag# x else fail# [Ptr# Obj];
        TAG0#  <- tag# y else fail# [Ptr# Obj];
        r   = mul# [Int32#] 
                        (read# [Int32#] (fieldRaw# [Int32#] 0 x))
                        (read# [Int32#] (fieldRaw# [Int32#] 0 y));
        write# [Int32#] (fieldRaw# [Int32#] 0 z) r;
        return# [Ptr# Obj] z;
      };


boxInt32 (x : Int32#) : Ptr# Obj
 = do { z   = allocRaw# TAG0# 4;
        write# [Int32#] (fieldRaw# [Int32#] 0 z) x;
        return# [Ptr# Obj] z;
      };


unboxInt32 (x : Ptr# Obj) : Int32#
 = do { r       = read# [Int32#] (fieldRaw# [Int32#] 0 x);
        return# [Int32#] r;
      };


fac (x: Ptr# Obj) : Ptr# Obj
 = do { x2  = unboxInt32 x;
        case eq# [Int32#] x2 (i32# 0) of {
         True#  -> return# [Ptr# Obj] (boxInt32 (i32# 1));
         False# -> return# [Ptr# Obj] (mulInt32 x (fac (subInt32 x (boxInt32 (i32# 1)))));
        };
      };

main (argc : Nat#) (argv : Ptr# String#) : Int32#
 = do { x       = boxInt32 (i32# 10);
        x2      = fac x;
        str     = showInt32# (unboxInt32 x2);
        _       = putStrLn# str;
        return# [Int32#] (i32# 0);
      };
}
