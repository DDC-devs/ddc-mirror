
-- Convert a module in the SeaOutput fragment into raw C code.
:set +Indent
:seaout..
module Main
letrec {
        addInt32 (x : Ptr# Obj) (y : Ptr# Obj) : Ptr# Obj
         = let z : Ptr# Obj     = allocRaw# TAG0# 4 in
           match TAG0#  <- tag# x else fail# [Ptr# Obj] in
           match TAG0#  <- tag# y else fail# [Ptr# Obj] in
           let r : Int32#       = add# [Int32#] 
                                        (read# [Int32#] (fieldRaw# [Int32#] 0 x))
                                        (read# [Int32#] (fieldRaw# [Int32#] 0 y)) in
           let _ : Void#        = write# [Int32#] (fieldRaw# [Int32#] 0 z) r in
           return# [Ptr# Obj] z;

        boxInt32 (x : Int32#) : Ptr# Obj
         = let z : Ptr# Obj     = allocRaw# TAG0# 4 in
           let _ : Void#        = write# [Int32#] (fieldRaw# [Int32#] 0 z) x in
           return# [Ptr# Obj] z;

        unboxInt32 (x : Ptr# Obj) : Int32#
         = return# [Int32#] (read# [Int32#] (fieldRaw# [Int32#] 0 x));

        main (argc : Nat#) (argv : Ptr# String#) : Int32#
         = let x   : Ptr# Obj   = boxInt32 (i32# 5) in
           let x2  : Ptr# Obj   = addInt32 x x in
           let str : String#    = showInt32# (unboxInt32 x2) in
           let _   : Void#      = putStrLn# str in
           return# [Int32#] (i32# 0);
};;
