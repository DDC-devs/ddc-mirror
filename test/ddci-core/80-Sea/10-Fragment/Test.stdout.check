-- Check for fragment violations.
ok
ok


-- Error: Unknown primop.
Undefined variable: foo#


-- Error: Module does not have a top-level letrec.
Sea fragment violation.
  Module does not have a top-level letrec.
  


-- Ok: Function finishes with a return statement.
int32_t foo (int32_t x)
{
        return x;
}



-- Error: Function does not pass control.
Sea fragment violation.
  Invalid function body.
  
  with: x


-- Ok: Statements in function.
int32_t foo (int32_t x)
{
        int32_t y    = (x + x);
        return y;
}



-- Error: Function does not pass control
Sea fragment violation.
  The final statement in a function must pass control
    You need an explicit return# or fail#.
  
  this isn't one:  add# [Int32#] y y


-- Error: Function does not pass control
Sea fragment violation.
  Invalid function body.
  
  with: True#


-- Ok: Function explicitly fails.
int32_t foo (int32_t x)
{
        int32_t y    = (x + x);
        _fail();
}



-- Ok: assignment between variables.
int32_t foo (int32_t x)
{
        int32_t y    = x;
        return y;
}



-- Ok: assignment from a literal.
nat_t foo (nat_t x)
{
        nat_t y      = 5;
        return y;
}



-- Error: assignment from primop.
Sea fragment violation.
  Invalid type definition.
  
  with: [^ : *].^0 -> ^0 -> ^0


-- Error: cannot discard non-void return value.
Sea fragment violation.
  Cannot discard non-void return value.
  
  with: let _ : Int32# = x in
        return# [Int32#] x


