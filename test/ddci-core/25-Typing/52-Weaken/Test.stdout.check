-- When choosing between two functions, 
-- use the weakening forms to make the type of the smaller
-- one match the larger.
/\(r1 r2 : %). \(x : Int r1). case x of { 0 -> \(y : Int r2). weakeff [Read r1 + Read r2 + Alloc r2] in weakclo {x; [r2]} in y; _ -> \(y : Int r2). addInt [r1] [r2] [r2] x (1 [r2] ()) }
:*: [r1 r2 : %].Int r1 -(Read r1 | Use r1 + Use r2)> Int r2 -(Read r1 + Read r2 + Alloc r2 | Use r1 + Use r2)> Int r2
:!: !0
:$: $0


-- Error: type supplied to weakeff does not have effect kind
When checking expression.
  Type provided for a 'maxeff' does not have effect kind.
             Type: r1
         has kind: %
  
  with: weakeff [r1] in
        weakclo {x; [r2]} in
        y

