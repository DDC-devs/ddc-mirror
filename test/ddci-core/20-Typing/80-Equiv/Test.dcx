
-- Equivalence checker must crush effect and closure terms.
:check..
\(x : Int R0#).
\(y : Unit -(DeepRead (Int R0#) | DeepUse (Int R0#))> Unit).
\(z : Unit -(Read R0#           | Use R0#)>           Unit).
case x of {
        0       -> y;
        _       -> z
};;


-- Equivalence checker must handle alpha-equivalence.
:check..
\(x : Int R0#).
\(y : [a:*]. a -> a).
\(z : [^:*]. ^0 -> ^0).
case x of {
        0       -> y;
        _       -> z
};;

 
