:set +Indent
:set trans Snip <> Flatten


-- Identity function
:trans (\(x : Unit). x) ()


-- Identify function with indices.
:trans (\(^ : Unit). ^0) ()


-- Primitive
:trun addInt [:R0# R0# R0#:] (1 [R0#] ()) (2 [R0#] ())


-- Nested applications
:trun.. addInt [:R0# R1# R2#:] 
        (1 [R0#] ()) 
        (addInt [:R1# R1# R1#:] 
                (2 [R1#] ()) 
                (addInt [:R3# R3# R1#:] 
                        (3 [R3#] ()) 
                        (4 [R3#] ())));;


-- Lets in args (inner x must be anonymized)
:trun..
let x = (2 [R1#] ()) in
addInt [:R0# R1# R2#:]
    (let x = () in
     let ^ = 1 in
     ^0 [R0#] x)
    x;;


-- Type abstraction
:trans (/\(t:*).\(x:t).x) [List R0# (Int R0#)] (Nil [R0#] [Int R0#] ())


-- Primitive in case exp
:trun..
(\(u:Unit). 
case 1 [R0#] u of {
    0 -> 1 [R0#] u;
    _ -> addInt [:R0# R0# R0#:] (2 [R0#] u) (3 [R0#] u)
}) ();;


-- Anonymous binders
:trun..
let ^ = 5 [R0#] () in
addInt [: R0# R0# R0# :] ^0 (3 [R0#] ());;


-- Arity
:trun..
let cmp = \(f g : Int R0# -(Read R0# + Alloc R0# | Use R0#)> Int R0#).
    let f' = f in \(x:Int R0#). f' (g x) in
let up = \(n : Int R0#). addInt [:R0# R0# R0#:] n (1 [R0#] ()) in
cmp up up (1 [R0#] ());;


-- Arity anon
:trun..
let ^ = \(f g : Int R0# -(Read R0# + Alloc R0# | Use R0#)> Int R0#).
    let ^ = f in \(^:Int R0#). ^1 (g ^0) in
let ^ = \(^ : Int R0#). addInt [:R0# R0# R0#:] ^0 (1 [R0#] ()) in
^1 ^0 ^0 (1 [R0#] ());;


-- Letrec
:trun..
letrec {
 fac    [r:%] (n : Int r) {Read r + Alloc r | Use r} : Int r
  = case n of {
        0       -> 1 [r] ();
        _       -> mulInt [:r r r:] n
                      (fac [r] (subInt [:r r r:] n
                                       (1 [r] ())));
     }
} in fac [R1#] (5 [R1#] ());;


-- Snip out discriminants of case expressions
:trans..
case (\(x : Int R0#). x) (5 [R0#] ()) of {
        _       -> ()
};;

