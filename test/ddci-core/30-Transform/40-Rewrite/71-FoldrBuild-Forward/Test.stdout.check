ok
ok

ok
ok

ok, added foldrBuild

ok

-- define outside, otherwise beta reduction won't fire...
* TRANSFORM INFORMATION: 
    Inline: No information;
    fix 10:
        Beta reduction:
            Types:          0
            Witnesses:      0
            Values:         1
            Values letted:  1
            Values skipped: 0;
        Forward:
            Substitutions:  0
            Bindings:       0;
        Rules fired:
            Unfold:  foldrBuild
            Rewrite: foldrBuild;
        Beta reduction:
            Types:          0
            Witnesses:      0
            Values:         0
            Values letted:  0
            Values skipped: 0;
        Forward:
            Substitutions:  0
            Bindings:       0;
        Rules fired:
            

let num : Int R0# = 10 [R0#] () in
let ^ : [^ : *].[^ ^ ^ : !].[^ ^ ^ : $].(Int R0# -(^5 | ^2)> ^6 -(^4 | ^1)> ^6) -(!0 | Use R0#)> (Unit -(^3 | ^0)> ^6) -(Read R0# + Alloc R0# + ^3 + ^4 + ^5 | Use R0# + ^2)> ^6 = count' num in
let ^ : List R1# (Int R0#)
      = build [Int R0#] [R1#] [!0] [Read R0# + Alloc R0#] [Use R0#] [Use R0#] ^0 in
weakeff [Read R0# + Read R1# + Alloc R0# + Alloc R1#] in
weakclo {build; foldr; [Int R0#]; [Use R0#]; [Use R0#]; [!0]; [Read R0# + Alloc R0#]; [R1#]} in
^1 [Int R0#] [!0] [Read R0# + Alloc R0#] [Alloc R0#] [Use R0#] [Use R0#] [Use R0#] plus zero

ok

-- define outside, otherwise beta reduction won't fire...
* TRANSFORM INFORMATION: 
    fix 30:
        Forward:
            Substitutions:  4
            Bindings:       4;
        Beta reduction:
            Types:          0
            Witnesses:      0
            Values:         3
            Values letted:  3
            Values skipped: 0;
        Bubble: No information;
        DeadCode:
            Removed:        0;
        Rules fired:
            Unfold:  foldrBuild;
        Snip: No information;
        Flatten: No information;
        Namify: No information;
        Forward:
            Substitutions:  0
            Bindings:       0;
        Beta reduction:
            Types:          0
            Witnesses:      0
            Values:         0
            Values letted:  0
            Values skipped: 0;
        Bubble: No information;
        DeadCode:
            Removed:        0;
        Rules fired:
            Unfold:  foldrBuild
            Unfold:  foldrBuild
            Unfold:  foldrBuild
            Rewrite: foldrBuild;
        Snip: No information;
        Flatten: No information;
        Namify: No information;
        Forward:
            Substitutions:  0
            Bindings:       3;
        Beta reduction:
            Types:          0
            Witnesses:      0
            Values:         0
            Values letted:  0
            Values skipped: 0;
        Bubble: No information;
        DeadCode:
            Removed:        1;
        Rules fired:
            Unfold:  foldrBuild
            Unfold:  foldrBuild;
        Snip: No information;
        Flatten: No information;
        Namify: No information;
        Forward:
            Substitutions:  2
            Bindings:       3;
        Beta reduction:
            Types:          7
            Witnesses:      0
            Values:         2
            Values letted:  0
            Values skipped: 0;
        Bubble: No information;
        DeadCode:
            Removed:        0;
        Rules fired:
            Unfold:  foldrBuild
            Unfold:  foldrBuild
            Rewrite: foldrBuild;
        Snip: No information;
        Flatten: No information;
        Namify: No information;
        Forward:
            Substitutions:  0
            Bindings:       2;
        Beta reduction:
            Types:          0
            Witnesses:      0
            Values:         0
            Values letted:  0
            Values skipped: 0;
        Bubble: No information;
        DeadCode:
            Removed:        1;
        Rules fired:
            Unfold:  foldrBuild;
        Snip: No information;
        Flatten: No information;
        Namify: No information;
        Forward:
            Substitutions:  2
            Bindings:       2;
        Beta reduction:
            Types:          7
            Witnesses:      0
            Values:         2
            Values letted:  0
            Values skipped: 0;
        Bubble: No information;
        DeadCode:
            Removed:        0;
        Rules fired:
            Unfold:  foldrBuild
            Rewrite: foldrBuild;
        Snip: No information;
        Flatten: No information;
        Namify: No information;
        Forward:
            Substitutions:  0
            Bindings:       1;
        Beta reduction:
            Types:          0
            Witnesses:      0
            Values:         0
            Values letted:  0
            Values skipped: 0;
        Bubble: No information;
        DeadCode:
            Removed:        1;
        Rules fired:
            ;
        Snip: No information;
        Flatten: No information;
        Namify: No information;
        Forward:
            Substitutions:  0
            Bindings:       0;
        Beta reduction:
            Types:          0
            Witnesses:      0
            Values:         0
            Values letted:  0
            Values skipped: 0;
        Bubble: No information;
        DeadCode:
            Removed:        0;
        Rules fired:
            ;
        Snip: No information;
        Flatten: No information;
        Namify: No information

weakeff [Read R0# + Read R1# + Alloc R0# + Alloc R1#] in
weakclo {build; foldr; [Int R0#]; [Use R0# + Use R1#]; [Use R0# + Use R1#]; [!0]; [Read R0# + Read R1# + Alloc R0#]; [R1#]} in
weakeff [Read R0# + Read R1# + Alloc R0# + Alloc R1#] in
weakeff [Read R0# + Read R1# + Alloc R0# + Alloc R1#] in
weakclo {build; foldr; [Int R0#]; [Use R0# + Use R1#]; [Use R0# + Use R1#]; [!0]; [Read R0# + Read R1# + Alloc R0#]; [R1#]} in
weakeff [Read R0# + Read R1# + Alloc R0# + Alloc R1#] in
weakclo {build; \(v20 : List R1# (Int R0#)).
/\(t21 : *)./\(t22 t23 t24 : !)./\(t25 t26 t27 : $).
 \(v28 : Int R0# -(t22 | t25)> t21 -(t23 | t26)> t21).\(v29 : Unit -(t24 | t27)> t21).
let v33 : Int R0# -(!0 | Use R0# + t25)> t21 -(Read R0# + Alloc R0# + t22 + t23 | Use R0# + t25)> t21
      = \(v30 : Int R0#).\(v31 : t21).
        let v32 : Int R0# = even v30 in
        case v32 of {
          0  
           -> v28 v30 v31;
          _ 
           -> v31
        } in
foldr [Int R0#] [t21] [R1#] [!0] [Read R0# + Alloc R0# + t22 + t23] [t24] [Use R0# + t25] [Use R0# + t25] [t27] v33 v29 v20} in
weakeff [Read R0# + Read R1# + Alloc R0# + Alloc R1#] in
weakclo {build; foldr; [Int R0#]; [Use R0#]; [Use R0#]; [!0]; [Read R0# + Alloc R0#]; [R1#]} in
weakeff [Read R0# + Alloc R0# + Alloc R1#] in
weakclo {build; \(v8 : List R1# (Int R0#)).
/\(t9 : *)./\(t10 t11 t12 : !)./\(t13 t14 t15 : $).
 \(v16 : Int R0# -(t10 | t13)> t9 -(t11 | t14)> t9).\(v17 : Unit -(t12 | t15)> t9).
let v18 : Int R0# -(Read R0# + Alloc R0# + t10 | Use R0# + t13)> t9 -(t11 | t14)> t9
      = compose [Int R0#] [Int R0#] [t9 -(t11 | t14)> t9] [t10] [Read R0# + Alloc R0#] [t13] [Use R0#] v16 double in
foldr [Int R0#] [t9] [R1#] [Read R0# + Alloc R0# + t10] [t11] [t12] [Use R0# + t13] [t14] [t15] v18 v17 v8} in
let num : Int R0# = 10 [R0#] () in
let v7 : [t0 : *].[t1 t2 t3 : !].[t4 t5 t6 : $].(Int R0# -(t1 | t4)> t0 -(t2 | t5)> t0) -(!0 | Use R0#)> (Unit -(t3 | t6)> t0) -(Read R0# + Alloc R0# + t1 + t2 + t3 | Use R0# + t4)> t0 = count' num in
weakclo {build; v7} in
let v33 : Int R0# -(!0 | Use R0#)> Int R0# -(Read R0# + Alloc R0# | Use R0#)> Int R0#
      = \(v30 v31 : Int R0#).
        let v32 : Int R0# = even v30 in
        case v32 of {
          0  
           -> plus v30 v31;
          _ 
           -> v31
        } in
let v18 : Int R0# -(Read R0# + Alloc R0# | Use R0#)> Int R0# -(Read R0# + Alloc R0# | Use R0#)> Int R0#
      = compose [Int R0#] [Int R0#] [Int R0# -(Read R0# + Alloc R0# | Use R0#)> Int R0#] [!0] [Read R0# + Alloc R0#] [Use R0#] [Use R0#] v33 double in
v7 [Int R0#] [Read R0# + Alloc R0#] [Read R0# + Alloc R0#] [Alloc R0#] [Use R0#] [Use R0#] [Use R0#] v18 zero
