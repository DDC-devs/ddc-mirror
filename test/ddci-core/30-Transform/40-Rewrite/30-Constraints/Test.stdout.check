ok

ok, added copyConst
ok

copyConst [r1 : %] (x : Int r1) . Const r1 => copyInt [r1] [r1] x = x

-- don't do for any region
letregion r in
(\(x : Int r). ())
    (copyInt [r] [r] (23 [r] ()))

-- do it for consts
letregion r with {w : Const r} in
(\(x : Int r). ())
    (weakeff [Read r + Alloc r] in
     weakclo {copyInt; [r]} in
     23 [r] ())

-- letregionS only do first one
letregions r1 r2 with {w : Const r1} in
(\(x : Int r1). ())
    (addInt [r1] [r2] [r1]
         (weakeff [Read r1 + Alloc r1] in
          weakclo {copyInt; [r1]} in
          23 [r1] ())
         (copyInt [r2] [r2] (5 [r2] ())))

-- do it
letregion ^ with {w : Const ^0} in
(\(x : Int ^0). ())
    (weakeff [Read ^0 + Alloc ^0] in
     weakclo {copyInt; [^0]} in
     23 [^0] ())

-- lift de bruijns: don't do it
letregion ^ with {w : Const ^0} in
letregion ^ in
(\(x : Int ^0). ())
    (copyInt [^0] [^0] (23 [^0] ()))

-- lift de bruijns: do it
letregion ^ with {w : Const ^0} in
letregion ^ in
(\(x : Int ^1). ())
    (weakeff [Read ^1 + Alloc ^1] in
     weakclo {copyInt; [^1]} in
     23 [^1] ())

-- and with witnesses as lambda arguments
\(w : Const R0#).\(u : Unit).
weakeff [Read R0# + Alloc R0#] in
weakclo {copyInt; [R0#]} in
23 [R0#] ()

-- don't: lambda arguments for a different region
\(w : Const R0#).\(u : Unit).
copyInt [R1#] [R1#] (23 [R1#] ())

