ok
ok
ok

ok

-- now with a Const contraint and regions
ok, added unboxInt_boxInt
ok

-- do the factorial
* TRANSFORM INFORMATION: 
    Inline: No information

letrec {
  main : [r : %].Const r => Int# -(Read r + Alloc r | Use r)> Int#
    = /\(r : %).
       \(w : Const r).\(_ : Int#).
      let x : Int r
            = (/\(^ : %).
                \(^ : Const ^0).\(^ ^ : Int ^0).
               case unboxInt [^0] ^0 of {
                 0i#  
                  -> ^1;
                 1i#  
                  -> ^1;
                 _ 
                  -> fac [^0] <^2> (mulInt [^0] [^0] [^0] ^1 ^0)
                         (subInt [^0] [^0] [^0] ^0 (boxInt [^0] 1i#))
               }) [r] <w> (boxInt [r] 1i#) (boxInt [r] 10i#) in
      let show : Int# = unboxInt [r] x in
      unboxInt [r] (boxInt [r] 0i#)
} in
()
* TRANSFORM INFORMATION: 
    Beta reduction:
        Types:          1
        Witnesses:      1
        Values:         0
        Values letted:  0
        Values skipped: 0

letrec {
  main : [r : %].Const r => Int# -(Read r + Alloc r | Use r)> Int#
    = /\(r : %).
       \(w : Const r).\(_ : Int#).
      let x : Int r
            = (weakclo {<w>} in
               \(^ ^ : Int r).
               case unboxInt [r] ^0 of {
                 0i#  
                  -> ^1;
                 1i#  
                  -> ^1;
                 _ 
                  -> fac [r] <w> (mulInt [r] [r] [r] ^1 ^0)
                         (subInt [r] [r] [r] ^0 (boxInt [r] 1i#))
               }) (boxInt [r] 1i#) (boxInt [r] 10i#) in
      let show : Int# = unboxInt [r] x in
      unboxInt [r] (boxInt [r] 0i#)
} in
()
* TRANSFORM INFORMATION: 
    Forward:
        Substitutions:  0
        Bindings:       0

letrec {
  main : [r : %].Const r => Int# -(Read r + Alloc r | Use r)> Int#
    = /\(r : %).
       \(w : Const r).\(_ : Int#).
      let x : Int r
            = (weakclo {<w>} in
               \(^ ^ : Int r).
               case unboxInt [r] ^0 of {
                 0i#  
                  -> ^1;
                 1i#  
                  -> ^1;
                 _ 
                  -> fac [r] <w> (mulInt [r] [r] [r] ^1 ^0)
                         (subInt [r] [r] [r] ^0 (boxInt [r] 1i#))
               }) (boxInt [r] 1i#) (boxInt [r] 10i#) in
      let show : Int# = unboxInt [r] x in
      unboxInt [r] (boxInt [r] 0i#)
} in
()
* TRANSFORM INFORMATION: 
    Rules fired:
        Rewrite: unboxInt_boxInt

letrec {
  main : [r : %].Const r => Int# -(Read r + Alloc r | Use r)> Int#
    = /\(r : %).
       \(w : Const r).\(_ : Int#).
      let x : Int r
            = (weakclo {<w>} in
               \(^ ^ : Int r).
               case unboxInt [r] ^0 of {
                 0i#  
                  -> ^1;
                 1i#  
                  -> ^1;
                 _ 
                  -> fac [r] <w> (mulInt [r] [r] [r] ^1 ^0)
                         (subInt [r] [r] [r] ^0 (boxInt [r] 1i#))
               }) (boxInt [r] 1i#) (boxInt [r] 10i#) in
      let show : Int# = unboxInt [r] x in
      weakeff [Read r + Alloc r] in
      weakclo {boxInt; unboxInt; [r]} in
      0i#
} in
()
Going back: 
letrec {
  main : [r : %].Const r => Int# -(Read r + Alloc r | Use r)> Int#
    = /\(r : %).
       \(w : Const r).\(_ : Int#).
      let x : Int r
            = (weakclo {<w>} in
               \(^ ^ : Int r).
               case unboxInt [r] ^0 of {
                 0i#  
                  -> ^1;
                 1i#  
                  -> ^1;
                 _ 
                  -> fac [r] <w> (mulInt [r] [r] [r] ^1 ^0)
                         (subInt [r] [r] [r] ^0 (boxInt [r] 1i#))
               }) (boxInt [r] 1i#) (boxInt [r] 10i#) in
      let show : Int# = unboxInt [r] x in
      unboxInt [r] (boxInt [r] 0i#)
} in
()
Going back: 
letrec {
  main : [r : %].Const r => Int# -(Read r + Alloc r | Use r)> Int#
    = /\(r : %).
       \(w : Const r).\(_ : Int#).
      let x : Int r
            = (weakclo {<w>} in
               \(^ ^ : Int r).
               case unboxInt [r] ^0 of {
                 0i#  
                  -> ^1;
                 1i#  
                  -> ^1;
                 _ 
                  -> fac [r] <w> (mulInt [r] [r] [r] ^1 ^0)
                         (subInt [r] [r] [r] ^0 (boxInt [r] 1i#))
               }) (boxInt [r] 1i#) (boxInt [r] 10i#) in
      let show : Int# = unboxInt [r] x in
      unboxInt [r] (boxInt [r] 0i#)
} in
()
* TRANSFORM INFORMATION: 
    Inline: No information

letrec {
  main : [r : %].Const r => Int# -(Read r + Alloc r | Use r)> Int#
    = /\(r : %).
       \(w : Const r).\(_ : Int#).
      let x : Int r
            = (weakclo {<w>} in
               \(^ ^ : Int r).
               case (/\(^ : %).
                   \(^ : Int ^0).
                  case ^0 of {
                    I# (^ : Int#) 
                     -> ^0
                  }) [r] ^0 of {
                 0i#  
                  -> ^1;
                 1i#  
                  -> ^1;
                 _ 
                  -> (/\(^ : %).
                       \(^ : Const ^0).\(^ ^ : Int ^0).
                      case unboxInt [^0] ^0 of {
                        0i#  
                         -> ^1;
                        1i#  
                         -> ^1;
                        _ 
                         -> fac [^0] <^2> (mulInt [^0] [^0] [^0] ^1 ^0)
                                (subInt [^0] [^0] [^0] ^0 (boxInt [^0] 1i#))
                      }) [r] <w>
                         ((/\(^ ^ ^ : %).
                            \(^ : Int ^2).\(^ : Int ^1).
                           let ^ : Int# = unboxInt [^2] ^1 in
                           let ^ : Int# = unboxInt [^1] ^1 in
                           boxInt [^0] (mul# [Int#] ^1 ^0)) [r] [r] [r] ^1 ^0)
                         ((/\(^ ^ ^ : %).
                            \(^ : Int ^2).\(^ : Int ^1).
                           let ^ : Int# = unboxInt [^2] ^1 in
                           let ^ : Int# = unboxInt [^1] ^1 in
                           boxInt [^0] (sub# [Int#] ^1 ^0)) [r] [r] [r] ^0
                              ((/\(^ : %).
                                 \(^ : Int#). I# [^0] ^0) [r] 1i#))
               })
                  ((/\(^ : %).
                     \(^ : Int#). I# [^0] ^0) [r] 1i#)
                  ((/\(^ : %).
                     \(^ : Int#). I# [^0] ^0) [r] 10i#) in
      let show : Int#
            = (/\(^ : %).
                \(^ : Int ^0).
               case ^0 of {
                 I# (^ : Int#) 
                  -> ^0
               }) [r] x in
      (/\(^ : %).
        \(^ : Int ^0).
       case ^0 of {
         I# (^ : Int#) 
          -> ^0
       }) [r]
          ((/\(^ : %).
             \(^ : Int#). I# [^0] ^0) [r] 0i#)
} in
()
* TRANSFORM INFORMATION: 
    Rules fired:
        

letrec {
  main : [r : %].Const r => Int# -(Read r + Alloc r | Use r)> Int#
    = /\(r : %).
       \(w : Const r).\(_ : Int#).
      let x : Int r
            = (weakclo {<w>} in
               \(^ ^ : Int r).
               case (/\(^ : %).
                   \(^ : Int ^0).
                  case ^0 of {
                    I# (^ : Int#) 
                     -> ^0
                  }) [r] ^0 of {
                 0i#  
                  -> ^1;
                 1i#  
                  -> ^1;
                 _ 
                  -> (/\(^ : %).
                       \(^ : Const ^0).\(^ ^ : Int ^0).
                      case unboxInt [^0] ^0 of {
                        0i#  
                         -> ^1;
                        1i#  
                         -> ^1;
                        _ 
                         -> fac [^0] <^2> (mulInt [^0] [^0] [^0] ^1 ^0)
                                (subInt [^0] [^0] [^0] ^0 (boxInt [^0] 1i#))
                      }) [r] <w>
                         ((/\(^ ^ ^ : %).
                            \(^ : Int ^2).\(^ : Int ^1).
                           let ^ : Int# = unboxInt [^2] ^1 in
                           let ^ : Int# = unboxInt [^1] ^1 in
                           boxInt [^0] (mul# [Int#] ^1 ^0)) [r] [r] [r] ^1 ^0)
                         ((/\(^ ^ ^ : %).
                            \(^ : Int ^2).\(^ : Int ^1).
                           let ^ : Int# = unboxInt [^2] ^1 in
                           let ^ : Int# = unboxInt [^1] ^1 in
                           boxInt [^0] (sub# [Int#] ^1 ^0)) [r] [r] [r] ^0
                              ((/\(^ : %).
                                 \(^ : Int#). I# [^0] ^0) [r] 1i#))
               })
                  ((/\(^ : %).
                     \(^ : Int#). I# [^0] ^0) [r] 1i#)
                  ((/\(^ : %).
                     \(^ : Int#). I# [^0] ^0) [r] 10i#) in
      let show : Int#
            = (/\(^ : %).
                \(^ : Int ^0).
               case ^0 of {
                 I# (^ : Int#) 
                  -> ^0
               }) [r] x in
      (/\(^ : %).
        \(^ : Int ^0).
       case ^0 of {
         I# (^ : Int#) 
          -> ^0
       }) [r]
          ((/\(^ : %).
             \(^ : Int#). I# [^0] ^0) [r] 0i#)
} in
()
* TRANSFORM SEQUENCE:
    Inline
    BetaLets
    Inline
    Rewrite
