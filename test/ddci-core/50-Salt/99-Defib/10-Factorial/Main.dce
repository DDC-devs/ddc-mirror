
module Main
imports {
        boxInt    :: Int#   -> Ptr# Obj;
        unboxInt  :: Ptr# Obj -> Int#;
        subInt    :: Ptr# Obj -> Ptr# Obj -> Ptr# Obj;
        mulInt    :: Ptr# Obj -> Ptr# Obj -> Ptr# Obj;
        showInt   :: Int# -> Ptr# String#;
        putStrLn  :: Ptr# String# -> Void#;
}
with letrec 

fac (x: Ptr# Obj) : Ptr# Obj
 = case eq# [Int#] (unboxInt x) 0i# of 
        True#  
         -> return# [Ptr# Obj] 
                (boxInt 1i#)

        False# 
         -> return# [Ptr# Obj] 
                (mulInt x (fac (subInt x (boxInt 1i#))))


main (argc : Nat#) (argv : Ptr# String#) : Int#
 = do   x2      = fac (boxInt 10i#)
        putStrLn (showInt (unboxInt x2))
        return# [Int#] 0i#
