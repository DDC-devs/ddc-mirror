
module Main
imports {
        boxInt32        :: Int32#   -> Ptr# Obj;
        unboxInt32      :: Ptr# Obj -> Int32#;
        subInt32        :: Ptr# Obj -> Ptr# Obj -> Ptr# Obj;
        mulInt32        :: Ptr# Obj -> Ptr# Obj -> Ptr# Obj;
}
with letrec 

fac (x: Ptr# Obj) : Ptr# Obj
 = case eq# [Int32#] (unboxInt32 x) 0i32# of 
        True#  
         -> return# [Ptr# Obj] 
                (boxInt32 1i32#)

        False# 
         -> return# [Ptr# Obj] 
                (mulInt32 x (fac (subInt32 x (boxInt32 1i32#))))


main (argc : Nat#) (argv : Ptr# String#) : Int32#
 = do   x2      = fac (boxInt32 10i32#)
        putStrLn# (showInt32# (unboxInt32 x2))
        return# [Int32#] 0i32#
