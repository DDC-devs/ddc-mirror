
-- The world contains a map of all the actors, along with the current
--	quadtree so we can also draw it on the screen.

import QuadTree
import Actor
import Data.Array
import Data.List

-- The world ---------------------------------------------------------------------------------------
data World %r1 %r2
	= World (Array %r2 Actor)	-- actors
		(QuadTree  Actor)	-- tree

-- | The initial world
makeWorldInit 
	:: () -> World   %r1 %r2 
	:- Mutable %r2

makeWorldInit ()
  	= World (actorArrayInit (walls ++ beads)) treeInit

actorArrayInit :: [Actor] -> Array Actor
actorArrayInit actors
 = do	count	= length actors
 	arrayFromList count ActorNil
		$ map (\a -> (actorIx a, a))
		$ zipWith actorSetIndex actors [0 .. count - 1]

treeInit :: QuadTree Actor
treeInit = treeZero 300.0


arrayFromList :: Int -> a -> [(Int, a)] -> Array a
arrayFromList sz def elems 
 = 	arrayFromList' (new&{Array a} sz def) elems

arrayFromList' array elems
	| []		<- elems
	= array
	
	| (ix, e) : es	<- elems
	= do	array #(ix) #= e
		arrayFromList' array es
 

-- Walls ------------------
boxSize :: Float
boxSize	= 280.0

walls :: [Actor]
walls	= (box ++ splitterMid ++ splitterBot ++ splitterTop)

box :: [Actor]
box
 = do 	bs	= boxSize
	[ Wall  0 (Vec2 (-bs) (-bs))	(Vec2 bs (-bs))		-- bot
 	, Wall  0 (Vec2 (-bs)   bs) 	(Vec2 bs bs)		-- top

 	, Wall  0 (Vec2 (-bs) (-bs)) 	(Vec2 (-bs)  bs)	-- left
 	, Wall  0 (Vec2 bs (-bs)) 	(Vec2 (bs)  bs)] 	-- right

splitterMid :: [Actor]
splitterMid
 =	[ Wall	0 (Vec2 (-15.0) 100.0) (Vec2 (-200.0) 0.0) 
 	, Wall  0 (Vec2   15.0  100.0) (Vec2   200.0  0.0) ]


splitterBot :: [Actor]
splitterBot
 = 	[ Wall  0 (Vec2 (-15.0) 280.0) (Vec2    0.0 150.0) 
 	, Wall  0 (Vec2   15.0  280.0) (Vec2    0.0 150.0) ]

splitterTop :: [Actor]
splitterTop
 = 	[ Wall  0 (Vec2 (-15.0) (-280.0)) (Vec2    0.0 (-150.0)) 
 	, Wall  0 (Vec2  (15.0) (-280.0)) (Vec2    0.0 (-150.0)) ]


-- Beads ------------------
beadRadius	= 5.0
beadSpace	= 1.0
beadBoxSize	= 2.0 * beadRadius + beadSpace

-- the initial grid of beads, change this if you want more/less beads in the simulation.
beadCountX	= 10
beadCountY	= 10


-- beads start off with their index just set to 0
beads :: [Actor]
beads	
 = [Bead 0 False beadRadius (beadPos (toFloat ix) (toFloat iy)) (Vec2 0.0 0.0)
		| ix <- [0 .. beadCountX - 1]
		, iy <- [0 .. beadCountY - 1 ] ]
	
		 
beadPos ix iy	
 = Vec2	( (ix * beadBoxSize) - (beadBoxSize * (toFloat beadCountX) / 2.0))
	(iy * beadBoxSize - 50.0)  



-- QuadTree ----------------------------------------------------------------------------------------

-- The maximum depth of the quad tree
maxDepth	= 4

-- | insert an actor into the tree
insertActor :: Actor -> QuadTree Actor -> QuadTree Actor

insertActor actor tree
	-- insert a bead into the tree
	| bead@(Bead ix _ radius pos@(Vec2 x y) vel) 	<- actor
	= do
		-- the bottom left and top right of the bead's bounding box.
		p0	= Vec2 (x - radius) (y - radius)
 		p1	= Vec2 (x + radius) (y + radius)

   	  	treeInsert maxDepth 0 p0 p1 bead tree

	| wall@(Wall ix (Vec2 x0 y0) (Vec2 x1 y1))		<- actor
	= do
		-- the bottom left and top right of the wall's bounding box.
		p0	= Vec2 (min x0 x1) (min y0 y1)
 		p1	= Vec2 (max x0 x1) (max y0 y1)
   	
		treeInsert maxDepth 0 p0 p1 wall tree

