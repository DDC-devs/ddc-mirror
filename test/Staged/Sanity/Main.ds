-- Sanity.
--	Check sanity of simple functions and integer / bool operations.
--
--	After running this and checking the output we should be able to rely on the compiler
--	to do its own comparisons and arithmetic during later tests.
--

-- main ()
--	= topHandle mainF;

main ()
 = do {	
 	checkArithmetic ();
	checkCurrying ();
	checkLists ();
	checkUpdate ();
	checkLambdaLifting ();
	checkShow ();
 };

add :: Int -> Int -> Int;
add x y		= x + y;

addFive x	= x + 5;


-----------------------
-- Arithmetic
--
checkArithmetic ()
 = do {	print  "-- Arithmetic.\n";
	checkI 5  	(2 + 3);
	checkI 5  	(7 - 2);
	checkI 23 	(2 + 2 + 3 * 2 + 2 * 5 + 6 - 3);
	checkI 6	(1 `add` 2 `add` 3);
	print "\n";
 };
 


-----------------------
-- Currying
--
checkCurrying ()
 = do {	print "-- Currying.\n";
	checkI 23 	(addFive 18);

	fun		= add 2;
	checkI 5	(fun 3);
	checkI 5	$ (add 2) 3;
	print "\n";
 };

 
-----------------------
-- Lists
--
checkLists ()
 = do {	print "-- Lists.\n";

	checkI 5  	$ head    [5, 4, 3, 2, 1];
	checkI 1  	$ last    [5, 4, 3, 2, 1];
	checkI 5    	$ lengthR [1, 2, 3, 4, 5];
	checkI 55	$ sumR    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	checkI 5050	$ sumR	  [1..100];
	checkI 54	$ sumR    $ tail 	[1..10];
	checkI 55	$ sumR    $ reverse 	[1..10];
	checkI 105	$ sumR	  $ map (add 5) [1..10];
	checkI 55	$ sumR	  $ [1, 2, 3, 4, 5] ++ [6, 7, 8, 9, 10];
	checkI 55	$ foldl   (+) 0 	[1..10];
	print "\n";
 };


-----------------------
-- Update
--
checkUpdate ()
 = do {	print	"-- Update.\n";
	
	--
	x	= 5;
	checkI	5	x;
	
	x	:= 23;
	checkI	23	x;

	-- 
	y	= 0;
	map_ 	((:=) y) [1, 2, 3, 4, 5];
	checkI	5 5;

	print	"\n";
 };


-----------------------
-- Lambda Lifting
-- 
checkLambdaLifting ()
 = do {	
	print "-- Lambda Lifting.\n";
 	checkI 66	
		$ sumR 	
		$ map (\x -> x + 1) 
		$ [0..10];

	--
	x	= 0;
	maps_ [1..10]
		(\i -> x := x + i);

	checkI 55	x;

	-- 
	y	= 0;
	f i	= y := y + i;
	maps_ [1..10] f;

	checkI 55	y;		


	print "\n";
 };



-----------------------
-- Show
--

checkShow ()
 = do {	print	"-- Show.\n";
	print	$ showInt 5; print "\n";
	print	$ "fresh " % "fried " % "fish" % "\n";
	print	$ showListInt [0..9] % "\n";

	print	$ concats 
		$ (intersperse " " ["all", "your", "base", "belongs", "to", "us"]) ++ (["\n"]);


	print	"\n";
 };


-----------------------
-- checkI
--	Check an integer result against an expected value.
--	Don't do anything too fancy here, we want this function
--	to survive stupid bugs in the compiler if at all possible.
--
checkI a b
 = case a == b of {
 	True	
	-> do { print "OK ";
		print (showInt b);
		print "\n";
	   };
	
	False	
	-> do {	print "FAILED! ";
		print "expected: ";
		print (showInt a);
		print " got:";
		print (showInt b);
		print ("\n");
	  };
 };



