
-- Application test.
--	Check that we can deal with unknown functions of moderate airity.
--	Do various applications full and partial to check that our
--		thunking code in the compiler and RTS is working properly.
--

app1  f x1				= f x1;
app2  f x1 x2				= f x1 x2;
app3  f x1 x2 x3			= f x1 x2 x3;
app4  f x1 x2 x3 x4			= f x1 x2 x3 x4;
app5  f x1 x2 x3 x4 x5			= f x1 x2 x3 x4 x5;
app6  f x1 x2 x3 x4 x5 x6		= f x1 x2 x3 x4 x5 x6;
app7  f x1 x2 x3 x4 x5 x6 x7		= f x1 x2 x3 x4 x5 x6 x7;
app8  f x1 x2 x3 x4 x5 x6 x7 x8		= f x1 x2 x3 x4 x5 x6 x7 x8;

add :: Int -> Int -> Int;
add x y	= x + y;

add1  x1				= x1;
add2  x1 x2				= x1 `add` x2;
add3  x1 x2 x3				= x1 `add` x2 `add` x3;
add4  x1 x2 x3 x4			= x1 `add` x2 `add` x3 `add` x4;
add5  x1 x2 x3 x4 x5			= x1 `add` x2 `add` x3 `add` x4 `add` x5;
add6  x1 x2 x3 x4 x5 x6			= x1 `add` x2 `add` x3 `add` x4 `add` x5 `add` x6;
add7  x1 x2 x3 x4 x5 x6 x7 		= x1 `add` x2 `add` x3 `add` x4 `add` x5 `add` x6 `add` x7;
add8  x1 x2 x3 x4 x5 x6 x7 x8		= x1 `add` x2 `add` x3 `add` x4 `add` x5 `add` x6 `add` x7 `add` x8; 


main ()
 = do {
	print	$ "add2\n";
	print	$ " test1-1   " % (show $ app1 (app1 add2 1) 1)				% "\n";

	print	$ "add3\n";
	print	$ " test1-1-1 "	% (show $ app1 (app1 (app1 add3 1) 2) 3)		% "\n";
	print	$ " test2-1   "	% (show $ app2 (app1 add3 1) 2 3)			% "\n";
	print	$ " test1-2   "	% (show $ app1 (app2 add3 1 2) 3)			% "\n";

	print	$ "add4\n";
	print	$ " test1-2-1 "	% (show $ app1 (app2 (app1 add4 1) 2 3) 4)		% "\n";
	print	$ " test3-1   " % (show $ app3 (app1 add4 1) 2 3 4)			% "\n";
	print	$ " test2-2   "	% (show $ app2 (app2 add4 1 2) 3 4)			% "\n";

	print	$ "add5\n";
	print	$ " test1-3-1 "	% (show $ app1 (app3 (app1 add5 1) 2 3 4) 5) 		% "\n";
	print	$ " test1-4   "	% (show $ app1 (app4 add5 1 2 3 4) 5)			% "\n";
	print	$ " test2-3   " % (show $ app2 (app3 add5 1 2 3) 4 5)			% "\n";
	print	$ " test3-2   "	% (show $ app3 (app2 add5 1 2) 3 4 5)			% "\n";
	print	$ " test4-1   "	% (show $ app4 (app1 add5 1) 2 3 4 5)			% "\n";
	
	print	$ "add6\n";
	print	$ " test1-4-1 "	% (show $ app1 (app4 (app1 add6 1) 2 3 4 5) 6) 		% "\n";
	print	$ " test1-5   "	% (show $ app1 (app5 add6 1 2 3 4 5) 6)			% "\n";
	print	$ " test2-4   "	% (show $ app2 (app4 add6 1 2 3 4) 5 6)			% "\n";
	print	$ " test3-3   "	% (show $ app3 (app3 add6 1 2 3) 4 5 6)			% "\n";
	print	$ " test4-2"	% (show $ app4 (app2 add6 1 2) 3 4 5 6)			% "\n";
	print	$ " test5-1   "	% (show $ app5 (app1 add6 1) 2 3 4 5 6)			% "\n";

	print	$ "-- add7\n";
	print	$ " test1-5-1 "	% (show $ app1 (app5 (app1 add7 1) 2 3 4 5 6) 7) 	% "\n";
	print	$ " test1-6   "	% (show $ app1 (app6 add7 1 2 3 4 5 6) 7)		% "\n";
	print	$ " test2-5   "	% (show $ app2 (app5 add7 1 2 3 4 5) 6 7)		% "\n";
	print	$ " test3-4   "	% (show $ app3 (app4 add7 1 2 3 4) 5 6 7)		% "\n";
	print	$ " test4-3   "	% (show $ app4 (app3 add7 1 2 3) 4 5 6 7)		% "\n";
	print	$ " test5-2   "	% (show $ app5 (app2 add7 1 2) 3 4 5 6 7)		% "\n";
	print	$ " test6-1   "	% (show $ app6 (app1 add7 1) 2 3 4 5 6 7)		% "\n";

	print	$ "-- add8\n";
	print	$ " test1-6-1 "	% (show $ app1 (app6 (app1 add8 1) 2 3 4 5 6 7) 8) 	% "\n";
	print	$ " test1-7   "	% (show $ app1 (app7 add8 1 2 3 4 5 6 7) 8)		% "\n";
	print	$ " test2-6   "	% (show $ app2 (app6 add8 1 2 3 4 5 6) 7 8)		% "\n";
	print	$ " test3-5   "	% (show $ app3 (app5 add8 1 2 3 4 5) 6 7 8)		% "\n";
	print	$ " test4-4   "	% (show $ app4 (app4 add8 1 2 3 4) 5 6 7 8)		% "\n";
	print	$ " test5-3   "	% (show $ app5 (app3 add8 1 2 3) 4 5 6 7 8)		% "\n";
	print	$ " test6-2   "	% (show $ app6 (app2 add8 1 2) 3 4 5 6 7 8)		% "\n";
	print	$ " test7-1   "	% (show $ app7 (app1 add8 1) 2 3 4 5 6 7 8)		% "\n";

	print	"\n";

 };
