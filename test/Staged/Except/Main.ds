
import Prelude;

-----
data Animal %r
	= Unicorn (String %r)
	| Gibbon  (String %r);
	
data Food %r
	= Grass
	| Flowers
	| Nachos;

main ()
 = do {	
 	ralph		= Gibbon  "Ralph";
	mary		= Unicorn "Mary";
	gertrude	= Unicorn "Gertrude";
	animals		= [ralph, mary, gertrude];	
	
	snacks		= [Nachos, Flowers, Grass];

	printN "-----";
	feed		ralph  Nachos;
	feedAnimal	ralph  Flowers;
	feedHungry	mary   Nachos;
	print  "\n";

	printN "-----";
	map (feedAnimal mary) snacks;
	print  "\n";

	printN "-----";
	hungryAte	= map (feedHungry ralph) snacks;
	print  "\n";

	printN $ "  * count = " % (showInt $ length hungryAte) % "\n";

 };


-----
feedAnimal animal food
 = 	try  feed animal food
 	catch { Exception msg -> (); };

	
-----
feedHungry animal food
 =	try do { 
 		feed animal food; 
		Just animal; 
	}
   	catch {
	 Exception msg 
	   -> do {
	   	printN msg;
		printN "     but they'll eat it when they're hungry.";
	     };
	}
	with	Nothing;



feed animal food
 = case animal of {
 	Unicorn	name
	 -> case food of {
	 	Grass	-> printN $ name % " ate the grass.";
		Flowers	-> printN $ name % " ate the flowers.";
		Nachos	-> throw Exception "Unicorns don't like nachos!";
	 };
	 
	Gibbon name
	 -> case food of {
		Grass	-> throw Exception "Gibbons don't like grass!";
		Flowers	-> throw Exception "Gibbons don't like flowers!";
	 	Nachos	-> printN $ name % " ate the nachos.";
	 };
 };

