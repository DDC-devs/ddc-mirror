-- Lift
--	Check that the lambda lifter is working ok.
--
--	The lambda lifter looks for nested functions with free variables and converts them to top-level
--	supercombinators. Any variables that were free in the super which aren't also bound at top level
--	are passed as new arguments.
--
--	At core level, any type vars or witnesses required which are needed in the lifter super also need
--	to be passed as new parameters.
--
import Prelude;

main ()
 = do {	
 	lift1 ();
	lift2 ();
	lift3 ();
	lift4 ();

	liftCtor ();
 };


-- | Check basic lambda lifting.
--	f1 is a local function with a free variable x, which passed to function map
lift1 ()
 = do {	a1	= 23;
	f1 x	= a1 + x;
	list	= [1, 2, 3, 4, 5];
	print	$ (showListInt $ map f1 list) % "\n";
 };

-- | A function with lambda abstractions nested 3 levels deep.
lift2 () 
 = do {
	a1	= 10;
	a2	= 11;

	f2 ()  
	 = do {	b1	= 21;
		b2	= 32;
		g2 () 
		 = do { c1	= 31;
			c2	= c1 + b2;
			h2 () 
			 = print $ show (a1 + a2 + b1 + c1 + b2 + c2);
			h2;
		 };
		g2;
	};

	f2 () () ();
	print "\n";
 };


-- | Check lifting of try-catch blocks.
--	Try-catch blocks are compiled by introducing local function bindings

lift3 ()
 = do {	a1	= 20;
	a2	= 42;

	z = 	try do { throw Exception "whoop"; a1 + a2 + 1; }
		catch { Exception msg	-> print $ "message: " % msg % "\n"; }
		with  5;

	println	$ "z = " % show z;
 };



-- | Check effect constraints on lambda bound functions are making it through to core.
--	If they go missing then the application of (\y -> .. ) to (\f x -> ..) won't type check.
lift4 ()	
 = print ((show $ (\f x -> 1 + f x) (\y -> y + 2) 5) % "\n");


-- | Check nested functions containing data constructors. 
--	Data constructors are not free vars, they're defined at top level.
--	Lambda lifter shouldn't try and bind them in the lifted function.
data Fish %r1
	= Fish (Int %r1);

liftCtor ()
 = do {	f ()		= Fish 5;
	doIt (Fish x)	= print $ "Fish " % show x % "\n";

	doIt $ f ();	
 };
