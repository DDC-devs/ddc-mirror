
module DDC.Core.Exp where

-------------------------------------------------------------------------------
-- | Names used for variables and constructors.
data Name       = Name Text

-- | Bound occurrence of a variable with a name and bump counter.
data Bound      = Bound Name Nat

-- | Binding occurrence of a variable.
data Bind       = Bind Name


-------------------------------------------------------------------------------
-- | Type expressions.
data Type (a: Data) (p: Data)
        = TAnn  a (Type a p)                    -- ^ Type annotation.
        | TVar  Bound                           -- ^ Bound variable.
        | TAbs  (TypeParam a p) (Type a p)      -- ^ Type abstraction.
        | TApp  (Type a p) (TypeArg a p)        -- ^ Type application.
        | TAtom (TypeAtom p)                    -- ^ Type atom.


-- | Parameter to a type abstraction.
data TypeParam (a p: Data)
        = TPTypeX Bind (Type a p)               -- ^ Explicit type parameter.


-- | Argument to a type application.
data TypeArg (a p: Data)
        = TGTypeX (Type a p)                    -- ^ Explicit type argument.


-- | Type atoms.
data TypeAtom (p: Data)
        = TAPrim TypePrim                       -- ^ Primitive in calculus.
        | TAFrag p                              -- ^ Primitive in lang. frag.
        | TACtor Name                           -- ^ Bound type constructor.


-- | Type primitives baked into calculus.
data TypePrim
        = TPConVoid                             -- ^ Void type constructor.
        | TPConUnit                             -- ^ Unit type constructor.
        | TPConFunX                             -- ^ Explicit function.
        | TPConFunI                             -- ^ Implicit function.


-------------------------------------------------------------------------------
-- | Term expressions.
data Term (a: Data) (p: Data)
        = MAnn  a (Term a p)                    -- ^ Expression annotation.
        | MVar  Bound                           -- ^ Bound variable.
        | MAbs  (TermParam a p) (Term a p)      -- ^ Function abstraction.
        | MApp  (Term a p) (TermArg a p)        -- ^ Function application.
        | MLet  (Lets a p) (Term a p)           -- ^ Let bindings.
        | MAtom (TermAtom p)                    -- ^ Atomic primitive.
        | MCast (Cast a p) (Term a p)           -- ^ Type cast.
        | MCase (Term a p)
                (List (Alt a p)) (Term a p)     -- ^ Case branching /w default.


-- | Parameter to a term abstraction.
data TermParam (a p: Data)
        = MPTermX Bind (Type a p)               -- ^ Explicit term parameter.
        | MPTermI Bind (Type a p)               -- ^ Implicit term parameter.


-- | Argument to a term application.
data TermArg (a p: Data)
        = MRTermX (Term a p)                    -- ^ Explicit term argument.
        | MRTermI (Term a p)                    -- ^ Implicit term argument.


-- | Term atoms.
data TermAtom (p: Data)
        = MAPrim TermPrim                       -- ^ Primitive in calculus.
        | MAFrag p                              -- ^ Primitive in lang. frag.
        | MACtor Name                           -- ^ Bound data constructor.


-- | Term primitives baked into calculus.
data TermPrim
        = MPConUnit                             -- ^ Unit data constructor.


-- | Let-bindings.
--   TODO: if one of these Term tycons is renamed to Exp the close transform panics.
data Lets  (a p: Data)
        = LLet     Bind (Term a p)              -- ^ Non-recursive binding.
        | LRec     (List (Bind, Term a p))      -- ^ Recursive binding.

        | LPrivate (List Bind)
                   (Maybe (Term a p))
                   (List (Bind, Term a p))      -- ^ Private region binding.


-- | Case-alternative.
data Alt (a p: Data)
        = AAlt (Pat a p) (Term a p)


-- | Pattern matching.
data Pat (a p: Data)
        = AData Name (List Bind)                -- ^ Match data ctor.


-- | Type casts.
data Cast (a p: Data)
        = CEffect (Term a p)                    -- ^ Weaken an effect.
        | CBox                                  -- ^ Box up a computation.
        | CRun                                  -- ^ Run a computation.

