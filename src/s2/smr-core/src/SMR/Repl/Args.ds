
module SMR.Repl.Args
export
{       smrReplArgs_load;
        smrReplArgs_collectIncludes
}
import Main.Args
where


-- | Command line arguments.
data Mode
        -- | Include a file into the top level scope.
        = ModeInclude   [ file: Text ]

        -- | Evaluate the macro with the given name.
        | ModeEval      [ name: Text ]


-- | Argument definitions.
smrReplArgs_defs: List (Arg (List Mode))
 = Cons ( ArgText "-i"    "include file"
        $ \s as -> Cons (ModeInclude [file = s]) as)

 $ Cons ( ArgText "-eval" "evaluate expression"
        $ \s as -> Cons (ModeEval [name = s])    as)
 $ Nil


-- | Load Shimmer command line args.
smrReplArgs_load: S (Env + Process + Console) (List Mode)
 = mainArgs_load Nil smrReplArgs_defs


-- | Collect
smrReplArgs_collectIncludes (ms: List Mode): List Text
 = case ms of
        Nil
         -> Nil

        Cons (ModeInclude inc) ms'
         -> Cons inc.file (smrReplArgs_collectIncludes ms')

        Cons _ ms'
         -> smrReplArgs_collectIncludes ms'

