
module SMR.Repl.Command.Load
export loadSources; loadSource
import SMR.Source.Parser
import SMR.Source.Lexer
import SMR.Source.Pretty
import SMR.Source.Expected
import SMR.Prim.Name
import SMR.Prim.Op.Base
import System.IO.Console
import System.IO.File
import System.Posix.Stdlib
import Data.List
import Class.Pretty
import Class.Show
import Data.Text.Char
where



-- | Load source files.
loadSources
        (config: Config Name Prim)
        (paths:  List Text)
        :        S (File + Console + Process)
                   (List (Decl Name Prim))
 = case paths of
        Nil     -> Nil
        Cons path paths'
         -> case loadSource config path of
                Nothing
                 -> do  writel "load failed"
                        exit 0
                        Nil

                Just decls
                 -> do  decls'  = loadSources config paths'
                        append decls decls'


-- | Load a list of top-level declarations from a source file.
loadSource
        (config: Config Name Prim)
        (path:   Text)
        :        S (File + Console)
                   (Maybe (List (Decl Name Prim)))
 = do
        str     = file_read path
        lStart  = Location 1 1
        result  = lexTokens lStart $ charListOfText str

        case result of
         (toks, _, cs)
          |  not $ all isSpace cs
          -> do writel "! error at end of input."
                writel (show cs)
                Nothing

          |  otherwise
          -> case parseDecls config toks of
                Left err
                 -> do  writel $ ppr err
                        Nothing

                Right ds'
                 -> Just ds'

         _ -> Nothing

