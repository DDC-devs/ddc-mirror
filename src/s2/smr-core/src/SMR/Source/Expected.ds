
module SMR.Source.Expected
export
{       pretty_Expected;
        pretty_ParseError;
        pretty_Blocker;
        pretty_LocatedToken;
}
import SMR.Source.Token
import SMR.Source.Pretty
import Control.Parsec
import Data.Bag
import Data.Text.Location
import Data.Text.List
where


-------------------------------------------------------------------------------
-- ISSUE #416: Data type decls are not checked that all tyvars in result
-- type of ctors appear as params.
data Expected (t s p: Data)
        -- Base expectactions are of particular tokens appearing on the input.
        = ExBaseEnd
        | ExBaseNameOf  Space
        | ExBaseNat
        | ExBasePunc    Char
        | ExBaseMsg     Text
        | ExBaseNameAny

        -- Contextual expectations, which indicate what we were trying
        -- to parse while we had some other expectation.
        | ExContextDecl Name (Bag (Blocker t (Expected t s p)))

        | ExContextBind Name (Bag (Blocker t (Expected t s p)))


-- ISSUE #415: Implicit resolver gets caught in a loop if result type of fn
-- matches a parameter.
pretty_Expected
        {Pretty s} {Pretty p} {Pretty t}
        : Pretty (Expected t s p)
 =  Pretty $ \bb
 -> case bb of
        ExBaseEnd       -> "expecting end of input"
        ExBaseNameOf s  -> "expecting name" %% show s
        ExBaseNat       -> "expecting natural number"
        ExBasePunc c    -> "expecting punctuation" %% textOfChar c
        ExBaseMsg t     -> "expecting" %% t
        ExBaseNameAny   -> "expecting name"

        ExContextDecl n es
         -> "\n" % "in declaration" %% n
         %  "\n" % (text_unlines' $ map ppr $ bag_toList es)

        ExContextBind n es
         -> "\n" % "in binding"     %% n
         %  "\n" % (text_unlines' $ map ppr $ bag_toList es)


----------------------------------q---------------------------------------------
-- | Parser error.
data ParseError (t e: Data) where
        ParseError
         :  List (Blocker t e)
         -> ParseError t e


-- | Pretty dictionary for a parser error.
pretty_ParseError
        {Pretty t} {Pretty e}
        : Pretty (ParseError t e)
 =  Pretty $ \(ParseError bs)
 -> text_unlines $ map ppr bs


-- | Pretty dictionary for a blocker.
pretty_Blocker
        {Pretty t} {Pretty e}
        : Pretty (Blocker t e)
 =  Pretty $ \(Blocker ts e)
 -> case ts of
        Nil             -> ppr e
        Cons t _        -> "at token" %% ppr t %% ppr e


-- | Pretty dictionary for a located token.
pretty_LocatedToken: Pretty (Located Token)
 = Pretty show

