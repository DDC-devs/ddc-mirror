
module SMR.Source.Config
export attachRangeExp; withRangeExp
import SMR.Source.Expected
import Class.Monad
import Control.Parsec
import Data.Text.Location
import Data.Maybe
import Data.Lens
where


-- | Configuration for the parser.
data Config (s p: Data)
 =      [ readSym:      Name -> Maybe s
        , readPrm:      Name -> Maybe p
        , lensRange:    Lens (Exp s p) (Maybe Range) ]

-- | Range of locations in a source file.
type Range = (Location, Location)


-- | Attach source locations to an expression,
--   if there is an attach function specified in the config.
attachRangeExp
        {config: Config s p}
        (lStart lEnd: Location) (xx: Exp s p): Exp s p
 = lens_set config.lensRange (Just (lStart, lEnd)) xx


-- | Run an expression parser,
--   and wrap the result in the source location.
withRangeExp
        {config: Config s p}
        (p: Parser (Located Token) (Expected (Located Token) s p) (Exp s p))
        :   Parser (Located Token) (Expected (Located Token) s p) (Exp s p)
 = do
        -- ISSUE #417: Binding against a pattern yields a bad pattern error.
        --(kStart, xx, kEnd) <- delim p

        res     <- withDelims p
        case res of
         (kStart, xx, kEnd)
          -> do lStart  = startOfLocated kStart
                lEnd    = endOfLocated   kEnd
                return  $ attachRangeExp lStart lEnd xx

