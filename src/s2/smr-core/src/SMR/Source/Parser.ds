
module SMR.Source.Parser
export
{       parseDecls; parseExp;
}
import SMR.Source.Lexer
import SMR.Source.Config
import SMR.Source.Expected
import SMR.Source.Token
import SMR.Core.Exp
import SMR.Core.Exp.Compounds
import Class.Category
import Control.Parsec
import Data.Text.Location
import Data.Maybe
import Data.Lens
import Data.List
where


-- Interface ------------------------------------------------------------------
parseDecls
        (c:  Config s p)
        (ts: List (Located Token))
        :    Either (ParseError (Located Token) (Expected (Located Token) s p))
                    (List (Decl s p))
 = case parse pDeclsEnd ts of
        ParseSkip    es         -> Left $ ParseError (bag_toList es)
        ParseReturn  _ xx       -> Right xx
        ParseFailure bs         -> Left $ ParseError (bag_toList bs)
        ParseSuccess xx ts      -> Right xx
 where
        pDeclsEnd
         = do   ds      <- pDecls {c}
                _       <- pEnd
                return ds


-- | Parse a complete expression from the given list of tokens.
parseExp (c:  Config s p)
         (ts: List (Located Token))
         : Either (ParseError (Located Token) (Expected (Located Token) s p))
                 (Exp s p)
 = case parse pExpEnd ts of
        ParseSkip    es         -> Left $ ParseError (bag_toList es)
        ParseReturn  _ xx       -> Right xx
        ParseFailure bs         -> Left $ ParseError (bag_toList bs)
        ParseSuccess xx ts      -> Right xx
 where
        pExpEnd
         = do   x       <- pExp {c}
                _       <- pEnd
                return x


-- Decl ------------------------------------------------------------------------
pDecls  {c: Config s p}
        : Parser (Located Token) (Expected (Located Token) s p) (List (Decl s p))
 =      some pDecl


pDecl   {c: Config s p}
        : Parser (Located Token) (Expected (Located Token) s p) (Decl s p)
 = enterOn (pNameOfSpace SMac) ExContextDecl $ \name
 → do   psParam <- some pParam
        _       <- pPunc '='
        xBody   <- pExp
        _       <- pPunc ';'
        if length psParam == 0
         then return (DTerm name xBody)
         else return (DTerm name $ XAbs psParam xBody)


-- Exp ------------------------------------------------------------------------
-- | Parser for an expression.
pExp    {c: Config s p}
        :   Parser (Located Token) (Expected (Located Token) s p) (Exp s p)
        -- Abstraction.
 = alts
 $ Cons (do
        _       <- pPunc '\\'
        psParam <- some pParam
        _       <- pPunc '.'
        xBody   <- pExp
        return  $ XAbs psParam xBody)

        -- Substitution train.
 $ Cons (do
        csTrain <- pTrain
        _       <- pPunc '.'
        xBody   <- pExp
        return  $  XSub (reverse csTrain) xBody)

        -- Application possibly using '$'
 $ Cons (do
        xHead   <- pExpApp
        alt (do _       <- pPunc '$'
                xRest   <- pExp
                return  $  XApp xHead xRest)
            (return xHead))
 $ Nil


-- | Parser for an application.
pExpApp {c: Config s p}
        :   Parser (Located Token) (Expected (Located Token) s p) (Exp s p)

        -- Application of a superprim.
 = alts
 $ Cons (do
        nKey    <- do   nKey'   <- pNameOfSpace SKey
                        if       nKey' == "box" then return KBox
                         else if nKey' == "run" then return KRun
                         else if nKey' == "seq" then return KSeq
                         else if nKey' == "tag" then return KTag
                         else failure
        xsArgs  <- some pExpAtom
        case xsArgs of
         Cons xFirst xsRest
             -> return $ makeXApps (XKey nKey xFirst) xsRest
         Nil -> failure)

        -- Application of some other expression.
 $ Cons (do
        xFun    <- pExpAtom
        xsArgs  <- some pExpAtom
        case xsArgs of
         Nil    -> return $ xFun
         _      -> return $ foldl XApp xFun xsArgs)
 $ Nil


-- | Parser for an atomic expression.
pExpAtom {c: Config s p}
         :   Parser (Located Token) (Expected (Located Token) s p) (Exp s p)
        -- Parenthesised expression.
 = alts
 $ Cons (do
        _       <- pPunc '('
        x       <- pExp
        _       <- pPunc ')'
        return x)

        -- Multiple return values.
 $ Cons (do
        _       <- pPunc '<'
        xsArgs  <- sepBy pExp (pPunc ',')
        _       <- pPunc '>'
        return  $ XRet xsArgs)


        -- Named variable with or without index.
 $ Cons (do
        (space, name) <- pName

        case space of
         -- Named variable.
         SVar
          -> alt (do    _       <- pPunc '^'
                        ix      <- pNat
                        return  $ XVar name ix)
                 (return $ XVar name 0)

         -- Named macro.
         SMac ->  return $ XRef (RMac name)

         -- Named set.
         SSet ->  return $ XRef (RSet name)

         -- Named symbol
         SSym
          -> case configSym c name of
                Just s  -> return (XRef (RSym s))
                Nothing -> failure

         -- Named primitive.
         SPrm
          -> case configPrim c name of
                Just p  -> return (XRef (RPrm p))
                Nothing -> failure

         -- Named keyword.
         SKey
          -> failure)
 $ Nil


-- Param ----------------------------------------------------------------------
-- | Parser for a functio parameter.
pParam  {c: Config s p}
        :   Parser (Located Token) (Expected (Located Token) s p) Param
 = alts
 $ Cons (do
        _       <- pPunc '!'
        n       <- pNameOfSpace SVar
        return  $  PParam n FVal)

 $ Cons (do
        _       <- pPunc '~'
        n       <- pNameOfSpace SVar
        return  $  PParam n FExp)

 $ Cons (do
        n       <- pNameOfSpace SVar
        return  $  PParam n FVal)
 $ Nil


-- Train ----------------------------------------------------------------------
-- | Parser for a substitution train.
--   The cars are produced in reverse order.
pTrain  {c: Config s p}
        :   Parser (Located Token) (Expected (Located Token) s p) (List (Car s p))
 = do   cCar    <- pTrainCar
        alt
         (do csCar <- pTrain
             return $ Cons cCar csCar)
         (do return $ Cons cCar Nil)


-- | Parse a single car in the train.
pTrainCar  {c: Config s p}
           : Parser (Located Token) (Expected (Located Token) s p) (Car s p)
 = alt  -- Substitution, both simultaneous and recursive
    (do car     <- pCarSimRec
        return car)

    (do -- An ups car.
        ups     <- pUps
        return (CUps ups))


-- Snv ------------------------------------------------------------------------
-- | Parser for a substitution environment.
--
--   Snv   ::= '[' Bind*, ']'
--
pCarSimRec {c: Config s p}
           :   Parser (Located Token) (Expected (Located Token) s p) (Car s p)
 = do   _       <- pPunc '['

        alt     -- Recursive substitution.
         (do    _       <- pPunc '['
                bs      <- sepBy pBind (pPunc ',')
                _       <- pPunc ']'
                _       <- pPunc ']'
                return  $ CRec (SSnv (reverse bs)))

                -- Simultaneous substitution.
         (do    bs      <- sepBy pBind (pPunc ',')
                _       <- pPunc ']'
                return  $ CSim (SSnv (reverse bs)))


-- | Parser for a binding.
--
--   Bind ::= Name '=' Exp
--         |  Name '^' Nat '=' Exp
--
pBind   {c: Config s p}
        :   Parser (Located Token) (Expected (Located Token) s p) ((Name, Nat), Exp s p)
 = enterOn (pNameOfSpace SVar) ExContextBind $ \name
 → alt  (do _       <- pPunc '='
            x       <- pExp
            return  ((name, 0), x))

        (do _       <- pPunc '^'
            bump    <- pNat
            _       <- pPunc '='
            x       <- pExp
            return  ((name, bump), x))


-- Ups ------------------------------------------------------------------------
-- | Parser for an ups.
--
--   Ups  ::= '{' Bump*, '}'
--
pUps: Parser (Located Token) (Expected (Located Token) s p) Ups
 = do   _       <- pPunc '{'
        bs      <- sepBy pBump (pPunc ',')
        _       <- pPunc '}'
        return  $ UUps (reverse bs)


-- | Parser for a bump.
--
--   Bump ::= Name ':' Nat
--         |  Name '^' Nat ':' Nat
--
pBump: Parser (Located Token) (Expected (Located Token) s p) ((Name, Nat), Nat)
 = do   name    <- pNameOfSpace SVar
        alt
         (do    _       <- pPunc ':'
                inc     <- pNat
                return  ((name, 0), inc))

         (do    _       <- pPunc '^'
                depth   <- pNat
                _       <- pPunc ':'
                inc     <- pNat
                return  ((name, depth), inc))


-------------------------------------------------------------------------------
-- | Parser for a natural number.
pNat:   Parser (Located Token) (Expected (Located Token) s p) Nat
 =      from ExBaseNat (takeNatOfToken    ∘ valueOfLocated)


-- | Parser for a name in the given space.
pNameOfSpace
        (s: Space): Parser (Located Token) (Expected (Located Token) s p) Name
 =      from (ExBaseNameOf s) (takeNameOfToken s ∘ valueOfLocated)


-- | Parser for a name of any space.
pName:  Parser (Located Token) (Expected (Located Token) s p) (Space, Name)
 =      from  ExBaseNameAny   (takeAnyNameOfToken ∘ valueOfLocated)


-- | Parser for the end of input token.
pEnd:   Parser (Located Token) (Expected (Located Token) s p) Unit
 = do   _ <- satisfies ExBaseEnd (isToken KEnd ∘ valueOfLocated)
        return ()


-- | Parser for a punctuation character.
pPunc   (c: Char)
        : Parser (Located Token) (Expected (Located Token) s p) Unit
 = do   _ <- satisfies (ExBasePunc c) (isToken (KPunc c) ∘ valueOfLocated)
        return ()

