
module SMR.Prim.Op.Eval
export makePrimOpsEval
import SMR.Core.Step
where


makePrimOpsEval (_: Unit): List (PrimEval s Prim)
 = Cons primOpEval
 $ Cons primOpEvalFail
 $ Nil


primOpEval: PrimEval s Prim
 = PrimEval (PrimOp "smr-eval-cbv") "call-by-value evaluation"
            (Cons Val Nil) fn'
 where fn'  (Cons xF  Nil)
        = do    str     = StepStrength False False
                ctx     = StepContext  Nil Nil
                case xF of
                 XKey KBox xF'
                     -> case steps str ctx xF' of
                         Left err   -> Just $ XRef (RPrm (PrimOp "smr-eval-fail"))
                         Right xF'  -> Just $ XKey KBox xF'

                 xF' -> case steps str ctx xF' of
                         Left  err  -> Just $ XRef (RPrm (PrimOp "smr-eval-fail"))
                         Right xF'  -> Just $ XKey KBox xF'


primOpEvalFail: PrimEval s Prim
 = PrimEval (PrimOp "smr-eval-fail") "indicate evaluation values"
            Nil fn'
 where  fn' _ = Nothing
