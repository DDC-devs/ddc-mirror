
module SMR.Prim.Op.Bool
export makePrimOpsBool
import SMR.Prim.Op.Base
import Data.Numeric
where


-- | Primitive evaluators for boolean operator.
makePrimOpsBool (_ : Unit): List (PrimEval s Prim)
 = Cons (primOpBool1     "bool-not" "boolean negation"  (\b -> not b))
 $ Cons (primOpBool2Bool "bool-and" "boolean and"       and)
 $ Cons primOpIf
 $ Nil


-- | Construct an evaluator for a 1-arity nat operator
primOpBool1
        (name: Text) (desc: Text)
        (fn:   Bool -> Bool)
        :      PrimEval s Prim
 =  PrimEval (PrimOp name) desc (Cons Val Nil) fn'
 where  fn' as0
         | Just (b1, as1) <- takeArgBool as0
         = Just $ makeXBool (fn b1)
        fn' _
         = Nothing


-- | Construct an evaluator for a 2-arity nat operator returning nat.
primOpBool2Bool
        (name: Text) (desc: Text)
        (fn:   Bool -> Bool -> Bool)
        :      PrimEval s Prim
 =  PrimEval (PrimOp name) desc (Cons Val (Cons Val Nil)) fn'
 where  fn' as0
         | Just (b1, as1) <- takeArgBool as0
         , Just (b2, Nil) <- takeArgBool as1
         = Just $ makeXBool (fn b1 b2)
        fn' _
         = Nothing


-- | Primitive evaluator for the #if operator.
--   Only the scrutinee is demanded, while the branches are not.
primOpIf: PrimEval s Prim
 = PrimEval
        (PrimOp "if")
        "if-then-else operator"
        (Cons Val (Cons Exp (Cons Exp Nil)))
        fn'
 where
        fn' as0
         | Just (b1, as1) <- takeArgBool as0
         , Just (x1, as2) <- takeArgExp  as1
         , Just (x2, Nil) <- takeArgExp  as2
         = Just $ if b1 then x1 else x2
        fn' _
         = Nothing

