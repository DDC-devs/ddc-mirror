
-- Shimmer v1.0. The Lambda Machine.
module Main
import SMR.Core.Exp
import SMR.Core.Step
import SMR.Repl.Error
import SMR.Repl.Args
import SMR.Prim.Op
import SMR.Prim.Name
import SMR.Source.Pretty
import SMR.Source.Token
import SMR.Source.Parser
import System.IO.Console
import System.IO.File
import System.Posix.Stdlib
import Main.Args
import Data.Maybe
import Data.Function
import Data.Text.Location
where

-- TODO: church mul two two result names are wrong
-- TODO: church list-reverse is now diverging.
-- TODO: need to start regression testing this stuff.

-------------------------------------------------------------------------------
data Cmd where
        CmdNone : Cmd
        CmdStep : Exp Name Prim -> Cmd


data State where
        State
         :  Config Name Prim                    -- ^ Parser config.
         -> List (Prim, PrimEval Name Prim)     -- ^ Primitive evaluators.
         -> List (Decl Name Prim)               -- ^ Top-level declarations
         -> State

configOfState
        ((State config _ _): State)
        : Config Name Prim
 = config

primTableOfState
        ((State _ evals _):  State)
        : List (Prim, PrimEval Name Prim)
 = evals

declsOfState
        ((State _ _ decls):  State)
        : List (Decl Name Prim)
 = decls


-- Utils ----------------------------------------------------------------------

-- TODO: need explicit run/box
getLine: S Console Text
 = box do
        txt     = run readl 2014
        textOfCharList $ init Nil $ charListOfText txt


-------------------------------------------------------------------------------
main ()
 = do   writel "Shimmer, version 1.0. The Lambda Machine."

        modes           = smrReplArgs_load
        tsInclude       = smrReplArgs_collectIncludes modes

        -- Build the table of primitive evaluators.
        primEvals
         = makePrimOps ()

        -- Extract a list of primitive names.
        -- TODO: find out why we need explicit type app,
        --       as well as explicit type abs to set the tyvar order.
        primNames
         = map (nameOfPrimEval [Text] [Prim]) primEvals

        -- Extract textual names of primitives.
        primNamesText
         = mapMaybe
                (\e -> case e of
                        PrimOp n -> Just n
                        _        -> Nothing)
         $ primNames

        -- Build table of prim name to evaluator.
        primTable = zip primNames primEvals

        -- Build the parser config.
        config
         = Config (\z -> Just z)
                  (\z -> parsePrim primNamesText z)
                  lens_exp_location

        decls   = loadSources config tsInclude
        state   = State config primTable decls
        repl state CmdNone


lens_exp_location
        : Lens (Exp Name Prim) (Maybe (Location, Location))
 = lens_make (\xx -> Nothing) (\l xx -> xx)


-- | Load source files.
loadSources
        (config: Config Name Prim)
        (paths:  List Text)
        :        S (File + Console + Process)
                   (List (Decl Name Prim))
 = case paths of
        Nil     -> Nil
        Cons (TextLit path) paths'
         -> case loadSource config path of
                Nothing
                 -> do  writel "load failed"
                        exit 0
                        Nil

                Just decls
                 -> do  decls'  = loadSources config paths'
                        append decls decls'


-- | Load a list of top-level declarations from a source file.
loadSource
        (config: Config Name Prim)
        (path:   TextLit)
        :        S (File + Console)
                   (Maybe (List (Decl Name Prim)))
 = do
        str     = file_read (takeTextLit path)
        lStart  = Location 1 1
        result  = lexTokens lStart $ charListOfText str

        case result of
         (toks, _, cs)
          |  not $ all isSpace cs
          -> do writel "! error at end of input."
                writel (show cs)
                Nothing

          |  otherwise
          -> case parseDecls config toks of
                Left err
                 -> do  writel $ ppr err
                        Nothing

                Right ds'
                 -> Just ds'

         _ -> Nothing


-- | Read-Eval-Print loop.
--   TODO: need to put the explicit box.
--
--   TODO: closing stdin with control-D causes prompt to print infinitely.
--
repl    (state: State) (cmd: Cmd): S Console Unit
 = box do
        -- Write the prompt.
        write "> "
        flush

        -- Get the line and convert it to tokens.
        str     = getLine
        result  = lexTokens (Location 1 1)
                $ charListOfText str

        case result of
         -- If only whitespace was provided then run the default command.
         (Cons lt Nil, _, Nil)
          |  valueOfLocated lt == KEnd
          -> case cmd of
                CmdNone    -> repl      state CmdNone
                CmdStep xx -> repl_step state xx

         -- We have some tokens, to parse them.
         (toks, _, Nil)
          ->    repl_toks state CmdNone toks

         -- We couldn't lex all the characters into tokens.
         (toks, lStart', cs)
          -> case last toks of
                Just tok
                 |  Cons c _ <- cs
                 -> do  writell $ ppr
                         $ ErrorReplLexer "<interactive>" lStart' (Just c)
                        repl state CmdNone

                _ -> do writell $ ppr
                         $ ErrorReplLexer "<interactive>" lStart' Nothing


-- | Given some tokens, try to parse an expression and evaluate it.
repl_toks
        (state: State) (cmd: Cmd)
        (toks:  List (Located Token))
        :       S Console Unit
 = case parseExp (configOfState state) toks of
        -- Parse succeeded.
        Right x
         ->     repl_step state x

        Left err
         -- Parse failed on some token.
         -> do  writel "! parse error."
                writel $ ppr err
                repl state CmdNone

         -- Parse failed because there was no input,
         -- just read the next line.
         | otherwise
         ->     repl state CmdNone


-- | Given an expression,
--   try to perform a single evaluation step.
repl_step
        (state: State)
        (xx:    Exp Name Prim)
        :       S Console Unit
 = case step' state True xx of
        Left (ResultError err)
         -> do  writell $ ppr $ ErrorReplRuntime  "<interactive>" err
                repl state CmdNone

        Left ResultDone
         -> do  writell "! done."
                repl state CmdNone

        Right x'
         -> do  writell (ppr x')
                repl state (CmdStep x')


-- | Given an expression,
--   try to perform a multi-step evaluation step.
repl_steps
        (state: State)
        (xx:    Exp Name Prim)
        :       S Console Unit
 = case steps' state True xx of
        Left err
         -> do  writell $ ppr $ ErrorReplRuntime  "<interactive>" err
                repl state CmdNone

        Right x'
         -> do  writell $ ppr x'
                repl state CmdNone


-- | Single step an expression.
step'   (state: State)
        (red:   Bool)
        (xx:    Exp Name Prim)
        :       Either Result (Exp Name Prim)
 = step (StepStrength red True)
        (StepContext
                (primTableOfState state)
                (declsOfState state))
         xx


-- | Multi-step an expression.
steps'  (state: State)
        (red:   Bool)
        (xx:    Exp Name Prim)
        :       Either Text (Exp Name Prim)
 = steps
        (StepStrength red True)
        (StepContext
                (primTableOfState state)
                (declsOfState state))
         xx
