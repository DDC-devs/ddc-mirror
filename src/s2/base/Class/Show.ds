
module Class.Show
export
{       show;
        show_Unit;      show_Bool;
        show_Nat;       show_Int;
        show_Word8;     show_Word16;    show_Word32;    show_Word64;
        show_Float32;   show_Float64;
        show_Addr;
        show_Text;
        show_Tup2;
        show_Maybe;
        show_Either;
        show_List;
}
import Data.Text
import Data.Text.Show
import Data.Text.Numeric
import Data.Maybe
import Data.Either
import Data.List
import Data.Numeric
where


-------------------------------------------------------------------------------
-- | Class dictionary for Show.
data Show (a: Data) where
        Show    : (a -> Text) -> Show a

show {(Show sh): Show a} (x: a): Text
 = sh x


-------------------------------------------------------------------------------
-- Dictionaries for primitive types.
show_Unit:      Show Unit       = Show $ Î»xx -> "()"
show_Bool:      Show Bool       = Show showBool
show_Nat:       Show Nat        = Show showNat
show_Int:       Show Int        = Show showInt
show_Word8:     Show Word8      = Show showWord8
show_Word16:    Show Word16     = Show showWord16
show_Word32:    Show Word32     = Show showWord32
show_Word64:    Show Word64     = Show showWord64
show_Float32:   Show Float32    = Show showFloat32
show_Float64:   Show Float64    = Show showFloat64
show_Addr:      Show Addr       = Show showAddr


-- | Show dictionary for Text.
--   ISSUE #381: Escape non-printable characters in base Show library.
show_Text: Show Text
 = Show sh
 where  sh tx           = "\"" % escapeTextDisciple tx % "\""


-- | Show dictionary for Tup2.
show_Tup2 {Show a} {Show b}: Show (Tup2 a b)
 = Show sh
 where
        sh (T2 x y)     = parens $ "T2" %% show x %% show y


-- | Show dictionary for Maybe.
show_Maybe {Show a}: Show (Maybe a)
 = Show sh
 where
        sh Nothing      = "Nothing"
        sh (Just x)     = parens $ "Just" %% show x


-- | Show dictionary for Either.
show_Either {Show a} {Show b}: Show (Either a b)
 = Show sh
 where
        sh (Left  x)    = parens $ "Left"  %% show x
        sh (Right x)    = parens $ "Right" %% show x


-- | Show dictionary for List.
show_List {Show a}: Show (List a)
 = Show sh
 where
        sh Nil          = "Nil"
        sh (Cons x xs)  = parens $ "Cons" %% show x %% show xs

