
module Data.Ref
export  allocRef; readRef; writeRef
        modifyRef

import foreign boxed type
 Ref       : Region -> Data -> Data

import foreign c value
 ddcPrimRefAlloc  : {@r: Region} -> {@a: Data} -> a  -> S (Alloc r) (Ref r a)
 ddcPrimRefRead   : {@r: Region} -> {@a: Data} -> Ref r a -> S (Read r) a
 ddcPrimRefWrite  : {@r: Region} -> {@a: Data} -> Ref r a -> a -> S (Write r) Void#

where

allocRef {@r: Region} {@a: Data}
         (x: a): S (Alloc r) (Ref r a)
 =      ddcPrimRefAlloc {@r} x


readRef {@r: Region} {@a: Data} (ref: Ref r a)
        : S (Read r) a
 =      ddcPrimRefRead {@r} ref


-- | Wrap up the primitive writeRef to return a unit result.
writeRef {@r: Region} {@a: Data}
         (ref: Ref r a) (x: a): S (Write r) Unit
  = do   ddcPrimRefWrite ref x
         ()


-- | Modify the contents of a Ref by applying the given function.
modifyRef {@r: Region} {@a: Data}
          (ref: Ref r a) (f: a -> a): S (Read r + Write r) Unit
 = do   x = ddcPrimRefRead ref
        ddcPrimRefWrite ref (f x)
        ()

