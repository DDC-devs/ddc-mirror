
-- | Useful operators on text objects.
module Data.Text.Operator
export
{       -- * Desugaring
        textLit; paste; pastes;

        -- * Optimizations
        flattenText;

        -- * Pretty Printing
        parens;

        -- * Reductions;
        text_foldl
}
import Data.Text.Base

-- | Capabilities to allocate and read top-level text vectors.
--   TODO: we shouldn't need to re-import these.
import foreign abstract capability
        capTopTextAlloc : Alloc RegionText
        capTopTextRead  : Read  RegionText

where



-- Desuguaring -----------------------------------------------------------------
-- Names used by the Source Tetra desugarer to implement string literals.
textLit (x : TextLit#) : Text
 = TextLit (makeTextLit x)

paste  (x y : Text) : Text
 = TextApp x y

pastes (x y : Text) : Text
 = x % " " % y


-- Optimizations --------------------------------------------------------------
-- | If this text is not already in flat form then flatten it.
--
--   This allocates a new contiguous vector for the text object and
--   allows the program to release space for intermediate append nodes.
--
flattenText (tt: Text): Text
 = case tt of
        -- Single text literals are already flat.
        TextLit lit     -> tt

        -- Single text vectors are already flat.
        TextVec vec     -> tt

        -- Text has an outer append-node,
        -- so flatten the whole thing.
        TextApp _ _     -> textOfVector (run vectorOfText [RegionText] tt)


-- Pretty Printing ------------------------------------------------------------
-- | Wrap a some text in parenthesis.
parens (tx: Text): Text
 = "(" % tx % ")"


-- Reductions -----------------------------------------------------------------
text_foldl (f: a -> Char -> a) (z: a) (tx: Text): a
 = case tx of
        TextLit lit     -> text_foldlTextLit f z lit
        TextVec vec     -> text_foldlTextVec f z vec
        TextApp tx1 tx2 -> text_foldl f (text_foldl f z tx1) tx2

text_foldlTextLit
        (f: a -> Char -> a) (z: a)
        (lit: TextLit): a
 = go 0 z
 where  go ix acc
         | ix >= sizeOfTextLit lit = acc
         | otherwise    = go (ix + 1) (f acc (promote# (indexTextLit lit ix)))

text_foldlTextVec
        (f: a -> Char -> a) (z: a)
        (vec: Vector# RegionText Word8): a
 = go 0 z
 where  go ix acc
         | ix >= vectorLength# vec - 1  = acc
         | otherwise    = go (ix + 1) (f acc (promote# (vectorRead# vec ix)))

