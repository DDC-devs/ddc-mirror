
module Data.Text.Parse
export
{       parseBool;
        parseNat;
        parseFloat64;
}
import Data.Text.Base
import Data.Text.Operator
import Data.Maybe

import foreign c value
        ddcPrimParseNat     : {@r: Region} -> Vector# r Word8# -> Nat#
        ddcPrimParseFloat64 : {@r: Region} -> Vector# r Word8# -> Float64#

where


-- | Parse a Bool
parseBool (tx: Text): Maybe Bool
 | eqText tx "True"     = Just True
 | eqText tx "False"    = Just False
 | otherwise            = Nothing


-- | Parse a Nat.
--   TODO: This doesn't detect ill-formed strings.
parseNat (tx: Text): Maybe Nat
 = private r with {Alloc r} in
   Just (ddcPrimParseNat (vectorOfText {@r} tx))


-- | Parse a Float64.
--   TODO: This doesn't detect ill-formed strings.
parseFloat64 (tx: Text): Maybe Float64
 = private r with {Alloc r} in
   Just (ddcPrimParseFloat64 (vectorOfText {@r} tx))
