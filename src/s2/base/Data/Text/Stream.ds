
module Data.Text.Stream
export {
        text_toList;
        text_words; text_lines;
        textSource_fromText;
        textSource_pullWord; textSource_pullWords;
        textSource_pullChar;
        textSource_peekChar;
        textSource_matchChar;
        textSource_toText
}

import Data.Numeric.Word8
import Data.Text.Base
import Data.Text.Char
import Data.Text.List
import Data.List
import Data.Ref

-- | Runtime operators for working with unboxed text literals.
import foreign c value

        -- | Make a text literal.
        --   The TextLit# type is a pointer to literal UTF-8 data in
        --   static memory, which we pack into a boxed object.
        ddcPrimMakeTextLit     : TextLit# -> TextLit

        -- | Get the size of a boxed text literal.
        ddcPrimSizeOfTextLit   : TextLit  -> Nat

        -- | Get a single byte from a boxed text literal.
        --   This is a byte rather than a character,
        --   as UTF-8 encoded characters can consist of multiple bytes.
        ddcPrimIndexTextLit    : TextLit  -> Nat -> Word8

where


-------------------------------------------------------------------------------
-- | Take a list of characters from a text string.
text_toList (tx: Text): List Char
 = private r with {Read r; Write r; Alloc r} in
   do   source  = textSource_fromText {@r} tx
        list    = textSource_pullList source
        list


-- | Take a list of words from a text string.
text_words (tx: Text): List Text
 = private r with {Read r; Write r; Alloc r} in
   do   source  = textSource_fromText {@r} tx
        words   = textSource_pullWords source
        words


-- | Take a list of lines from a text string.
text_lines (tx: Text): List Text
 = private r with {Read r; Write r; Alloc r} in
   do   source  = textSource_fromText {@r} tx
        lines   = textSource_pullLines source
        lines


-------------------------------------------------------------------------------
data TextChunk where
        TextChunkLit : TextLit -> TextChunk
        TextChunkVec : Vector# RegionText Word8 -> TextChunk


-- | Take the first chunk from a text rope by decending down the spine.
text_firstChunk (tx: Text): Maybe (TextChunk, Maybe Text)
 = case tx of
        TextLit lit     -> Just (TextChunkLit lit, Nothing)
        TextVec vec     -> Just (TextChunkVec vec, Nothing)
        TextApp t1 t2
         -> case text_firstChunk t1 of
                Nothing                 -> text_firstChunk t2
                Just (chunk, Nothing)   -> Just (chunk, Just t2)
                Just (chunk, Just t1')  -> Just (chunk, Just (TextApp t1' t2))


-- | Get the size of the chunk in bytes.
text_sizeOfChunk (txc: TextChunk): Nat
 = case txc of
        TextChunkLit lit     -> ddcPrimSizeOfTextLit lit
        TextChunkVec vec     -> vectorLength# vec - 1


-------------------------------------------------------------------------------
-- | A pull stream for text characters,
--   with a mutable internal state stored in region 'r'.
data TextSource (r: Region) where
        TextSource
         :  Ref r Nat           -- ^ Current position in stream.
         -> Ref r TextChunk     -- ^ Current chunk in the stream.
         -> Ref r Nat           -- ^ Current position in the chunk.
         -> Ref r (Maybe Text)  -- ^ Remaining text chunks.
         -> TextSource r


-- | Construct a new text source from the given text string.
textSource_fromText
        {@r: Region} (tx: Text)
        : S (Alloc r) (TextSource r)
 = case tx of
        TextLit lit
         -> textSource_fromChunk {@r} (TextChunkLit lit) Nothing

        TextVec vec
         -> textSource_fromChunk {@r} (TextChunkVec vec) Nothing

        TextApp t1 t2
         -> case text_firstChunk t1 of
                Nothing
                 -> textSource_fromText {@r} t2

                Just (chunk, mtxRest)
                 -> textSource_fromChunk {@r} chunk mtxRest


-- | Freeze a TextSource into a text object.
textSource_toText
        (source: TextSource r): S (Read r) Text
 | TextSource _ refChunk refIx refRest <- source
 = do   chunk   = readRef refChunk
        ix      = readRef refIx
        mRest   = readRef refRest
        size    = text_sizeOfChunk chunk
        nRemain = size - ix

        match
         | nRemain == 0
         = case mRest of
                Nothing         -> ""
                Just txRest     -> txRest

         | TextChunkLit lit <- chunk
         = do   vecNew
                 = extend RegionText using r1 with {Alloc r1; Write r1} in
                   do   -- Copy the remaining part of a chunk to a new vector.
                        vec'    = vectorAlloc# {@r1} (nRemain + 1)
                        copyTextLitToVector lit vec' 0 ix (ix + nRemain)

                        -- Write the trailing null byte.
                        vectorWrite# vec' nRemain 0w8
                        vec'

                -- Append whatever remaining chunks we had.
                case mRest of
                 Nothing        -> TextVec vecNew
                 Just txRest    -> TextApp (TextVec vecNew) txRest

         | TextChunkVec vec <- chunk
         = do   vecNew
                 = extend RegionText using r1 with {Alloc r1; Write r1} in
                   do   -- Copy the remaining part of the chunk to a new vector.
                        vec'   = vectorAlloc# {@r1} (nRemain + 1)
                        copyTextVecToVector vec vec' 0 ix (ix + nRemain)

                        -- Write the trailing null byte.
                        vectorWrite# vec' nRemain 0w8
                        vec'

                -- Append whatever remaining chunks we had.
                case mRest of
                 Nothing        -> TextVec vecNew
                 Just txRest    -> TextApp (TextVec vecNew) txRest


-- | Construct a new text source from the first chunk and the rest
--   of the stream.
textSource_fromChunk
        {@r: Region} (chunk: TextChunk) (txRest: Maybe Text)
        : S (Alloc r) (TextSource r)
 = do   refPos   = allocRef {@r} 0
        refChunk = allocRef {@r} chunk
        refIx    = allocRef {@r} 0
        refRest  = allocRef {@r} txRest
        TextSource refPos refChunk refIx refRest


-- | Get the current character position from the text source.
textSource_getPos (source: TextSource r): S (Read r) Nat
 | TextSource refPos _ _ _ <- source
 = readRef refPos


-- | Advance to the first character of the next chunk.
textSource_advanceChunk
        (source: TextSource r)
        : S (Read r + Write r) Bool
 | TextSource _ refChunk refIx refRest <- source
 , Just tx                      <- readRef refRest
 , Just (chunk', mtxRest')      <- text_firstChunk tx
 = do   writeRef refChunk chunk'
        writeRef refIx    0
        writeRef refRest  mtxRest'
        True

 | otherwise
 =      False


-- | Pull a single character from a text source.
textSource_pullChar
        (source: TextSource r)
        : S (Read r + Write r) (Maybe Char)
 | TextSource _ refChunk refIx refRest <- source
 = case readRef refChunk of
         TextChunkLit lit
          |  ix <- readRef refIx
          ,  ix <  ddcPrimSizeOfTextLit lit
          -> do writeRef refIx (ix + 1)
                Just (promote# (ddcPrimIndexTextLit lit ix))

         TextChunkVec vec
          |  ix <- readRef refIx
          ,  ix < vectorLength# vec - 1
          -> do writeRef refIx (ix + 1)
                Just (promote# (vectorRead# vec ix))

         _
          |  textSource_advanceChunk source
          -> textSource_pullChar source

          |  otherwise
          -> Nothing


-- | Peek at the next charater from the text source.
textSource_peekChar
        (source: TextSource r)
        : S (Read r + Write r) (Maybe Char)
 | TextSource _ refChunk refIx refRest <- source
 = case readRef refChunk of
        TextChunkLit lit
         |  ix <- readRef refIx
         ,  ix <  ddcPrimSizeOfTextLit lit
         -> Just (promote# (ddcPrimIndexTextLit lit ix))

        TextChunkVec vec
         |  ix <- readRef refIx
         ,  ix <  vectorLength# vec - 1
         -> Just (promote# (vectorRead# vec ix))

        _
         |  textSource_advanceChunk source
         -> textSource_pullChar source

         |  otherwise
         -> Nothing


-- | If the next character is the given one then consume it,
--   otherwise don't.
textSource_matchChar
        (source: TextSource r) (c: Char)
        : S (Read r + Write r) Bool
 | TextSource _ refChunk refIx refRest <- source
 = case readRef refChunk of
        TextChunkLit lit
         | ix   <- readRef refIx
         , ix   <  ddcPrimSizeOfTextLit lit
         , c'   <- promote# (ddcPrimIndexTextLit lit ix)
         -> if c == c'
             then do
                writeRef refIx (ix + 1)
                True
             else False

        TextChunkVec vec
         | ix   <- readRef refIx
         , ix   <  vectorLength# vec - 1
         , c'   <- promote# (vectorRead# vec ix)
         -> if c == c'
             then do
                writeRef refIx (ix + 1)
                True
             else False

        _
         |  textSource_advanceChunk source
         -> textSource_matchChar source c

         |  otherwise
         -> False


-- | Pull the entire list of characters from a text source.
textSource_pullList
        (source: TextSource r)
        : S (Read r + Write r) (List Char)
 = go ()
 where  go (_: Unit): S (Read r + Write r) (List Char)
         = case textSource_pullChar source of
                Nothing -> Nil
                Just c  -> Cons c (go ())


-------------------------------------------------------------------------------
-- | Pull a list of lines from a text source.
textSource_pullLines (source: TextSource r): S (Read r + Write r) (List Text)
 = go Nil
 where  go (acc: List Text): S (Read r + Write r) (List Text)
         = case textSource_pullLine source of
                Nothing -> reverse acc
                Just c  -> go (Cons c acc)


-- | Pull a single line from a text source.
textSource_pullLine  (source: TextSource r): S (Read r + Write r) (Maybe Text)
 = go Nil
 where  go (acc: List Char): S (Read r + Write r) (Maybe Text)
         = case textSource_pullChar source of
                Nothing
                 -> case acc of
                        Nil     -> Nothing
                        _       -> Just (textOfCharList (reverse acc))

                Just c
                 | c == '\n'    -> Just (textOfCharList (reverse acc))
                 | otherwise    -> go (Cons c acc)


-------------------------------------------------------------------------------
-- | Pull a list of words from a text source.
textSource_pullWords (source: TextSource r): S (Read r + Write r) (List Text)
 = go Nil
 where  go (acc: List Text): S (Read r + Write r) (List Text)
         = case textSource_pullWord source of
                Nothing -> reverse acc
                Just c  -> go (Cons c acc)


-- | Pull a single word from a text source.
textSource_pullWord  (source: TextSource r): S (Read r + Write r) (Maybe Text)
 = go Nil
 where  go (acc: List Char): S (Read r + Write r) (Maybe Text)
         = case textSource_pullChar source of
                Nothing
                 -> case acc of
                        Nil     -> Nothing
                        _       -> Just (textOfCharList (reverse acc))

                Just c
                 | isSpace c
                 -> case acc of
                        Nil     -> go Nil
                        _       -> Just (textOfCharList (reverse acc))
                 | otherwise    -> go (Cons c acc)

