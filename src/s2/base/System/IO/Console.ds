
module System.IO.Console
export
{       readl;
        write; writel; writell;
        print; printl; printll;
        flush;
}

export foreign c value
 ddcHookHandleTopLevel  : {@e: Effect} -> S e Unit -> S (e + Console) Unit

import Class.Show
import Data.Text
import Control.Exception

import foreign abstract type
 Console  : Effect

import foreign c value
 ddcPrimStdoutPutString : TextLit# -> S Console Void#
 ddcPrimStdoutPutVector : {@r: Region} -> Vector# r Word8# -> S Console Void#
 ddcPrimStdoutFlush     : Unit -> S Console Void#
 ddcPrimStdinGetVector  : {@r: Region} -> Nat# -> S Console (Vector# r Word8#)

import foreign c value
 -- Get the unboxed text literal from a boxed text literal.
 -- The unboxed version is a pointer to the text data in static memory.
 ddcPrimTakeTextLit   : TextLit -> TextLit#

where


-------------------------------------------------------------------------------
-- | Read a text string from the console, up to the maximum line length.
readl (maxLen: Nat): S Console Text
 = box TextVec (ddcPrimStdinGetVector maxLen)


-------------------------------------------------------------------------------
-- | Write text to the console.
write (tt: Text): S Console Unit
 = box case tt of
        TextLit lit
         -> do  ddcPrimStdoutPutString (ddcPrimTakeTextLit lit)
                ()

        TextVec vec
         -> do  ddcPrimStdoutPutVector vec
                ()

        TextApp t1 t2
         -> do  write t1
                write t2


-- | Write text to the console with a trailing newline.
writel  (tt: Text): S Console Unit
 = do   write tt
        write "\n"


-- | Write text to the console with two trailing newlines.
writell (tt: Text): S Console Unit
 = do   write tt
        write "\n\n"


-------------------------------------------------------------------------------
-- | Print a value to the console.
print {@a: Data} {Show a} (x: a): S Console Unit
 = write (show x)


-- | Print a value to the console with a trailing newline.
printl {@a: Data} {Show a} (x: a): S Console Unit
 = writel (show x)


-- | Print a value to the console with two trailing newlines.
printll {@a: Data} {Show a} (x: a): S Console Unit
 = writell (show x)


-------------------------------------------------------------------------------
-- | Flush the output.
flush: S Console Unit
 = box do
        ddcPrimStdoutFlush ()
        ()


-------------------------------------------------------------------------------
-- | Hook to handle exceptions that get propagated to top-level.
ddcHookHandleTopLevel (comp: S e Unit): S (e + Console) Unit
 =  try comp $ \ex
 -> case ex of
        ExceptionFail tx
         -> writel $ "*** Fail:"  %% tx

        ExceptionError tx
         -> writel $ "*** Error:" %% tx

        ExceptionSystemFile tx _
         -> writel $ "*** File IO Error:" %% tx

        ExceptionSystemSocket tx _
         -> writel $ "*** Socket IO Error:" %% tx

