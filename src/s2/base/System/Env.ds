
-- | Get command line arguments.
--
--   The executables produced by DDC accept both user-level and runtime
--   system arguments. We separate the user and runtime argument list
--   with the special +RTS flag, eg:
--
--   exe USER_ARG0 USER_ARG1 ... +RTS RUNTIME_ARG0 RUNTIME_ARG1 ...
--
module System.Env
export env_getExeName
       env_getArgs
       env_getRuntimeArgs

import Data.Text
import Data.Map.Fun

-- | Effect of accessing the environment.
import foreign abstract type
 Env : Effect

-- Primitive functions that access the environment.
import foreign c value
 ddcPrimEnvGetArgCount          : Unit -> S Env Nat#
 ddcPrimEnvGetArgVal            : Nat# -> S Env TextLit#

 ddcPrimEnvGetUserArgCount      : Unit -> S Env Nat#
 ddcPrimEnvGetUserArgVal        : Nat# -> S Env TextLit#

 ddcPrimEnvGetRuntimeArgCount   : Unit -> S Env Nat#
 ddcPrimEnvGetRuntimeArgVal     : Nat# -> S Env TextLit#

-- | Runtime operators for working with unboxed text literals.
import foreign c value
 -- | Make a text literal.
 --   The TextLit# type is a pointer to literal UTF-8 data in
 --   static memory, which we pack into a boxed object.
 ddcPrimMakeTextLit     : TextLit# -> TextLit

where


-- | Get the name of the current executable.
--   TODO: auto insert 'box' at top level.
env_getExeName: S Env Text
 = box do
        lit     = ddcPrimMakeTextLit (ddcPrimEnvGetArgVal 0)
        TextLit lit


-- | Get a map of command-line arguments.
env_getArgs: S Env (Map Fun Nat Text)
 = box do
        argc      = run ddcPrimEnvGetUserArgCount ()
        ixs       = generate argc id
        getArg ix = TextLit (ddcPrimMakeTextLit (ddcPrimEnvGetUserArgVal ix))
        mapFun_fromList $ zip ixs $ mapS getArg ixs


-- | Get a map of runtime system arguments.
env_getRuntimeArgs: S Env (Map Fun Nat Text)
 = box do
        argc      = run ddcPrimEnvGetRuntimeArgCount ()
        ixs       = generate argc id
        getArg ix = TextLit (ddcPrimMakeTextLit (ddcPrimEnvGetRuntimeArgVal ix))
        mapFun_fromList $ zip ixs $ mapS getArg ixs

