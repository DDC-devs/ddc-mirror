
module System.Env
export { env_getExeName; env_getArgs }
import Data.Text
import Data.Map.Fun

-- | Effect of accessing the environment.
import foreign abstract type
 Env : Effect


-- Primitive functions that access the environment.
import foreign c value
 ddcEnvGetArgC : Nat# -> S Env Nat#
 ddcEnvGetArgV : Nat# -> S Env TextLit#

-- | Runtime operators for working with unboxed text literals.
import foreign c value

        -- | Make a text literal.
        --   The TextLit# type is a pointer to literal UTF-8 data in
        --   static memory, which we pack into a boxed object.
        ddcPrimMakeTextLit     : TextLit# -> TextLit

where


-- | Get the name of the current executable.
--   TODO: auto insert 'box' at top level.
env_getExeName: S Env Text
 = box do
        lit     = ddcPrimMakeTextLit (ddcEnvGetArgV 0)
        TextLit lit


-- | Get a map of command-line arguments.
--   TODO: auto insert 'box' at top level.
env_getArgs: S Env (Map Fun Nat Text)
 = box do
        argc    = run ddcEnvGetArgC 0
        ixs     = generate (argc - 1) id

        mapFun_fromList
                $ zip ixs
                $ mapS (\ix -> TextLit (ddcPrimMakeTextLit (ddcEnvGetArgV (ix + 1)))) ixs

