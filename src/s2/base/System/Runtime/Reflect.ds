
module System.Runtime.Reflect
export  show_ValueFormat
        show_Value
        reflect_toValue
        reflect_formatOfValue

import Control.Exception
import System.IO.Console
import System.Runtime.Info
import Class.Show
import Data.Numeric
import Data.List
import Data.Text

import foreign abstract type
 -- Effect of reifying a pure value.
 Reify   : Effect

import foreign boxed type
 Value   : Data

-- Import primitive object functions from the runtime system.
--
-- Some of these need to be given different names as the Discus -> Salt
-- code generator also imports the same primitives, but at different types,
-- and we can't have the two imports conflicting in the generated Salt code.
--
import foreign c value
 -- Reification (cast a value to its generic representation)
 --   This has a Reify effect because reifying an anonymous functional
 --   value reveals the name of the supercombinator which was created at
 --   compile. This name changes depending on what other anonymous functions
 --   are in the surrounding code, so the form of the result 'Value'
 --   depends on context it was defined in.
 ddcPrimReifyValue      : {@a: Data} -> a     -> S Reify Value


 -- Reflection (cast a generic representation into a specific value)

 -- The unsafe version is used on boxed objects where we know from the
 -- info table that the value really has the desired type.
 ddcPrimReflectUnsafe   : {@a: Data} -> Value -> a

 -- These functions will all fail# at runtime if the value does not have
 -- the appropriate type.
 ddcPrimReflectUnit     : Value -> Unit
 ddcPrimReflectTextLit  : Value -> TextLit
 ddcPrimReflectBool     : Value -> Bool
 ddcPrimReflectNat      : Value -> Nat
 ddcPrimReflectInt      : Value -> Int
 ddcPrimReflectFloat32  : Value -> Float32
 ddcPrimReflectFloat64  : Value -> Float64
 ddcPrimReflectWord8    : Value -> Word8
 ddcPrimReflectWord16   : Value -> Word16
 ddcPrimReflectWord32   : Value -> Word32
 ddcPrimReflectWord64   : Value -> Word64
 ddcPrimReflectAddr     : Value -> Addr

 -- Raw Object Access.
 --   The generic 'Object' functions are safe to use on any sort of value,
 --   but the others do not check that the value is of the correct sort
 --   before attempting to read it, and will perform invalid memory
 --   accesses given a value of the wrong sort.
 --
 --   TODO: don't expose any runtime functions that can perform invalid
 --   memory accesses to the Source language, we should use versions
 --   that are guaranteed to check the object sort first.
 --
 ddcObjectFormat                                 : Value -> Nat
 ddcObjectInfoIndex_value  "ddcObjectInfoIndex"  : Value -> Word32

 ddcThunkParams_value      "ddcThunkParams"      : Value -> Nat
 ddcThunkBoxes_value       "ddcThunkBoxes"       : Value -> Nat
 ddcThunkArgs_value        "ddcThunkArgs"        : Value -> Nat
 ddcThunkRuns_value        "ddcThunkRuns"        : Value -> Nat
 ddcThunkGetField_value    "ddcThunkGetField"    : Value -> Nat -> Value

 ddcBoxedFields                                  : Value -> Nat
 ddcBoxedTag_value         "ddcBoxedTag"         : Value -> Nat
 ddcBoxedGetField_value    "ddcBoxedGetField"    : Value -> Nat -> Value

 ddcSmallPayloadSize_value "ddcSmallPayloadSize" : Value -> Nat

where

-------------------------------------------------------------------------------
data ValueFormat where
        -- | Format of a Thunk heap object.
        ValueFormatThunk
         :  Text        -- ^ Module name of super
         -> Text        -- ^ Name of super
         -> Nat         -- ^ Number of params.
         -> Nat         -- ^ Number of boxes.
         -> Nat         -- ^ Number of args.
         -> Nat         -- ^ Number of runs.
         -> ValueFormat

        -- | Format of a Boxed heap object.
        ValueFormatBoxed
         :  Text        -- ^ Module name of definition.
         -> Text        -- ^ Constructor name.
         -> Nat         -- ^ Data contructor tag.
         -> Nat         -- ^ Number of fields in object.
         -> ValueFormat

        -- | Format of an Array heap object.
        ValueFormatArray
         : ValueFormat

        -- | Format of a Raw heap object.
        ValueFormatRaw
         : ValueFormat

        -- | Format of a Small heap object.
        ValueFormatSmall
         :  Text        -- ^ Module name of definition ("Base" for builtin types)
         -> Text        -- ^ Contructor name ("Nat", Word16 etc for builtin types)
         -> Nat         -- ^ Size of payload.
         -> ValueFormat


show_ValueFormat: Show ValueFormat
 = Show reflect_showValueFormat

reflect_showValueFormat (f: ValueFormat): Text
 = case f of
        ValueFormatThunk txModule txName nParams nBoxes nArgs nRuns
         -> parens $ "THUNK"
         %%  "{ module =" %% show txModule % ", name ="  %% show txName
          %  ", params =" %% show nParams  % ", boxes =" %% show nBoxes
          %  ", args ="   %% show nArgs    % ", runs ="  %% show nRuns %  "}"

        ValueFormatBoxed txModule txCtor nTag nFields
         -> parens $ "BOXED"
         %%  "{module =" %% show txModule % ", ctor ="   %% show txCtor
          % ", tag ="    %% show nTag     % ", fields =" %% show nFields % "}"

        ValueFormatArray
         -> "ARRAY"

        ValueFormatRaw
         -> "RAW"

        ValueFormatSmall txModule txCtor nSize
         -> parens $ "SMALL"
         %%  "{module =" %% show txModule % ", ctor ="   %% show txCtor
          % ", size ="   %% show nSize    % "}"


-------------------------------------------------------------------------------
-- | Throw a reflection failure exception.
reflect_fail (tx: Text): a
 = ddcPrimExceptionThrow {@Pure} (ExceptionSystemReflect tx)


-------------------------------------------------------------------------------
-- | Reify the runtime representation of a value.
--
--   Operationally this is a no-op, but in the source language we assign it
--   an effectful type to track the fact that we're looking at the runtime
--   representation.
--
--   The representation may change when we recompile the program,
--   but it will not change at runtime after we have casted it to a generic
--   value.
--
reflect_toValue (x: a): S Reify Value
 = ddcPrimReifyValue x


-- | Get the runtime representation format of a value.
reflect_formatOfValue (v: Value): ValueFormat
 = case ddcObjectFormat v of
        2 -> do nParams  = ddcThunkParams_value v
                nBoxes   = ddcThunkBoxes_value  v
                nArgs    = ddcThunkArgs_value   v
                nRuns    = ddcThunkRuns_value   v
                aEntry   = info_lookup (ddcObjectInfoIndex_value v)
                txModule = info_getSuperModuleName aEntry
                txName   = info_getSuperName aEntry
                ValueFormatThunk txModule txName nParams nBoxes nArgs nRuns

        3 -> do nTag     = ddcBoxedTag_value v
                nFields  = ddcBoxedFields v
                aEntry   = info_lookup (ddcObjectInfoIndex_value v)
                txModule = info_getDataModuleName aEntry
                txCtor   = info_getDataName aEntry
                ValueFormatBoxed txModule txCtor nTag nFields

        4 -> ValueFormatRaw

        5 -> ValueFormatArray

        6 -> do nSize    = ddcSmallPayloadSize_value v
                infoIdx  = ddcObjectInfoIndex_value v
                aEntry   = info_lookup infoIdx
                txModule = info_getDataModuleName aEntry
                txCtor   = info_getDataName aEntry
                ValueFormatSmall txModule txCtor nSize

        _ -> reflect_fail "formatOfValue"


-------------------------------------------------------------------------------
-- | Show dictionary for a Value.
show_Value: Show Value
 = Show reflect_showValue

-- | Show a generic Value.
--   Values build via the info table mechanism have enough information
--   to print them out in a human readable way.
---
--   The info table indices are magic numbers defined in Info.dcs of the
--   runtime system.
--
reflect_showValue (v: Value): Text
 = let fmt = reflect_formatOfValue v
   in  case fmt of
        -- Thunks -----------------------------------------
        -- TODO: wrong number of args not detected,
        -- during dev had left off txModule, txName and got segfault.
        ValueFormatThunk txModuleName txName nParams nBoxes nArgs nRuns
         | nArgs == 0
         -> txModuleName % "." % txName

         | otherwise
         -> parens
          $ txModuleName % "." % txName
          % foldl pastes ""
                (map (\n -> reflect_showValue (ddcThunkGetField_value v n))
                     (generate nArgs id))


        -- Boxed ------------------------------------------
        -- Boxed algebraic data values.
        ValueFormatBoxed txModuleName txName nTag nFields
         | nFields == 0
         -> case ddcObjectInfoIndex_value v of
                1w32    -> show (ddcPrimReflectUnit v)
                _       -> txModuleName % "." % txName

         -- Pretty print text literals as plain strings.
         --   The match against the tag depends on the constructors in the Text
         --   data type definition being in the correct order.
         | txModuleName  == "Data.Text.Base"
         , txName        == "TextLit"
         , nTag          == 0
         , nFields       == 1
         -> show $ TextLit (ddcPrimReflectTextLit (ddcBoxedGetField_value v 0))

         -- Pretty print text vectors as plain strings,
         --   Not revealing the vector constructor as we usually don't want it.
         --   If you want to see it then show the ValueFormat directly.
         --   CAREFUL: The match against the tag depends on the constructors in
         --   the Text data type definition being their specific order.
         | txModuleName  == "Data.Text.Base"
         , txName        == "TextVec"
         , nTag          == 1
         , nFields       == 1
         -> show $ ddcPrimReflectUnsafe {@Text} v

         -- Pretty print text applications as plain strings,
         --   Not revealing the application constructor as we usually don't want it.
         --   If you want to see it then show the ValueFormat directly.
         --   CAREFUL: The match against the tag depends on the constructors in
         --   the Text data type definition being their specific order.
         | txModuleName  == "Data.Text.Base"
         , txName        == "TextApp"
         , nTag          == 2
         , nFields       == 2
         -> show $ ddcPrimReflectUnsafe {@Text} v

         |  otherwise
         -> parens
          $ txModuleName % "." % txName
          % foldl pastes ""
                (map (\n -> reflect_showValue (ddcBoxedGetField_value v n))
                     (generate nFields id))

        -- Raw --------------------------------------------
        ValueFormatRaw
         -> "RAW"

        -- Array ------------------------------------------
        ValueFormatArray
         -> "ARRAY"

        -- Small ------------------------------------------
        -- Reflect a generic value back into a object level one
        -- so that we can use the normal show function. The info table
        -- indices used here are defined by 'ddcInfoInitStatic' in the
        -- runtime system.
        ValueFormatSmall nModule nCtor nSize
         -> case ddcObjectInfoIndex_value v of
                1w32    -> show (ddcPrimReflectUnit    v)
                3w32    -> show (ddcPrimReflectBool    v)
                4w32    -> show (ddcPrimReflectNat     v)
                5w32    -> show (ddcPrimReflectInt     v)
                7w32    -> show (ddcPrimReflectWord8   v)
                8w32    -> show (ddcPrimReflectWord16  v)
                9w32    -> show (ddcPrimReflectWord32  v)
                10w32   -> show (ddcPrimReflectWord64  v)
                11w32   -> show (ddcPrimReflectFloat32 v)
                12w32   -> show (ddcPrimReflectFloat64 v)
                13w32   -> show (ddcPrimReflectAddr    v)
                _       -> show fmt

