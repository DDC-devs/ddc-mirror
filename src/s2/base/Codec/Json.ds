
module Codec.Json
export {
        parseJson;
        show_Json;
        show_JsonParseError;
        show_JsonParseContext;
}
import Class.Show
import Data.Text
where


---------------------------------------------------------------------------------------------------
data Json where
        JsonNull        : Json
        JsonBool        : Bool                  -> Json
        JsonString      : Text                  -> Json
        JsonNumber      : Float64               -> Json
        JsonList        : List Json             -> Json
        JsonObject      : List (Text, Json)     -> Json


---------------------------------------------------------------------------------------------------
show_Json: Show Json
 = Show sh
 where
        sh (jj: Json): Text
         = case jj of
                JsonNull        -> "null"
                JsonBool True   -> "true"
                JsonBool False  -> "false"

                -- TODO: excape this as required by JSON spec.
                JsonString str  -> show str

                JsonNumber num  -> show num
                JsonList   xs   -> "[" % showElems  xs % "]"
                JsonObject fs   -> "{" % showFields fs % "}"

        showElems   Nil                 = ""
        showElems  (Cons e Nil)         = sh e
        showElems  (Cons e es)          = sh e % "," % showElems es

        -- TODO: excape chars in label.
        showFields  Nil                 = ""
        showFields (Cons (l, e) Nil)    = show l % ":" % sh e
        showFields (Cons (l, e) es)     = show l % ":" % sh e % "," % showFields es


---------------------------------------------------------------------------------------------------
-- | Things that can go wrong when parsing JSON.
data JsonParseError where

        JsonParseEnd
         : JsonParseContext -> JsonParseError

        JsonParsePos
         : Nat -> JsonParseContext -> JsonParseError


-- | Context in which a parse error can occur.
data JsonParseContext where
        JsonParseValue   : JsonParseContext
        JsonParseObject  : JsonParseContext
        JsonParseList    : JsonParseContext
        JsonParseField   : JsonParseContext
        JsonParseString  : JsonParseContext
        JsonParseKeyword : JsonParseContext
        JsonParseNumber  : JsonParseContext


show_JsonParseError: Show JsonParseError
 = Show sh
 where sh (err: JsonParseError): Text
        = case err of
                JsonParseEnd ctx
                 -> parens $ "JsonParseEnd" %% show ctx

                JsonParsePos pos ctx
                 -> parens $ "JsonParsePos" %% show pos %% show ctx


show_JsonParseContext: Show JsonParseContext
 = Show sh
 where sh (ctx: JsonParseContext): Text
        = case ctx of
                JsonParseValue   -> "JsonParseValue"
                JsonParseObject  -> "JsonParseObject"
                JsonParseList    -> "JsonParseList"
                JsonParseField   -> "JsonParseField"
                JsonParseString  -> "JsonParseString"
                JsonParseKeyword -> "JsonParseKeyword"
                JsonParseNumber  -> "JsonParseNumber"


---------------------------------------------------------------------------------------------------
parseJson (tx: Text): Either JsonParseError Json
 = private r with { Read r; Write r; Alloc r} in
   do   source  = textSource_fromText {@r} tx
        refErr  = allocRef {@r} Nil
        state   = JsonState source refErr
        case pullJsonValue state of
         Just v  -> Right v
         Nothing -> Left $ JsonParsePos 0 JsonParseValue


---------------------------------------------------------------------------------------------------
data JsonState (r: Region) where
        JsonState
         :  TextSource r
         -> Ref r (List JsonParseError)
         -> JsonState r

pullChar  (state: JsonState r)
        : S (Read r + Write r) (Maybe Char)
 | JsonState source _ <- state
 = textSource_pullChar source

peekChar  (state: JsonState r)
        : S (Read r + Write r) (Maybe Char)
 | JsonState source _ <- state
 = textSource_peekChar source

matchChar (c: Char) (state: JsonState r)
        : S (Read r + Write r) Bool
 | JsonState source _ <- state
 = textSource_matchChar source c

pushError (state: JsonState r) (err: JsonParseError)
        : S (Read r + Write r) Unit
 | JsonState _ refErrs   <- state
 = do   errs    = readRef refErrs
        writeRef refErrs errs


---------------------------------------------------------------------------------------------------
pullJsonValue (state: JsonState r)
        : S (Read r + Write r) (Maybe Json)
 = case peekChar state of
        Just c
         | (isDigit c ∧ c /= '0') ∨ c == '-'
         -> pullJsonNumber state

         | c == 'n'     -> matchKeyword (charListOfText "null")  state JsonNull
         | c == 'f'     -> matchKeyword (charListOfText "false") state (JsonBool False)
         | c == 't'     -> matchKeyword (charListOfText "true")  state (JsonBool True)
         | c == '"'     -> pullJsonString state
         | c == '['     -> pullJsonList state
         | c == '{'     -> pullJsonObject state


        _ -> Nothing


---------------------------------------------------------------------------------------------------
-- | Match a keyword from the source stream.
matchKeyword (cc: List Char) (state: JsonState r) (v: Json)
        : S (Read r + Write r) (Maybe Json)
 = case cc of
        Nil
          -> Just v

        Cons c cs
          |  matchChar    c  state
          -> matchKeyword cs state v

        _ -> do pushError state $ JsonParsePos 0 JsonParseKeyword
                Nothing


---------------------------------------------------------------------------------------------------
pullJsonNumber (state: JsonState r)
        : S (Read r + Write r) (Maybe Json)
 | Just c       <- pullChar state
 = match
        | isDigit c ∧ c /= '0'
        , Just cs <- takeDigits state
        , Just f  <- parseFloat64 (textOfCharList (Cons c cs))
        = Just (JsonNumber f)

        | c == '-'
        , Just cs <- takeDigits state
        , Just f  <- parseFloat64 (textOfCharList (Cons c cs))
        = Just (JsonNumber f)

        | otherwise
        = do    pushError state $ JsonParsePos 0 JsonParseNumber
                Nothing


-- | Take a list of digit characters from the source stream.
takeDigits (state: JsonState r)
        : S (Read r + Write r) (Maybe (List Char))
 | Just c  <- peekChar state
 = case isDigit c of
        False                   -> Just Nil
        True
         | Just _ <- pullChar state
         -> case takeDigits state of
                Nothing         -> Just (Cons c Nil)
                Just cs         -> Just (Cons c cs)

 | otherwise
 = Nothing


---------------------------------------------------------------------------------------------------
-- | Pull a JSON string from the source.
pullJsonString (state: JsonState r)
        : S (Read r + Write r) (Maybe Json)
 | Just tx      <- pullString state
 = Just (JsonString tx)

 | otherwise
 = do   pushError state $ JsonParsePos 0 JsonParseString
        Nothing


-- | Pull a quoted string from the source.
pullString (state: JsonState r)
        : S (Read r + Write r) (Maybe Text)
 | matchChar '"' state
 , Just cs      <- takeStringChars state
 , matchChar '"' state
 = Just (textOfCharList cs)

 | otherwise
 = do   pushError state $ JsonParsePos 0 JsonParseString
        Nothing


-- | Take string characters from the source, not including the final '"' char.
-- TODO: handle escape characters.
takeStringChars (state: JsonState r)
        : S (Read r + Write r) (Maybe (List Char))
 | Just c <- peekChar state
 = match
        | c == '"'      = Just Nil

        | Just _        <- pullChar state
        , Just cs       <- takeStringChars state
        = Just (Cons c cs)

        | otherwise
        = do    pushError state $ JsonParsePos 0 JsonParseString
                Just Nil


---------------------------------------------------------------------------------------------------
-- | Pull a JSON list from the source.
pullJsonList (state: JsonState r)
        : S (Read r + Write r) (Maybe Json)
 | matchChar '[' state
 , Just es <- takeListElems state
 , matchChar ']' state
 = Just (JsonList es)

 | otherwise
 = do   pushError state $ JsonParsePos 0 JsonParseList
        Nothing


-- | Take JSON list elements from the source, not including the final ']' char.
takeListElems (state: JsonState r)
        : S (Read r + Write r) (Maybe (List Json))
 | Just c  <- peekChar state
 = match
        | c == ']'      =  Just Nil

        | Just e        <- pullJsonValue state
        , Just c'       <- peekChar state
        = match
                | c' == ','
                , Just _        <- pullChar state
                , Just es       <- takeListElems state
                = Just (Cons e es)

                | c' == ']'
                = Just (Cons e Nil)

                | otherwise
                = do    pushError state $ JsonParsePos 0 JsonParseList
                        Nothing

        | otherwise
        = do    pushError state $ JsonParsePos 0 JsonParseList
                Nothing


---------------------------------------------------------------------------------------------------
-- | Pull a JSON object from the source.
pullJsonObject (state: JsonState r)
        : S (Read r + Write r) (Maybe Json)
 | matchChar '{' state
 , Just fs      <- takeFields state
 , matchChar '}' state
 = Just (JsonObject fs)

 | otherwise
 = do   pushError state $ JsonParsePos 0 JsonParseObject
        Nothing


-- | Take JSON object fields from the source, not including the final '}' char.
takeFields (state: JsonState r)
        : S (Read r + Write r) (Maybe (List (Text, Json)))
 | Just c       <- peekChar state
 = match
        | c == '}'      = Just Nil

        | Just f        <- pullField state
        , Just c'       <- peekChar state
        = match
                | c' == ','
                , Just _        <- pullChar state
                , Just fs       <- takeFields state
                = Just (Cons f fs)

                | c' == '}'
                = Just (Cons f Nil)

                | otherwise
                = do    pushError state $ JsonParsePos 0 JsonParseObject
                        Nothing

        | otherwise
        = do    pushError state $ JsonParsePos 0 JsonParseObject
                Nothing


-- | Pull a single object field from the source.
pullField (state: JsonState r)
        : S (Read r + Write r) (Maybe (Text, Json))
 | Just f       <- pullString state
 , matchChar ':' state
 , Just v       <- pullJsonValue state
 = Just (f, v)

 | otherwise
 = do   pushError state $ JsonParsePos 0 JsonParseField
        Nothing

