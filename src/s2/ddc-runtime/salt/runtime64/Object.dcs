
-- | Primitives for constructing and destructing 64-bit heap objects.
--
--   Object header
--   ~~~~~~~~~~~~~
--
--   The DDC runtime uses five sorts of objects.
--     1) Thunk: Represents a partially applied super combinator.
--     2) Boxed: An object with pointers to up to 2^24-1  other boxed objects.
--     3) Array: An object with pointers to up to 2^32-1 other boxed objects.
--     4) Raw:   An object containing up to (2^32-1-8) raw non-pointer bytes.
--     5) Small: An object containing up to 4 raw non-pointer bytes.
--
--   All objects start with a 64-bit object  header that includes a format
--   descriptor byte and an index into the object info table. The header
--   contains all information needed to compute the size of the object.
--
--   TODO: Array object type isn't implemented yet.
--   We want a 16 bit tag field for Boxed, and to use Array for boxed arrays.
--
--     1) Thunk    field:  | params   args  boxes  runs | info  format |
--                  bits:  |     8      8       8     8 |   24       8 |
--
--     2) Boxed    field:  |                arity   tag | info  format |
--                  bits:  |                   24     8 |   24       8 |
--
--     3) Array    field:  |                  ptr-count | info  format |
--                  bits:  |                         32 |   24       8 |
--
--     4) Raw      field:  |             obj-size-bytes | info  format |
--                  bits:  |                         32 |   24       8 |
--
--     5) Small    field:  |                       data | info  format |
--                  bits:  |                         32 |   24       8 |
--
--   Format field
--   ~~~~~~~~~~~~
--
--   bit     7  6  5  4  3  2  1  0
--
--           X  X  X  X  X  0  0  0  -- Forward
--           X  0  0  1  X  X  0  1  -- Thunk
--           X  0  1  0  X  X  0  1  -- Boxed
--           X  0  1  1  X  X  0  1  -- Raw
--           X  1  0  0  X  X  0  1  -- Array
--           -- size --  X  X  1  1  -- Small
--
--           X  X  X  X  a  X  X  X  -- Anchor flag
--
--   Compact Region
--     The 7th bit of the flag is used for the compact region
--     if the flag is set, the garbage collector will stop tracing the object
--     and assume any reference from it will keep live.
--   Data GC Forwarding / Broken-Heart pointers.
--     During garbage collection, after the GC copies an object to the
--     "to-space" its header in the "from-space" is overwritten with a pointer
--     to where the "to-space" version of the object is. We can identify these
--     pointers because their lowest 3 bits are always 000. This is because
--     objects in the heap are always 8-byte aligned. For all other values of
--     the format field, we ensure the lowest three bits are not 000.
--
--   Data Anchor flag
--     If bit 3 in the format field is set then the GC is not permitted to move
--     the object. This is useful when the object has been allocated by malloc
--     and exists outside the DDC runtime's garbage collected heap.
--
--     The -obj- (object mode) portion of the format field can be used to
--     determine if the object is a forwarding pointer, has a fixed value for
--     its format field, or is a Small object.
--
module Runtime.Object

export foreign c value
 -- Object information.
 ddcObjectHeader        : [r: Region].     Ptr# r Obj -> Word64#
 ddcObjectFormat        : [r: Region].     Ptr# r Obj -> Nat#
 ddcObjectSize          : [r: Region].     Ptr# r Obj -> Nat#
 ddcObjectSizeMinimum   : [r: Region].     Ptr# r Obj -> Nat#
 ddcObjectIsAnchored    : [r: Region].     Ptr# r Obj -> Bool#
 ddcObjectInfoIndex     : [r: Region].     Ptr# r Obj -> Word32#

 ddcForwardRead         : [r1 r2: Region]. Ptr# r1 Obj -> Ptr# r2 Obj
 ddcForwardWrite        : [r1 r2: Region]. Ptr# r1 Obj -> Ptr# r2 Obj -> Void#

 -- Thunk initialization.
 ddcThunkAlloc          : [r1:    Region]. Addr# -> Nat# -> Nat# -> Nat# -> Nat# -> Ptr# r1 Obj
 ddcThunkCopy           : [r1 r2: Region]. Ptr# r1 Obj -> Ptr# r2 Obj -> Nat# -> Nat# -> Ptr# r2 Obj
 ddcThunkExtend         : [r1 r2: Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj

 ddcThunkFun            : [r1:    Region]. Ptr# r1 Obj -> Addr#
 ddcThunkParams         : [r1:    Region]. Ptr# r1 Obj -> Nat#
 ddcThunkBoxes          : [r1:    Region]. Ptr# r1 Obj -> Nat#
 ddcThunkArgs           : [r1:    Region]. Ptr# r1 Obj -> Nat#
 ddcThunkRuns           : [r1:    Region]. Ptr# r1 Obj -> Nat#

 ddcThunkSetField       : [r1 r2: Region]. Ptr# r1 Obj -> Nat# -> Nat# -> Ptr# r2 Obj -> Void#
 ddcThunkGetField       : [r1 r2: Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj

 -- Objects with just pointers to boxed things.
 ddcBoxedAlloc          : [r1:    Region]. Tag# -> Word32# -> Nat# -> Ptr# r1 Obj
 ddcBoxedSize           : [r1:    Region]. Ptr# r1 Obj -> Nat#
 ddcBoxedFields         : [r1:    Region]. Ptr# r1 Obj -> Nat#
 ddcBoxedTag            : [r1:    Region]. Ptr# r1 Obj -> Tag#
 ddcBoxedGetField       : [r1 r2: Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj
 ddcBoxedSetField       : [r1 r2: Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj -> Void#

 -- Objects containing raw non-pointer data.
 ddcRawAlloc            : [r1:    Region]. Tag# -> Nat# -> Ptr# r1 Obj
 ddcRawPayload          : [r1:    Region]. Ptr# r1 Obj -> Ptr# r1 Word8#
 ddcRawPayloadSize      : [r1:    Region]. Ptr# r1 Obj -> Nat#

 -- Objects with small, raw non-pointer data.
 ddcSmallAlloc          : [r1:    Region]. Word32# -> Nat# -> Ptr# r1 Obj
 ddcSmallPayload        : [r1:    Region]. Ptr# r1 Obj -> Ptr# r1 Word8#
 ddcSmallPayloadSize    : [r1:    Region]. Ptr# r1 Obj -> Nat#

import foreign c value
 ddcAllocCollect        : Nat# -> Unit

 ddcPrimStderrPutString : TextLit# -> Void#
 ddcPrimStderrPutNat    : Nat# -> Void#
 ddcPrimShowNat         : Nat#  -> TextLit#
 ddcPrimShowWord32      : Word32#  -> TextLit#

with letrec


-- Object ---------------------------------------------------------------------
-- | Get the header bits of an object.
ddcObjectHeader [r: Region] (obj: Ptr# r Obj): Word64#
 =      peek# (castPtr# obj)


-- | Get the format of an object as an enumeration value.
--   TODO: redo the enum values to avoid the inner case-expression.
--
--      Unknown      = 0#
--      Forward      = 1#
--      Thunk        = 2#
--      Boxed        = 3#
--      Raw          = 4#
--      Array        = 5#
--      Small        = 6#
--
ddcObjectFormat [r: Region] (obj: Ptr# r Obj) : Nat#
 = do   -- Get the format byte from the header.
        fmt8    = truncate# [Word8#] (peek# [r] [Word64#] (castPtr# obj))

        -- The low two bits tell us how to interpret the
        -- rest of the header word.
        case band# fmt8 0b11w8# of

          -- Small object with size encoded in header word,
          -- this is the most common case so comes first.
          0b11w8#             -> 6# -- Small

          -- Object with format set by second nibble of header word.
          0b01w8#
           -> case band# fmt8 0b01110000w8# of
                0b00010000w8# -> 2# -- Thunk
                0b00100000w8# -> 3# -- Boxed
                0b00110000w8# -> 4# -- Raw
                0b01000000w8# -> 5# -- Array
                _             -> 0# -- Unknown

          -- Forwarding pointers point to 8-byte aligned objects,
          -- so the lowest three bits are always zero.
          0b000w8#            -> 1# -- Forward

          -- Some unknown object.
          _                   -> 0# -- Unknown


--| Get the size of an object.
ddcObjectSize [r: Region] (obj: Ptr# r Obj): Nat#
 = case ddcObjectFormat obj of
    2# -> ddcThunkSize  obj
    3# -> ddcBoxedSize  obj
    4# -> ddcRawSize    obj
    6# -> ddcSmallSize  obj
    _  -> do ddcFailObject obj "ddcSizeOfObject"# "unrecognized object"#
             0#


-- | Get the header size of an object, in bytes.
--   This is the minimum size an object of that format could be.
--
--   This function only reads the first 64-bit word of the object,
--   which contains the format field, and can determine the header length
--   based on just this word. As it does not need to read any other fields,
--   this function can be used as the first step in validating a possibly
--   corrupted object.
--
ddcObjectSizeMinimum [r: Region] (obj: Ptr# r Obj): Nat#
 = case ddcObjectFormat obj of
    2# -> 16#   -- Thunk  (64-bit header + 64-bit function pointer)
    3# -> 8#    -- Boxed  (64-bit header)
    4# -> 8#    -- Raw    (64-bit header)
    6# -> 8#    -- Small  (64-bit header with embedded data)
    _  -> do ddcFailObject obj "ddcHeaderSizeOfObject"# "unrecognized object"#
             0#


-- | Check if an object is anchored. Anchored objects are allocated outside of
--   the DDC heap and will be left alone by the garbage collector.
ddcObjectIsAnchored [r: Region] (obj: Ptr# r Obj): Bool#
 = do   -- Get the format byte from the header.
        fmt8    = truncate# [Word8#] [Word64#] (peek# (castPtr# obj))

        -- Bit 3 tells us if the object is anchored.
        case band# fmt8 0b1000w8# of
          0b1000w8# -> True#
          _         -> False#


-- | Get the info table index of an object.
ddcObjectInfoIndex [r: Region] (obj: Ptr# r Obj): Word32#
 = do   header  = peek# [r] [Word64#] (castPtr# obj)
        band# (truncate# [Word32#] (shr# header 8w64#)) 0x0ffffffw32#


-- Forwarding Pointers --------------------------------------------------------
--   When an object is moved from the 'from' space to the 'to' space,
--   its header is overwritten with a forwarding pointer (aka broken heart)
--   to its new location.
--
--   This forwarding pointer is written over the 64-bit header of the object in
--   the from space. As heap objects are always 8 byte aligned, the lowest three
--   bits of the pointer are zero, and we use this to distinguish forwarding
--   pointers from regular objects.

-- | Reads a forwarding pointer from an overwritten heap object.
ddcForwardRead
        [r1 r2 : Region]
        (obj   : Ptr# r1 Obj)
        : Ptr# r2 Obj
 =      read# (takePtr# obj) 0#


-- | Replaces a heap object with a forwarding pointer to its new location.
ddcForwardWrite
        [r1 r2  : Region]
        (obj    : Ptr# r1 Obj)
        (newObj : Ptr# r2 Obj)
        : Void#
 =      write# (takePtr# obj) 0# newObj


-- Thunk ----------------------------------------------------------------------
-- | Allocate a Thunk
--   The payload contains a code pointer to the top-level supercombinator,
--   along with pointers to any available arguments. The actual pointer values
--   for the arguments are undefined.
--
--   Note that unlike the GHC runtime we don't use a separate PAP
--   (Partial Application) object type to store partially applied arguments.
--   To perform a partial application we just create a new Thunk, copy the old
--   arguments into it, and write the extra partially applied arguments into
--   the new thunk. This is done to keep the implementation complexity down,
--   and we haven't performed any concrete performance comparisons between the
--   two approaches.
--
--   For the GHC approach see:
--    How to make a fast curry, push/enter vs eval apply.
--    Simon Marlow and Simon Peyton Jones.
--    Journal of Functional Programming, 2006.
--
--   A thunk wraps a top-level super of the following form:
--    f = /\a1 .. /\an. \x1 .. \xn. box .. box. body
--
--   The type   parameters a1 .. an are not represented at runtime.
--
--   The value  parameters x1 .. xn are counted in the boxes field.
--    We need to collect this many applied arguments in the thunk before
--    we can call the super.
--
--   The boxes  box .. box are counted in the boxes field of the thunk.
--    We need to run the thunk this many times before calling the super.
--    the expression 'box body' is equivalent to (\(_ : Void#). body),
--    and running it eliminates the outer lambda.
--
--   Header Word
--   ~~~~~~~~~~~
--    field:  | params   args  boxes  runs | info  format |
--     bits:  |      8      8      8     8 |   24       8 |
--    offset: |     56     48     40    32 |    8       0 |
--
--   Format Byte
---  ~~~~~~~~~~~
--   0  0  0  1  X  X  0  1
--
--   Object Layout
--   ~~~~~~~~~~~~~
--   typedef struct
--   {   uint8_t   params;        // Value parameters of super.
--       uint8_t   args;          // Available arguments.
--       uint8_t   boxes;         // Number of runs required.
--       uint8_t   runs;          // Number of times we've been run so far.
--       uint32_t  infoFormat;    // Info table index and format field.
--       Fun*      fun;           // Function pointer.
--       Obj*      payload[];     // Pointers to available arguments.
--   } Thunk;
--
ddcThunkAlloc
        [r: Region]
        (aFun:   Addr#)
        (params: Nat#) (boxes: Nat#) (args:   Nat#) (runs:  Nat#)
        : Ptr# r Obj
 = do
        -- Size of the object we need to allocate.
        bytesObj
         =  (add# (size# [Word64#])              -- Header word.
            (add# (size# [Addr#])                -- Function pointer.
                  (shl# args (size2# [Addr#])))) -- Argument pointers.

        -- Check there is enough heap space, or force a GC if there is not.
        (case check# bytesObj of
          True#  -> ()
          False# -> ddcAllocCollect bytesObj)

        -- Alloc and zero the whole object.
        --   The Salt code generator does not guarantee that allocations
        --   will not be performed before the argument pointers have been
        --   written, so the pointer fields in the half constructed object
        --   need to be zeroed to prevent the GC from tracing them.
        addr    = alloc# bytesObj
        set# addr 0w8# bytesObj

        -- Write the header word
        write# addr 0#
           (bor# (shl# (promote# [Word64#] params) 56w64#)
           (bor# (shl# (promote# [Word64#] args)   48w64#)
           (bor# (shl# (promote# [Word64#] boxes)  40w64#)
           (bor# (shl# (promote# [Word64#] runs)   32w64#)
                 0b00010001w64#))))

        -- Write the function pointer
        write# addr 8# aFun

        -- Return pointer to the new object.
        makePtr# addr


-- | Determine the total size of a thunk.
ddcThunkSize [r: Region] (obj: Ptr# r Obj): Nat#
 =      ddcThunkSizeFromArgs (ddcThunkArgs obj)


-- | Determine the total size of a thunk, given the number of arguments it has.
ddcThunkSizeFromArgs (args: Nat#): Nat#
 =      (add# (size# [Word64#])              -- Header word.
        (add# (size# [Addr#])                -- Function pointers.
              (shl# args (size2# [Addr#])))) -- Argument pointers.


-- | Copy the available arguments from one thunk to another.
ddcThunkCopy
        [rSrc rDst: Region]
        (src: Ptr# rSrc Obj) (dst: Ptr# rDst Obj)
        (index: Nat#)        (len: Nat#)
        : Ptr# rDst Obj
 = case ge# index len of
        True#   -> dst
        False#
         -> do  ptr = ddcThunkGetField [rSrc] [rSrc] src index
                ddcThunkSetField dst 0#  index ptr
                ddcThunkCopy src dst (add# index 1#) len


-- | Copy a thunk while extending the number of available argument slots.
--   This is used when implementing both the curryN# and applyN# core primops.
ddcThunkExtend
        [rSrc rDst: Region]
        (pSrc: Ptr# rSrc Obj) (more: Nat#)
        : Ptr# rDst Obj
 = do
        sSrc    = allocSlot# [rSrc]

        -- Function pointer and arity of that function.
        -- TODO: flatten this code out so we only read the header word once.
        fun     = ddcThunkFun    pSrc
        params  = ddcThunkParams pSrc
        boxes   = ddcThunkBoxes  pSrc

        -- Available arguments in source and destination.
        args    = ddcThunkArgs   pSrc
        args'   = add# args      more

        -- Number of times the thunk has been run
        runs    = ddcThunkRuns   pSrc

        -- Function pointer.
        aFun    = ddcThunkFun pSrc

        -- Allocate a new thunk with the orignal function and arity,
        --  holding the source pointer in a slot over the allocation.
        poke# sSrc pSrc
        pDst    = ddcThunkAlloc [rDst] aFun params boxes args' runs
        pSrc'   = peek# sSrc

        -- Copy argument pointers from the source into the new thunk.
        ddcThunkCopy pSrc' pDst 0# args


-- | Get the arity of the function in a thunk.
ddcThunkParams  [r: Region] (obj: Ptr# r Obj): Nat#
 = do   header64    = read# [Word64#] (takePtr# obj) 0#
        promote# (band# (shr# header64 56w64#) 0xffw64#)


-- | Get the count of available arguments in a thunk.
ddcThunkArgs    [r: Region] (obj: Ptr# r Obj): Nat#
 = do   header64    = read# [Word64#] (takePtr# obj) 0#
        promote# (band# (shr# header64 48w64#) 0xffw64#)


-- | Get the count of available arguments in a thunk.
ddcThunkBoxes   [r: Region] (obj: Ptr# r Obj): Nat#
 = do   header64    = read# [Word64#] (takePtr# obj) 0#
        promote# (band# (shr# header64 40w64#) 0xffw64#)


-- | Get the count of available arguments in a thunk.
ddcThunkRuns    [r: Region] (obj: Ptr# r Obj): Nat#
 = do   header64    = read# [Word64#] (takePtr# obj) 0#
        promote# (band# (shr# header64 32w64#) 0xffw64#)


-- | Get the function pointer from a thunk.
ddcThunkFun     [r: Region] (obj: Ptr# r Obj): Addr#
 =      read# [Addr#] (takePtr# obj) 8#


-- | Set one of the pointers in a thunk.
--   The value is just a plain Addr# because we don't know what region the
--   original pointer in the Thunk was pointing to. Also, when setting these
--   pointers for the first time the pointer values in the thunk are undefined.
--   This takes a 'base' and 'offset' parameter separately to allow for easier
--   code generation.
ddcThunkSetField
        [r1 r2: Region]
        (obj: Ptr# r1 Obj) (base: Nat#) (offset: Nat#) (val: Ptr# r2 Obj): Void#
 =      write# (takePtr# obj)
               (add# 16# (shl# (add# base offset) (size2# [Addr#])))
               (takePtr# val)


-- | Get one of the arguments from a thunk.
ddcThunkGetField
        [r1 r2: Region]
        (obj:   Ptr# r1 Obj) (index: Nat#): Ptr# r2 Obj
 =      read#  (takePtr# obj)
               (add# 16# (shl# index (size2# [Addr#])))


-- Boxed ----------------------------------------------------------------------
-- | Allocate a Boxed Data Object.
--   The payload contains pointers to other heap objects.
--
--   Header Word
--   ~~~~~~~~~~~
--    field:  |  arity   tag | info  format |
--     bits:  |     24     8 |   24       8 |
--   offset:  |     40    32 |    8       0 |
--
--   Format Byte
--   ~~~~~~~~~~~
--   0  0  1  0  X  X  0  1
--
--   Object Layout
--   ~~~~~~~~~~~~~
--   typedef struct
--   {    uint24_t  arity;        // Number of fields in the payload.
--        uint16_t  tag;          // Constructor tag and format field.
--        uint32_t  infoFormat;   // Info table index and format field.
--        Obj*      payload[];
--   } ObjBoxed;
--
ddcBoxedAlloc
        [r: Region]
        (tag: Tag#) (info: Word32#) (arity: Nat#) : Ptr# r Obj
 = do
        -- Size of the object we need to allocate.
        bytesObj
         =  (add# (size# [Word64#])                 -- Header word.
                  (shl# arity (size2# [Addr#])))    -- Field pointers.

         -- Check there is enough heap space, or force a GC if there is not.
        (case check# bytesObj of
          True#  -> ()
          False# -> ddcAllocCollect bytesObj)

        -- Alloc and zero the whole object.
        --   The Salt code generator does not guarantee that allocations
        --   will not be performed before the argument pointers have been
        --   written, so the pointer fields in the half constructed object
        --   need to be zeroed to prevent the GC from tracing them.
        addr    = alloc# bytesObj
        set# addr 0w8# bytesObj

        -- Write the header word.
        write# addr 0#
            (bor# (shl# (promote# [Word64#] arity) 40w64#)
            (bor# (shl# (promote# [Word64#] tag)   32w64#)
            (bor# (shl# (promote# [Word64#] info)   8w64#)
                  0b00100001w64#)))

        -- Return pointer to the new object.
        makePtr# addr


-- | Determine the total size of a boxed data object.
ddcBoxedSize [r: Region] (obj: Ptr# r Obj): Nat#
 =      ddcBoxedSizeFromArity (ddcBoxedFields obj)


-- | Determine the total size of a boxed data object, given the number of
--   pointers in its payload.
ddcBoxedSizeFromArity (arity: Nat#): Nat#
 =      (add# (size# [Word64#])                 -- Header word.
              (shl# arity (size2# [Addr#])))    -- Field pointers.


-- | Get the constructor tag of a boxed object.
ddcBoxedTag [r: Region] (obj: Ptr# r Obj): Tag#
 = do   header64    = read# [Word64#] (takePtr# obj) 0#
        truncate# (band# (shr# header64 32w64#) 0xffw64#)


-- | Get the number of fields in a boxed object.
ddcBoxedFields [r: Region] (obj: Ptr# r Obj): Nat#
 = do   header64    = read# [Word64#] (takePtr# obj) 0#
        promote# (band# (shr# header64 40w64#) 0xffffffw64#)


-- | Get one of the pointers from a boxed data object.
ddcBoxedGetField
        [r1 r2: Region]
        (obj: Ptr# r1 Obj) (index: Nat#)
        : Ptr# r2 Obj
 =      read#  (takePtr# obj)
               (add# 8# (shl# index (size2# [Addr#])))


-- | Set one of the pointers from a boxed data object.
ddcBoxedSetField
        [r1 r2: Region]
        (obj: Ptr# r1 Obj) (index: Nat#) (val: Ptr# r2 Obj): Void#
 =      write# (takePtr# obj)
               (add# 8# (shl# index (size2# [Addr#])))
               val


-- Raw ------------------------------------------------------------------------
-- | A Raw Object.
--   A raw object does not contain heap pointers that need to be traced
--   by the garbage collector.
--
--   Header Word
--   ~~~~~~~~~~~
--     field:  |   size | info  format |
--      bits:  |     32 |   24       8 |
--    offset:  |     32 |    8       0 |
--
--   Format Byte
--   ~~~~~~~~~~~
--   0  0  1  1  X  X  0  1
--
--   Object Layout
--   ~~~~~~~~~~~~~
--   typedef struct
--   { uint32_t  size;        // Size of the whole object, in bytes.
--     uint32_t  infoFormat;  // Info table index and format byte.
--     uint8_t   payload[];   // Raw data that does not contain heap pointers.
--   } ObjRaw;
--
--   TODO: store size in words rather than bytes to avoid the size check.
--   TODO: drop the tag field.
--
ddcRawAlloc
        [r: Region]
        (tag: Tag#) (bytesPayload: Nat#): Ptr# r Obj
 = do
        -- The requested object size, using the payload length
        -- provided by the caller.
        bytesReq
         = add# (size# [Word64#]) bytesPayload

        -- How many extra bytes we need to add on the end to ensure
        -- that the resulting object is 8-byte aligned.
        bytesTail
         = promote# [Nat#] (band# (truncate# bytesReq) 0b111w64#)

        -- The actual number of bytes we will allocate to store
        -- the object in the heap, guaranteed to be 8-byte aligned.
        bytesObj
         = case eq# bytesTail 0# of
                True#   -> bytesReq
                False#  -> add# bytesReq (sub# 8# bytesTail)

        -- Check there is enough heap space, or force a GC if there is not.
        (case check# bytesObj of
          True#  -> ()
          False# -> ddcAllocCollect bytesObj)

        -- Allocate the object and zero the payload.
        --   This allocation function is used to allocate unboxed
        --   arrays, and the caller doesn't zero the payload itself.
        addr    = alloc# bytesObj
        set# addr 0w8# bytesObj

        -- Write the header word.
        write# addr 0#
            (bor# (shl# (promote# [Word64#] bytesObj) 32w64#)
                  0b00110001w64#)

        -- Return pointer to the new oject.
        makePtr# addr


-- | Determine the total size of a raw data object.
ddcRawSize [r: Region] (obj: Ptr# r Obj): Nat#
 = do   header64    = read# [Word64#] (takePtr# obj) 0#
        promote# (band# (shr# header64 32w64#) 0xffffffffw64#)


-- | Get the payload data from a raw object.
ddcRawPayload [r: Region] (obj: Ptr# r Obj): Ptr# r Word8#
 =      plusPtr# (castPtr# obj) 8#


-- | Get the size of the payload of a raw object, in bytes.
ddcRawPayloadSize [r: Region] (obj: Ptr# r Obj): Nat#
 = do   header64    = read# [Word64#] (takePtr# obj) 0#
        sizeObj     = promote# (band# (shr# header64 32w64#) 0xffffffffw64#)
        sub# sizeObj (size2# [Word64#])


-- Small ----------------------------------------------------------------------
-- | A Small object which holds raw, non-pointer data.
--   The object size is encoded as part of format field,
--   which saves us from needing to include a separate size field.
--   The payload size must be no greater than 16 words, else undefined.
--
--   Header Word
--   ~~~~~~~~~~~
--    field:  | data | info  format |
--     bits:  |   32 |   24       8 |
--   offset:  |   32 |    8       0 |
--
--   Format Byte
--   ~~~~~~~~~~~
--   -- size --  X  X  1  1  -- Small
--
--   Object Layout
--   ~~~~~~~~~~~~~
--   typedef struct
--   { uint32_t  payload0;      // Bonus raw data that fits in the header word.
--     uint32_t  infoFormat;    // Info table and format field.
--     uint8_t   payload[];     // Raw data that does not contain heap pointers.
--   } ObjSmall;
--
ddcSmallAlloc
        [r: Region]
        (info: Word32#) (wordsPayload: Nat#): Ptr# r Obj
 = do
        -- Size of the object we need to allocate.
        bytesObj
         =  add# (size# [Word64#])                        -- Header word.
                 (shl# wordsPayload (size2# [Word64#]))   -- Payload words.

        -- Check there is enough heap space, or force a GC if there is not.
        (case check# bytesObj of
            True#   -> ()
            False#  -> ddcAllocCollect bytesObj)

        -- Allocate the object.
        --   We don't bother setting it to zero because small objects
        --   are only used for literals, and all the callers write
        --   the payload immediately.
        addr = alloc# bytesObj

        -- Write the header word.
        write# addr 0#
            (bor# (shl# (promote# [Word64#] wordsPayload) 4w64#)
            (bor# (shl# (promote# [Word64#] info)         8w64#)
                  0b0011w64#))

        -- Return pointer to the new object.
        makePtr# addr


-- | Get the size of a small object, in bytes.
ddcSmallSize [r: Region] (obj: Ptr# r Obj): Nat#
 = do   header64        = read# [Word64#] (takePtr# obj) 0#
        wordsPayload    = band# (shr# header64 4w64#) 0xfw64#
        bytesPayload    = shl#  (promote# [Nat#] wordsPayload) (size2# [Word64#])
        bytesHeader     = size# [Word64#]
        add# bytesHeader bytesPayload


-- | Get a pointer to the payload data from a raw small object.
ddcSmallPayload [r: Region] (obj: Ptr# r Obj): Ptr# r Word8#
 =      plusPtr# (castPtr# obj) 8#


-- | Determine the size of a raw small payload, in bytes.
ddcSmallPayloadSize [r: Region] (obj: Ptr# r Obj): Nat#
 = do   header64        = read# [Word64#] (takePtr# obj) 0#
        wordsPayload    = band# (shr# header64 4w64#) 0xfw64#
        shl# (promote# [Nat#] wordsPayload) (size2# [Word64#])


-- Failure --------------------------------------------------------------------
-- | Report a bogus object and abort the program.
ddcFailObject
        [r: Region]
        (obj: Ptr# r Obj) (fn: TextLit#) (msg: TextLit#): Unit
 = do
        ddcPrimStderrPutString "ddc-runtime."#
        ddcPrimStderrPutString fn
        ddcPrimStderrPutString " "#
        ddcPrimStderrPutString msg
        ddcPrimStderrPutString "\n"#
        ddcPrimStderrPutString "\n"#
        fail#

