
-- | Arrays of pointers to boxed values.
module Runtime.Prim.Array

export foreign c value
 allocStoreArray  : [r1 r2 : Region]. Nat# -> Ptr# r1 Obj -> Ptr# r2 Obj
 writeStoreArray  : [r1 r2 : Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj -> Ptr# r1 Obj
 readStoreArray   : [r1 r2 : Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj
 fillStoreArray   : [r1 r2 : Region]. Ptr# r1 Obj -> Nat# -> Nat# -> Ptr# r2 Obj -> Ptr# r1 Obj

import foreign c value
 ddcBoxedAlloc    : [r1    : Region]. Tag# -> Nat# -> Ptr# r1 Obj
 ddcBoxedSize     : [r1    : Region]. Ptr# r1 Obj -> Nat#
 ddcBoxedSetField : [r1 r2 : Region]. Ptr# r1 Obj -> Nat# -> Ptr# r2 Obj -> Void#

with letrec


-- | Allocate an array of boxed values, consisting of the same element
--   for all positions.
allocStoreArray
        [r1 r2: Region]
        (len: Nat#) (pVal: Ptr# r1 Obj): Ptr# r2 Obj
 = do
        sVal    = allocSlot# [r1]

        poke# sVal pVal
        arr     = ddcBoxedAlloc [r2] (truncate# 0#) len
        pVal'   = peek# sVal

        fillStoreArray arr 0# len pVal'
        arr


-- | Write an element into an array.
writeStoreArray
        [r1 r2: Region]
        (obj: Ptr# r1 Obj) (ix: Nat#) (val: Ptr# r2 Obj): Ptr# r1 Obj
 = do
        -- Get address of the first byte after the end of the array.
        top     = ddcBoxedSize [r1] obj

        -- Bounded poke.
        -- If the requested address is past the end of the array then abort.
        off     = add# (size# [Word64#]) (shl# ix (size2# [Addr#]))
        _       = pokeBounded# (castPtr# obj) off top val
        obj


-- | Read an element from an array.
readStoreArray
        [r1 r2: Region]
        (obj: Ptr# r1 Obj) (ix: Nat#): Ptr# r2 Obj
 = do
        -- Get address of the first byte after the end of the array.
        top     = ddcBoxedSize [r1] obj

        -- Bounded peek.
        -- If the requested address is past the end of the array then abort.
        off     = add# (size# [Word64#]) (shl# ix (size2# [Addr#]))
        result  = peekBounded# (castPtr# obj) off top
        result


-- | Fill all elements of an array with the same value.
fillStoreArray
        [r1 r2: Region]
        (arr: Ptr# r1 Obj) (start end: Nat#) (val: Ptr# r2 Obj): Ptr# r1 Obj

 = case ge# start end of
        True#   -> arr
        False#  -> do
                ddcBoxedSetField arr start val
                fillStoreArray arr (add# start 1#) end val

