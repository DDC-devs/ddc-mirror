module Runtime.Prim.CRegion

export foreign c value
 ddcPrimCompactRegionAlloc    : Nat# -> Nat#
 ddcPrimCompactRegionStore    : [r1  r2: Region]. Nat# -> Ptr# r1 Obj -> Ptr# r2 Obj
 ddcPrimCompactRegionMarkDead : Nat# -> Unit

 ddcCompactRegionIsLive       : Addr# -> Bool#

import foreign c value
 malloc           : Nat#  -> Addr#
 free             : Addr# -> Void#
 ddcBoxedAlloc    : [r1    : Region]. Tag# -> Word32# -> Nat# -> Ptr# r1 Obj
 ddcBoxedGetField : [r1 r2 : Region]. Ptr# r1 Obj  -> Nat# -> Ptr# r2 Obj
 ddcBoxedSetField : [r1 r2 : Region]. Ptr# r1 Obj  -> Nat# -> Ptr# r2 Obj -> Void#
 ddcObjectSize    : [r1    : Region]. Ptr# r1 Obj  -> Nat#
 ddcObjectSetCompactRegionFlag : [r: Region]. Ptr# r Obj -> Bool# -> Unit


 ddcPrimStdoutPutNat : Nat# -> Void#
 ddcPrimStderrPutNat : Nat# -> Void#
 ddcPrimStdoutPutAddr : Addr# -> Void#
 ddcPrimStderrPutAddr : Addr# -> Void#
 ddcPrimStdoutPutTextLit : TextLit#   -> Void#
 ddcPrimStderrPutTextLit : TextLit#   -> Void#

with letrec

ddcCompactRegionDebug (u : Unit) : Bool#
 = do 
      False#

ddcCompactRegionDebugPrint (msg : TextLit#) : Unit
  = do
      case ddcCompactRegionDebug () of
        True# -> do ddcPrimStderrPutTextLit msg
                    ()
        False# -> ()

ddcPrintCompactRegionHeader (rawBase : Addr#) : Unit
  = do 
      case ddcCompactRegionDebug () of
        True# -> do ddcPrimStderrPutTextLit "CR-> Base: "#
                    ddcPrimStderrPutAddr rawBase
                    ddcPrimStderrPutTextLit "| Top: "#
                    ddcPrimStderrPutAddr (read# [Addr#] rawBase 0#)
                    ddcPrimStderrPutTextLit "| Max: "#
                    ddcPrimStderrPutAddr (read# [Addr#] rawBase 8#)
                    ddcPrimStderrPutTextLit "| Size: "#
                    ddcPrimStderrPutNat (promote# [Nat#] (sub# (read# [Addr#] rawBase 8#) (read# [Addr#] rawBase 0#)))
                    ddcPrimStderrPutTextLit "| Flag: "#
                    ddcPrimStderrPutAddr (read# [Addr#] rawBase 16#)
                    ddcPrimStderrPutTextLit "\n"#

                    ()
        _ -> ()
        

-- return a region handle
ddcPrimCompactRegionAlloc (initSize : Nat#) : Nat#
 = do   
      -- create CR and header
      rawBase = malloc initSize
      ddcCompactRegionConstructHeader 
                        rawBase 
                        (plusAddr# rawBase 32#)  -- top
                        (plusAddr# rawBase initSize) -- max
                        0b0000001w8# -- flags


      -- insert into the table
      ddcCompactRegionInsertTable rawBase

-- insert the CRTable
ddcCompactRegionInsertTable (rawBase : Addr#): Nat#
 = do
      -- read the address of the CR Table
      tableMax = read# [Addr#] (global# [Addr#] "ddcCRTableMax"#) 0#
      tableBase = read# [Addr#] (global# [Addr#] "ddcCRTableBase"#) 0#
      freeAddr = ddcCompactRegionFindFreeRegionTableSlot tableBase tableMax

      case eq# (truncate# [Nat#] freeAddr) 0# of
        True#  -> do  
                      ddcCompactRegionExtendsTable ()
                      ddcCompactRegionInsertTable rawBase
        False# -> do  handle = sub# freeAddr tableBase
                      write# freeAddr 0# rawBase 
                      handleNat = (truncate# [Nat#] handle)
                      handleNat

-- extends the CRTable
ddcCompactRegionExtendsTable (u : Unit): Void#
 = do
      tableBaseOld = read# [Addr#] (global# [Addr#] "ddcCRTableBase"#) 0#
      tableMaxOld = read# [Addr#] (global# [Addr#] "ddcCRTableMax"#) 0#
      oldSize = truncate# [Nat#] (sub# tableMaxOld tableBaseOld)

      newSize = add# oldSize (read# (global# [Nat#] "ddcCRTableSize"#) 0#)
      tableBaseNew = malloc newSize
      tableMaxNew = plusAddr# tableBaseNew (sub# newSize 1#)
 
      copy# tableBaseNew tableBaseOld oldSize
      free tableBaseOld
      write# (global# [Addr#] "ddcCRTableBase"#) 0# tableBaseNew
      write# (global# [Addr#] "ddcCRTableMax"#) 0# tableMaxNew
      
      

-- return 0# when table is full
-- otherwise return the address of the slot
ddcCompactRegionFindFreeRegionTableSlot (acc : Addr#) (max : Addr#) : Addr#
 = do 
      case gt# acc max of
        True# -> do (promote# [Addr#] 0#)
        False# -> do
                    slotVal = read# [Addr#] acc 0#
                    case eq# slotVal (promote# [Addr#] 0#) of
                      True# -> acc
                      False# -> ddcCompactRegionFindFreeRegionTableSlot (plusAddr# acc 8#) max


ddcPrimCompactRegionStore [r1 r2: Region] (handle : Nat#) (pVal : Ptr# r1 Obj) :  Ptr# r2 Obj
 = do
        -- handle validation
        handleValid = ddcCompactRegionHandleValidation handle
        case handleValid of
          False# 
            ->  do ddcCompactRegionDebugPrint "Invalid Region handle!"#
                   fail# --invalid handle
          True#
            -> do tableBase = read# [Addr#] (global# [Addr#] "ddcCRTableBase"#) 0#
                  regionRawBase = read# [Addr#] tableBase handle
                  ddcPrintCompactRegionHeader regionRawBase
                  isLive = ddcCompactRegionIsLive regionRawBase
                  case isLive of
                    False# -> do ddcCompactRegionDebugPrint "Access dead region\n"#
                                 fail# 
                    True# -> do regionMax = read# [Addr#] regionRawBase 8#
                                regionTop = read# [Addr#] regionRawBase 0#
                                makePtr# (ddcCompactRegionResizeStore handle regionRawBase regionMax regionTop pVal)

-- set the flag to mark compact region dead
ddcPrimCompactRegionMarkDead (handle : Nat#) : Unit
 = do handleValid = ddcCompactRegionHandleValidation handle
      case handleValid of
        False# 
          -> do fail# --invalid handle
        True#
          -> do tableBase = read# [Addr#] (global# [Addr#] "ddcCRTableBase"#) 0#
                regionRawBase = read# [Addr#] tableBase handle
                flag8  = truncate# [Word8#] (read# [Addr#] regionRawBase 0#)
                write# regionRawBase 0# (band# flag8 0b01111111w8#) 
                ()
                

ddcCompactRegionResizeStore [r1 : Region] 
                              (handle : Nat#)
                              (rawBase : Addr#)
                              (top  : Addr#)
                              (max  : Addr#)
                              (pVal : Ptr# r1 Obj )
                              : Addr#
  = do  freeSize = sub# max top
        case lt# (ddcObjectSize pVal) (promote# [Nat#] freeSize) of
          False# 
            -> do newSize = mul# (truncate# [Nat#] (sub# max rawBase)) 2# --TODO: a better strategy
                  rawBaseNew = malloc newSize

                  -- copy old data and old header
                  usedSize = truncate# [Nat#] (sub# top rawBase)
                  copy# rawBaseNew rawBase usedSize
                  -- update header
                  topNew = plusAddr# rawBaseNew usedSize
                  maxNew = plusAddr# rawBaseNew newSize
                  write# rawBaseNew 0# topNew
                  write# rawBaseNew 8# maxNew
                  free rawBase
                  -- trick, find another solution to this if possible.
                  ddcCompactRegionResizeStore handle rawBaseNew topNew maxNew pVal
          True#
            -> do -- store the object to the compact region
                  objAddrNew = ddcCompactRegionUnsafeDirectStore rawBase pVal 
                  -- update the address in the compact region table
                  tableBase = read# [Addr#] (global# [Addr#] "ddcCRTableBase"#) 0# 
                  write# tableBase handle rawBase
                  -- return the addr of object in the compact region
                  objAddrNew

ddcCompactRegionUnsafeDirectStore [r1 : Region]
                                    (rawBase : Addr#)
                                    (pVal    : Ptr# r1 Obj)
                                    : Addr#
  = do 
      -- make it addr
      rawObjAddr = takePtr# pVal
      -- get curr top
      top = read# rawBase 0#
      -- do the copy
      copy# top rawObjAddr (ddcObjectSize pVal)
      -- set the CR flag
      ddcObjectSetCompactRegionFlag [r1] (makePtr# top) True#
      -- update top
      write# rawBase 0# (plusAddr# top (ddcObjectSize pVal))
      
      top

-- macro to write a header
ddcCompactRegionConstructHeader 
                  (rawBase : Addr#) 
                  (top : Addr#) 
                  (max : Addr#) 
                  (flags : Word8#) 
                  : Void#
  = do  write# rawBase 0# top
        write# rawBase 8# max
        write# rawBase 16# flags

-- TODO ask Ben how to define a constant
ddcCompactRegionRawBaseToBase (rawBase : Addr#) : Addr#
  = do 
      -- HEADER SIZE
      plusAddr# rawBase 32#


-- return true if the compact region is live
-- otherwise false
ddcCompactRegionIsLive (regionBase : Addr#) : Bool#
 = do   case eq# (truncate# [Nat#] regionBase) 0# of
          True#  -> do False#
          False# -> do
                flag8  = truncate# [Word8#] (read# [Addr#] regionBase 16#)
                case band# flag8 0b0000001w8# of
                  0b00000001w8# -> True#
                  _             -> False#

-- return true if handle is valid
-- otherwise, false   
ddcCompactRegionHandleValidation (handle : Nat#) : Bool#
 = do
        tableBase = read# [Addr#] (global# [Addr#] "ddcCRTableBase"#) 0#
        tableMax = read# [Addr#] (global# [Addr#] "ddcCRTableMax"#) 0#
        tableSize = truncate# [Nat#] (sub# tableMax tableBase)
        lt# handle tableSize