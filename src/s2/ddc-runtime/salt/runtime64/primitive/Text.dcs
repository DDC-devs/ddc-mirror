
module Runtime.Prim.Text

export foreign c value
 ddcPrimMakeTextLit     : [r1: Region]. Addr# -> Ptr# r1 Obj
 ddcPrimTakeTextLit     : [r1: Region]. Ptr# r1 Obj -> Addr#
 ddcPrimSizeOfTextLit   : [r1: Region]. Ptr# r1 Obj -> Nat#
 ddcPrimIndexTextLit    : [r1: Region]. Ptr# r1 Obj -> Nat# -> Word8#

import foreign c value
 -- Objects with raw, non-pointer data.
 ddcRawAlloc            : [r1: Region]. Tag# -> Nat# -> Ptr# r1 Obj
 ddcRawPayload          : [r1: Region]. Ptr# r1 Obj  -> Ptr# r1 Word8#
 ddcRawPayloadSize      : [r1: Region]. Ptr# r1 Obj  -> Nat#
 ddcPrimPutString       : TextLit# -> Void#

with letrec


-- | Make a boxed text literal from a pointer to a null terminated
--   sequence of bytes.
--
--   We first take the length of the string for bounds checks during
--   indexing and store the pointer and length together in the object.
--
--   typedef struct
--   { uint32_t  size;        // Size of the whole object, in bytes.
--     uint32_t  infoFormat;  // Info table index and format byte.
--     uint8_t   payload[];   // Raw data that does not contain heap pointers.
--     uint8_t*  ptr;         // Pointer to null terminated string data.
--   } TextLit;
--
ddcPrimMakeTextLit [r1: Region] (addrString: Addr#): Ptr# r1 Obj
 = do   len     = ddcPrimSizeOfString 0# addrString
        obj     = ddcRawAlloc (truncate# 0#) (add# 4# (size# [Addr#]))
        payload = takePtr# (ddcRawPayload obj)
        write# [Word32#] payload 0# (truncate# len)
        write# [Addr#]   payload 4# addrString
        obj


-- | Take the pointer from a text literal.
ddcPrimTakeTextLit [r1: Region] (obj: Ptr# r1 Obj): Addr#
 = do
        payload = takePtr# (ddcRawPayload obj)
        read# [Addr#] payload 4#


-- | Get the size of a text literal, in bytes.
ddcPrimSizeOfTextLit [r1: Region] (obj: Ptr# r1 Obj): Nat#
 = do
        payload = takePtr# (ddcRawPayload obj)
        promote# (read# [Word32#] payload 0#)
        


-- | Get a single byte of a text literal.
ddcPrimIndexTextLit [r1: Region] (obj: Ptr# r1 Obj) (ix: Nat#): Word8#
 = do   charPtr = ddcPrimTakeTextLit obj
        size    = ddcPrimSizeOfTextLit obj

        char    = peekBounded# (makePtr# [r1] charPtr) ix size
        char


-- | Get the number of non-bytes in a null-terminated array of bytes.
ddcPrimSizeOfString (i: Nat#) (str: Addr#): Nat#
 = do   x       = promote# (read# [Word8#] str i)
        case x of
         0#     -> i
         _      -> ddcPrimSizeOfString (add# i 1#) str

