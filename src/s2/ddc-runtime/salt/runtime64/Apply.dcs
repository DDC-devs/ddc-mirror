
 -- Thunk application.
module Runtime.Apply

export foreign c value
 ddcRunThunk    :  [r1: Region]. Ptr# r1 Obj -> Ptr# r1 Obj

 ddcApply0      :  [r1: Region]
                .  Ptr# r1 Obj -> Ptr# r1 Obj

 ddcApply1      :  [r1: Region]
                .  Ptr# r1 Obj -> Ptr# r1 Obj -> Ptr# r1 Obj

 ddcApply2      :  [r1: Region]
                .  Ptr# r1 Obj -> Ptr# r1 Obj -> Ptr# r1 Obj -> Ptr# r1 Obj

 ddcApply3      :  [r1: Region]
                .  Ptr# r1 Obj -> Ptr# r1 Obj -> Ptr# r1 Obj -> Ptr# r1 Obj
                -> Ptr# r1 Obj

 ddcApply4      :  [r1: Region]
                .  Ptr# r1 Obj -> Ptr# r1 Obj -> Ptr# r1 Obj -> Ptr# r1 Obj
                -> Ptr# r1 Obj -> Ptr# r1 Obj


import foreign c value
 ddcThunkAlloc  : [r1: Region]. Addr# -> Word32# -> Nat# -> Nat# -> Nat# -> Nat# -> Ptr# r1 Obj
 ddcThunkCopy   : [r1: Region]. Ptr# r1 Obj -> Ptr# r1 Obj -> Nat# -> Nat# -> Ptr# r1 Obj
 ddcThunkExtend : [r1: Region]. Ptr# r1 Obj -> Nat# -> Ptr# r1 Obj

 ddcThunkFun    : [r1: Region]. Ptr# r1 Obj -> Addr#
 ddcThunkParams : [r1: Region]. Ptr# r1 Obj -> Nat#
 ddcThunkBoxes  : [r1: Region]. Ptr# r1 Obj -> Nat#
 ddcThunkArgs   : [r1: Region]. Ptr# r1 Obj -> Nat#
 ddcThunkRuns   : [r1: Region]. Ptr# r1 Obj -> Nat#
 ddcThunkInfo   : [r1: Region]. Ptr# r1 Obj -> Word32#

 ddcThunkSetField : [r1 : Region]. Ptr# r1 Obj -> Nat# -> Nat# -> Ptr# r1 Obj -> Void#
 ddcThunkGetField : [r1 : Region]. Ptr# r1 Obj -> Nat# -> Ptr# r1 Obj

with letrec


-------------------------------------------------------------------------------
-- | Run a thunk.
--   If this is the last run the evaluate it,
--   otherwise increment the run count.
ddcRunThunk
        [r1   : Region]
        (pSrc : Ptr# r1 Obj) : Ptr# r1 Obj
 = do
        sSrc    = allocSlot# [r1]

        boxes   = ddcThunkBoxes pSrc
        case boxes of

         -- The thunk is not boxed,
         -- so running it would be a type error.
         0# ->  fail#

         -- This was the final run, so call the embedded function.
         --   We don't know what region the result is going to be allocated
         --   into, so need to assign it to rT.
         1# ->  ddcEval0 pSrc

         -- Create a new thunk with a decremented run counter.
         _ -> do
                fun     = ddcThunkFun    pSrc
                params  = ddcThunkParams pSrc
                args    = ddcThunkArgs   pSrc
                info    = ddcThunkInfo   pSrc
                runs'   = add# (ddcThunkRuns pSrc) 1#

                -- Allocate a new thunk with the original function and arity,
                --  but with a decremented run counter,
                --  holding the source pointer in a slot across the allocation.
                poke# sSrc pSrc

                pDst    = ddcThunkAlloc [r1] fun info params boxes args runs'

                -- Copy argument pointers from the source to the new thunk.
                ddcThunkCopy (peek# sSrc) pDst 0# args


-------------------------------------------------------------------------------
-- The apply family of functions work out how call the function in a thunk.
-- Some arguments come from in the thunk itself, while some can be provided
-- directly to the evaluators.
--
-- The hard limits are:
--   - The maximum arity for the function in a thunk is 12.
--     See the comment on applyZ.
--   - The maximum number of directly applied arguments is 4,
--     because we only have apply0 - apply4.
--
-- The choice of where to set the limit is a balance between being able to
-- enumerate all possible calling conventions, and polluting the instruction
-- cache with code for too many evaluators.
--

----------------------------------------------------------- 0
-- | Apply (evaluate) a thunk, given no more arguments.
ddcApply0 [r1 : Region]
          (t : Ptr# r1 Obj) : Ptr# r1 Obj
 = do
        p       = ddcThunkParams t
        a       = ddcThunkArgs   t
        b       = ddcThunkBoxes  t
        r       = ddcThunkRuns   t
        case mul# (eq# a p) (eq# b r) of
         True#  -> ddcEval0 t
         False# -> makePtr# (takePtr# t)


-- | Evaluate a saturated thunk, give no more arguments.
ddcEval0  [r0 r1 : Region]
          (t     : Ptr# r0 Obj) : Ptr# r1 Obj
 = do
        f       = ddcThunkFun    t
        p       = ddcThunkParams t
        a       = ddcThunkArgs   t
        case p of
         0# -> call0# f

         1# -> call1# f (ddcThunkGetField t 0#)

         2# -> call2# f (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)

         3# -> call3# f (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                        (ddcThunkGetField t 2#)

         4# -> call4# f (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                        (ddcThunkGetField t 2#) (ddcThunkGetField t 3#)

         _  -> ddcEvalZ
                 t f p  (ddcThunkGetField t (sub# a 4#))
                        (ddcThunkGetField t (sub# a 3#))
                        (ddcThunkGetField t (sub# a 2#))
                        (ddcThunkGetField t (sub# a 1#))


----------------------------------------------------------- 1
-- | Apply a thunk to one more argument.
ddcApply1 [r1 : Region]
          (t  : Ptr# r1 Obj) (pArg1 : Ptr# r1 Obj): Ptr# r1 Obj
 = do
        sArg1   = allocSlot# [r1]

        p       = ddcThunkParams t
        a       = ddcThunkArgs   t
        b       = ddcThunkBoxes  t
        r       = ddcThunkRuns   t

        case mul# (eq# (add# a 1#) p) (eq# b r) of {
        True# ->
                ddcEval1 t pArg1;

        False# ->
        do {    poke# sArg1 pArg1;
                t'      = ddcThunkExtend t 1#;
                ddcThunkSetField t' a 0# (peek# sArg1);
                t';
        }}


-- | Evaluate a saturated thunk, given one more argument.
ddcEval1  [r1 : Region]
          (t  : Ptr# r1 Obj) (pArg1 : Ptr# r1 Obj): Ptr# r1 Obj
 = do
        sArg1   = allocSlot# [r1]

        f       = ddcThunkFun    t
        p       = ddcThunkParams t
        a       = ddcThunkArgs   t
        case p of
         0# -> do
                poke# sArg1 pArg1
                t'      = call0# f
                ddcApply1 t' (peek# sArg1)

         1# -> call1# f pArg1

         2# -> call2# f (ddcThunkGetField t 0#)  pArg1

         3# -> call3# f (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                        pArg1

         4# -> call4# f (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                        (ddcThunkGetField t 2#)  pArg1

         _  -> ddcEvalZ
                t f p   (ddcThunkGetField t (sub# a 3#))
                        (ddcThunkGetField t (sub# a 2#))
                        (ddcThunkGetField t (sub# a 1#))
                        pArg1


----------------------------------------------------------- 2
ddcApply2 [r1 : Region]
          (t     : Ptr# r1 Obj)
          (pArg1 : Ptr# r1 Obj) (pArg2 : Ptr# r1 Obj): Ptr# r1 Obj
 = do
        sArg1   = allocSlot# [r1]
        sArg2   = allocSlot# [r1]

        p       = ddcThunkParams t
        a       = ddcThunkArgs   t
        b       = ddcThunkBoxes  t
        r       = ddcThunkRuns   t

        case eq#  (add# a 1#) p of { True# ->
        do {    poke# sArg2 pArg2;
                t'      = ddcEval1 t pArg1;
                ddcApply1 t' (peek# sArg2);
        };

        False# ->
        case mul# (eq# (add# a 2#) p) (eq# b r) of { True# ->
                ddcEval2 t pArg1 pArg2;

        False# ->
        do  {   poke# sArg1 pArg1;
                poke# sArg2 pArg2;
                t'      = ddcThunkExtend t 2#;
                ddcThunkSetField t' a 0# (peek# sArg1);
                ddcThunkSetField t' a 1# (peek# sArg2);
                t';
        }}}


-- | Evaluate a saturated thunk, given two more arguments.
ddcEval2 [r1 : Region]
         (t     : Ptr# r1 Obj)
         (pArg1 : Ptr# r1 Obj) (pArg2 : Ptr# r1 Obj): Ptr# r1 Obj
 = do
        sArg1   = allocSlot# [r1]
        sArg2   = allocSlot# [r1]

        f       = ddcThunkFun      t
        p       = ddcThunkParams   t
        a       = ddcThunkArgs     t
        case p of
         0# -> do {
                poke# sArg1 pArg1;
                poke# sArg2 pArg2;
                t'      = call0# f;
                ddcApply2 t' (peek# sArg1) (peek# sArg2)
         }

         1# -> do {
                poke# sArg2 pArg2;
                t'      = call1# f pArg1;
                ddcApply1 t' (peek# sArg2);
         }

         2# -> call2# f pArg1  pArg2

         3# -> call3# f (ddcThunkGetField t 0#)
                        pArg1  pArg2

         4# -> call4# f (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                        pArg1  pArg2

         _  -> ddcEvalZ
                t f p   (ddcThunkGetField t (sub# a 2#))
                        (ddcThunkGetField t (sub# a 1#))
                        pArg1  pArg2


----------------------------------------------------------- 3
-- | Apply a thunk to three more arguments.
ddcApply3 [r1 : Region]
          (t     : Ptr# r1 Obj)
          (pArg1 : Ptr# r1 Obj) (pArg2 : Ptr# r1 Obj)
          (pArg3 : Ptr# r1 Obj)
          : Ptr# r1 Obj
 = do
        sArg1   = allocSlot# [r1]
        sArg2   = allocSlot# [r1]
        sArg3   = allocSlot# [r1]

        p       = ddcThunkParams t
        a       = ddcThunkArgs   t
        b       = ddcThunkBoxes  t
        r       = ddcThunkRuns   t

        case eq#  (add# a 2#) p of { True# ->
        do {    poke# sArg3 pArg3;
                t'      = ddcEval2 t pArg1 pArg2;
                ddcApply1 t' (peek# sArg3);
        };

        False# ->
        case eq#  (add# a 1#) p of { True# ->
        do {
                poke# sArg2 pArg2;
                poke# sArg3 pArg3;
                t'      = ddcEval1 t pArg1;
                ddcApply2 t' (peek# sArg2) (peek# sArg3);
        };

        False# ->
        case mul# (eq# (add# a 3#) p) (eq# b r) of { True# ->
                ddcEval3 t pArg1 pArg2 pArg3;

        False# ->
        do {
                poke# sArg1 pArg1;
                poke# sArg2 pArg2;
                poke# sArg3 pArg3;
                t'      = ddcThunkExtend t 3#;
                ddcThunkSetField t' a 0# (peek# sArg1);
                ddcThunkSetField t' a 1# (peek# sArg2);
                ddcThunkSetField t' a 2# (peek# sArg3);
                t'
        }}}}


-- | Evaluate a saturated thunk, given three more arguments.
ddcEval3 [r1 : Region]
         (t     : Ptr# r1 Obj)
         (pArg1 : Ptr# r1 Obj) (pArg2 : Ptr# r1 Obj)
         (pArg3 : Ptr# r1 Obj)
         : Ptr# r1 Obj
 = do
        sArg1   = allocSlot# [r1]
        sArg2   = allocSlot# [r1]
        sArg3   = allocSlot# [r1]

        f       = ddcThunkFun    t
        p       = ddcThunkParams t
        a       = ddcThunkArgs   t
        case p of
         0# -> do {
                poke# sArg1 pArg1;
                poke# sArg2 pArg2;
                poke# sArg3 pArg3;
                t'      = call0# f;
                ddcApply3 t' (peek# sArg1) (peek# sArg2) (peek# sArg3);

         }

         1# -> do {
                poke# sArg2 pArg2;
                poke# sArg3 pArg3;
                t'      = call1# f pArg1;
                ddcApply2 t' (peek# sArg2) (peek# sArg3);
         }

         2# -> do {
                poke# sArg3 pArg3;
                t'      = call2# f pArg1 pArg2;
                ddcApply1 t' (peek# sArg3);
         }

         3# -> call3# f pArg1  pArg2  pArg3

         4# -> call4# f (ddcThunkGetField t 0#)
                        pArg1  pArg2  pArg3

         _  -> ddcEvalZ
                 t f p  (ddcThunkGetField t (sub# a 1#))
                        pArg1  pArg2  pArg3


----------------------------------------------------------- 4
-- | Apply a thunk to four more arguments.
ddcApply4 [r1 : Region]
          (t     : Ptr# r1 Obj)
          (pArg1 : Ptr# r1 Obj) (pArg2 : Ptr# r1 Obj)
          (pArg3 : Ptr# r1 Obj) (pArg4 : Ptr# r1 Obj)
          : Ptr# r1 Obj
 = do
        sArg1   = allocSlot# [r1]
        sArg2   = allocSlot# [r1]
        sArg3   = allocSlot# [r1]
        sArg4   = allocSlot# [r1]

        p       = ddcThunkParams t
        a       = ddcThunkArgs   t
        b       = ddcThunkBoxes  t
        r       = ddcThunkRuns   t

        case eq# (add# a 3#) p of { True# ->
        do {    poke# sArg4 pArg4;
                t'      = ddcEval3 t pArg1 pArg2 pArg3;
                ddcApply1 t' (peek# sArg4);
        };

        False# ->
        case eq# (add# a 2#) p of { True# ->
        do {    poke# sArg3 pArg3;
                poke# sArg4 pArg4;
                t'      = ddcEval2 t pArg1 pArg2;
                ddcApply2 t' (peek# sArg3) (peek# sArg4);
        };

        False# ->
        case eq# (add# a 1#) p of { True# ->
        do {    poke# sArg2 pArg2;
                poke# sArg3 pArg3;
                poke# sArg4 pArg4;
                t'      = ddcEval1 t pArg1;
                ddcApply3 t' (peek# sArg2) (peek# sArg3) (peek# sArg4);
        };

        False# ->
        case mul# (eq# (add# a 4#) p) (eq# b r) of { True# ->
                ddcEval4 t pArg1 pArg2 pArg3 pArg4;

        False# ->
        do {    poke# sArg1 pArg1;
                poke# sArg2 pArg2;
                poke# sArg3 pArg3;
                poke# sArg4 pArg4;
                t'      = ddcThunkExtend t 4#;
                ddcThunkSetField t' a 0# (peek# sArg1);
                ddcThunkSetField t' a 1# (peek# sArg2);
                ddcThunkSetField t' a 2# (peek# sArg3);
                ddcThunkSetField t' a 3# (peek# sArg4);
                t'
        }}}}}


-- | Evaluate a saturated thunk, given four more arguments.
ddcEval4  [r1 : Region]
          (t     : Ptr# r1 Obj)
          (pArg1 : Ptr# r1 Obj) (pArg2 : Ptr# r1 Obj)
          (pArg3 : Ptr# r1 Obj) (pArg4 : Ptr# r1 Obj)
          : Ptr# r1 Obj
 = do
        sArg1   = allocSlot# [r1]
        sArg2   = allocSlot# [r1]
        sArg3   = allocSlot# [r1]
        sArg4   = allocSlot# [r1]

        f       = ddcThunkFun    t
        p       = ddcThunkParams t
        case p of
         0# -> do {
                poke# sArg1 pArg1;
                poke# sArg2 pArg2;
                poke# sArg3 pArg3;
                poke# sArg4 pArg4;
                t'      = call0# f;
                ddcApply4 t' (peek# sArg1) (peek# sArg2)
                             (peek# sArg3) (peek# sArg4);
         }

         1# -> do {
                poke# sArg2 pArg2;
                poke# sArg3 pArg3;
                poke# sArg4 pArg4;
                t'      = call1# f pArg1;
                ddcApply3 t' (peek# sArg2) (peek# sArg3)
                             (peek# sArg4);
         }

         2# -> do {
                poke# sArg3 pArg3;
                poke# sArg4 pArg4;
                t'      = call2# f pArg1 pArg2;
                ddcApply2 t' (peek# sArg3) (peek# sArg4);
         }

         3# -> do {
                poke# sArg4 pArg4;
                t'      = call3# f pArg1 pArg3 pArg3;
                ddcApply1 t' (peek# sArg4);
         }

         4# -> call4# f         pArg1  pArg2  pArg3  pArg4

         _  -> ddcEvalZ  t f p  pArg1  pArg2  pArg3  pArg4


----------------------------------------------------------- Z
-- Evaluate a saturated thunk, given its last 4 arguments.
-- We read the first (n-4) arguments directly from the thunk.
--
-- In the object code, this function serves to enumerate the function calling
-- conventions for functions of 4-12 parameters. The fact that it stops at 12
-- places a hard limit on the arity of the core programs that we're prepared
-- to compile. Supers higher than this arity need to be transformed to take
-- some of their arguments from a tuple instead of as direct parameters.
--
-- In terms of the generated object program, we don't want to add more
-- alternatives here anyway because the underlying machine is unlikely to have
-- good calling convention when the object function has > 12 arguments. It
-- isn't useful for the 'arity' here to be more than the number of general
-- purpose registers we're likely to have in the machine.
--
-- Note that some registers will also be needed for the stack pointer etc.
-- If the machine has 16 general purpose registers, then setting the maximum
-- arity here to 12 is probably enough.
--
ddcEvalZ [r0 r1 r2 r3 r4 r5 : Region]
         (t : Ptr# r0 Obj) (fun : Addr#) (arity : Nat#)
         (argL3 : Ptr# r1 Obj) (argL2 : Ptr# r2 Obj)
         (argL1 : Ptr# r3 Obj) (argL0 : Ptr# r4 Obj)
         : Ptr# r5 Obj

 = case arity of
         4#  -> call4#  fun argL3 argL2 argL1 argL0

         5#  -> call5#  fun  (ddcThunkGetField t 0#)
                             argL3 argL2 argL1 argL0

         6#  -> call6#  fun  (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                             argL3 argL2 argL1 argL0

         7#  -> call7#  fun  (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                             (ddcThunkGetField t 2#)
                             argL3 argL2 argL1 argL0

         8#  -> call8#  fun  (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                             (ddcThunkGetField t 2#) (ddcThunkGetField t 3#)
                             argL3 argL2 argL1 argL0

         9#  -> call9#  fun  (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                             (ddcThunkGetField t 2#) (ddcThunkGetField t 3#)
                             (ddcThunkGetField t 4#)
                             argL3 argL2 argL1 argL0

         10# -> call10# fun  (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                             (ddcThunkGetField t 2#) (ddcThunkGetField t 3#)
                             (ddcThunkGetField t 4#) (ddcThunkGetField t 5#)
                             argL3 argL2 argL1 argL0

         11# -> call11# fun  (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                             (ddcThunkGetField t 2#) (ddcThunkGetField t 3#)
                             (ddcThunkGetField t 4#) (ddcThunkGetField t 5#)
                             (ddcThunkGetField t 6#)
                             argL3 argL2 argL1 argL0

         12# -> call12# fun  (ddcThunkGetField t 0#) (ddcThunkGetField t 1#)
                             (ddcThunkGetField t 2#) (ddcThunkGetField t 3#)
                             (ddcThunkGetField t 4#) (ddcThunkGetField t 5#)
                             (ddcThunkGetField t 6#) (ddcThunkGetField t 7#)
                             argL3 argL2 argL1 argL0
         _   -> fail#
