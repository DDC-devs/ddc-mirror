
-- Initialization functions for the runtime system.
--
--   This module is treated specially by the LLVM code generator.
--
--   When compiling this module the global symbols used by the runtime
--   system are declared statically, and exported with external linkage.
--   For all other modules the symbols are imported.
--
--   This module must contain uses of those global symbols, otherwise
--   the system linker will forget about the symbols when building
--   the runtime system .dylib library.
--
module Init

export foreign c value
 ddcInit        :  Nat# -> Nat# -> Addr# -> Unit
 ddcExit        :  Nat# -> Void#

import foreign c value
 malloc         : Nat#  -> Addr#
 free           : Addr# -> Void#
 exit           : Nat#  -> Void#

with letrec


---------------------------------------------------------------------------------------------------
-- | Initialize the DDC runtime system.
ddcInit (defaultHeapSize: Nat#) -- Default heap size set at compile time.
        (argc: Nat#)            -- Number of command line arguments.
        (argv: Addr#)           -- Pointer to array of command line arguments.
        : Unit
 = do
        -- Initialize the heap.
        ddcAllocInit   defaultHeapSize

        -- Create refs for the object info table.
        -- TODO: The 'ddcInfoIdentNext' is supposed to be a Word32,
        --       but the Salt -> LLVM code generator doesn't want to make one.
        write# [Word64#] (global# [Word64#] "ddcInfoIdentNext"#)     0# 0w64#
        write# [Addr#]   (global# [Addr#]   "ddcInfoFrameRoot"#)     0# (promote# 0#)

        -- Create refs to command line arguments.
        write# [Nat#]    (global# [Nat#]    "ddcGlobalEnvArgCount"#) 0# argc
        write# [Addr#]   (global# [Addr#]   "ddcGlobalEnvArgVal"#)   0# argv

        -- Create refs for exception hooks.
        write# [Addr#]   (global# [Addr#]   "ddcRuntimeHookExceptionFile"#)    0# (promote# 0#)
        write# [Addr#]   (global# [Addr#]   "ddcRuntimeHookExceptionNetwork"#) 0# (promote# 0#)

        ()


-- | Initialise the allocation system and allocate the heap.
ddcAllocInit (heapSize : Nat#) : Unit
 = do
        -- Create the front heap.
        pHeapBaseA      = malloc heapSize
        write# (global# [Addr#] "ddcHeapBase"#)     0# pHeapBaseA
        write# (global# [Addr#] "ddcHeapTop"#)      0# pHeapBaseA
        write# (global# [Addr#] "ddcHeapMax"#)      0#
               (plusAddr# pHeapBaseA    (sub# heapSize 1#))

        -- Create the back heap.
        pHeapBackBaseA  = malloc heapSize
        write# (global# [Addr#] "ddcHeapBackBase"#) 0# pHeapBackBaseA
        write# (global# [Addr#] "ddcHeapBackTop"#)  0# pHeapBackBaseA
        write# (global# [Addr#] "ddcHeapBackMax"#)  0#
               (plusAddr# pHeapBackBaseA (sub# heapSize 1#))

        ()


---------------------------------------------------------------------------------------------------
-- | Shutdown the runtime system and exit cleanly.
ddcExit (code: Nat#): Void#
 = do
        -- Free the space for the heaps.
        pHeapBaseA      = read# (global# [Addr#] "ddcHeapBase"#)     0#
        pHeapBackBaseA  = read# (global# [Addr#] "ddcHeapBackBase"#) 0#

        free pHeapBaseA
        free pHeapBackBaseA

        -- Use the system exit function to exit cleanly.
        exit code

