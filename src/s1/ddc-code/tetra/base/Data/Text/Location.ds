
module Data.Text.Location
export  { incLineOfLocation; incCharOfLocation
        ; endOfLocated; startOfLocated; valueOfLocated; rangeOfLocated
        ; show_Location; show_Located }
import Data.Text.Base
import Class.Show
where


-------------------------------------------------------------------------------
-- | A location in text string.
data Location where
        Location
         :  Nat         -- ^ Line number.
         -> Nat         -- ^ Column number.
         -> Location


-- | Increment the line count in a location.
incLineOfLocation (inc: Nat)
        ((Location nLine nChar): Location): Location
 = Location (nLine + inc) 1


-- | Increment the char count in a location.
incCharOfLocation (inc: Nat)
        ((Location nLine nChar): Location): Location
 = Location nLine (nChar + inc)


show_Location: Show Location
 =  Show $ \(Location nLine nCol)
 -> parens $ "Location" %% show nLine %% show nCol


-------------------------------------------------------------------------------
-- | A range of locations in a text string.
data LocationRange where
        LocationRange
         :  Location -> Location
         -> LocationRange


-------------------------------------------------------------------------------
-- | A thing with a source location.
data Located (a: Data) where
        Located
         :  Location    -- ^ Starting location.
         -> Location    -- ^ Ending location.
         -> a           -- ^ Located thing.
         -> Located a


endOfLocated   ((Located _ lEnd _): Located a): Location
 = lEnd

startOfLocated ((Located lStart _ _): Located a): Location
 = lStart

valueOfLocated ((Located _ _ x): Located a): a
 = x

rangeOfLocated
        ((Located lStart lEnd _): Located a)
        : LocationRange
 = LocationRange lStart lEnd


show_Located {Show a}: Show (Located a)
 =  Show $ \(Located lStart lEnd x)
 -> parens $ "Located" %% show lStart %% show lEnd %% show x