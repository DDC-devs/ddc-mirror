
module Class.Ord
export 
{       compare; lt; le; gt; ge;
        min; max;
        ord_Bool;
}
import Data.Numeric.Bool
where


-------------------------------------------------------------------------------
-- | Dictionary for ordering test.
data Ord (k: Data) where
        Ord     : (k -> k -> Ordering) -> Ord k


-- | Result of an ordering test.
data Ordering where
        LT      : Ordering
        GT      : Ordering
        EQ      : Ordering


-- | Compare the given values for ordering.
compare {(Ord compare'): Ord a} (x1 x2: a): Ordering
 = compare' x1 x2


-- | Check whether the first value is less than the second.
lt {(Ord compare'): Ord a} (x1 x2: a): Bool
 = case compare' x1 x2 of
        LT      -> True
        _       -> False


-- | Check whether the first value is less than or equal to the second.
le {(Ord compare'): Ord a} (x1 x2: a): Bool
 = case compare' x1 x2 of
        LT      -> True
        EQ      -> True
        _       -> False


-- | Check whether the first value is greater than the second.
gt {(Ord compare'): Ord a} (x1 x2: a): Bool
 = case compare' x1 x2 of
        GT      -> True
        _       -> False


-- | Check whether the first value is greater than or equal to the second.
ge {(Ord compare'): Ord a} (x1 x2: a): Bool
 = case compare' x1 x2 of
        GT      -> True
        EQ      -> True
        _       -> False


-------------------------------------------------------------------------------
-- Functions on ordered things.
min {Ord a} (x y: a): a
 = if x <= y    then x  else y

max {Ord a} (x y: a): a
 = if x >= y    then x  else y


-------------------------------------------------------------------------------
-- Dictionaries for primitive types.

-- | Ord dictionary for Bool.
ord_Bool: Ord Bool
 = Ord  compare'
 where  compare' True  True     = EQ
        compare' True  False    = GT
        compare' False True     = LT
        compare' False False    = EQ

