{-# OPTIONS -fwarn-unused-imports -fwarn-incomplete-patterns #-}

-- | Wrappers for compiler stages dealing with LLVM code.
module Main.Llvm
	(compileViaLlvm)
where

-- main stages
import Main.Setup
import Main.Sea
import Main.Util

import DDC.Base.DataFormat
import DDC.Base.Literal
import DDC.Main.Error
import DDC.Main.Pretty
import DDC.Var

import qualified Module.Scrape		as M
import qualified DDC.Main.Arg		as Arg
import qualified DDC.Config.Version	as Version

import Llvm
import LlvmM
import Llvm.Invoke
import Llvm.GhcReplace.Unique
import Llvm.Runtime
import Llvm.Util

import Sea.Exp
import Sea.Util				(eraseAnnotsTree)
import Sea.Pretty

import Util
import qualified Data.Map		as Map

import qualified Debug.Trace		as Debug

stage = "Main.Llvm"

debug = True

_trace s v
 =	if debug
	  then Debug.trace s v
	  else v


compileViaLlvm
	:: (?verbose :: Bool, ?pathSourceBase :: FilePath)
	=> Setup			-- ^ Compile setup.
	-> ModuleId			-- ^ Module to compile, must also be in the scrape graph.
	-> Tree ()			-- ^ The Tree for the module.
	-> FilePath			-- ^ FilePath of source file.
	-> [FilePath]			-- ^ C import directories.
	-> [FilePath]			-- ^ C include files.
	-> Map ModuleId [a]		-- ^ Module import map.
	-> Bool				-- ^ Module defines 'main' function.
	-> M.Scrape			-- ^ ScrapeGraph of this Module.
	-> Map ModuleId M.Scrape	-- ^ Scrape graph of all modules reachable from the root.
	-> Bool				-- ^ Whether to treat a 'main' function defined by this module
					--	as the program entry point.
	-> IO Bool

compileViaLlvm
	setup modName eTree pathSource importDirs includeFilesHere importsExp
	modDefinesMainFn sRoot scrapes_noRoot blessMain
 = do
	let ?args		= setupArgs setup

	outVerb $ ppr $ "  * Write C header\n"
	writeFile (?pathSourceBase ++ ".ddc.h")
		$ makeSeaHeader
			eTree
			pathSource
			(map ((\(Just f) -> f) . M.scrapePathHeader)
					$ Map.elems scrapes_noRoot)
			includeFilesHere

	outVerb $ ppr $ "  * Generating LLVM IR code\n"
	llvmSource	<- outLlvm modName eTree pathSource

	writeFile (?pathSourceBase ++ ".ddc.ll")
			$ ppLlvmModule llvmSource

	invokeLlvmCompiler ?pathSourceBase []
	invokeLlvmAssembler ?pathSourceBase []

	return modDefinesMainFn


-- | Create LLVM source files
outLlvm
	:: (?args :: [Arg.Arg])
	=> ModuleId
	-> (Tree ())		-- sea source
	-> FilePath		-- path of the source file
	-> IO LlvmModule

outLlvm moduleName eTree pathThis
 = do
	-- Break up the sea into parts.
	let 	([ 	_seaProtos, 		seaSupers
		 , 	_seaCafProtos,		seaCafSlots,		seaCafInits
		 ,	_seaData
		 , 	_seaHashDefs ], junk)

		 = partitionFs
			[ (=@=) PProto{}, 	(=@=) PSuper{}
			, (=@=) PCafProto{},	(=@=) PCafSlot{},	(=@=) PCafInit{}
			, (=@=) PData{}
			, (=@=) PHashDef{} ]
			eTree

	when (not $ null junk)
	 $ panic "Main.Llvm" $ "junk sea bits = " ++ show junk ++ "\n"

	-- Build the LLVM code
	let comments =	[ "---------------------------------------------------------------"
			, "      source: " ++ pathThis
			, "generated by: " ++ Version.ddcName
			, "" ]

	let aliases = [ ("struct.Obj", ddcObj) ]

	let code = seaCafInits ++ seaSupers

	let fwddecls	= [panicOutOfSlots, allocCollect, force]

	let globals	= moduleGlobals
			++ (catMap llvmOfSeaGlobal $ eraseAnnotsTree seaCafSlots)

	decls		<- catMapM llvmOfSeaDecls $ eraseAnnotsTree code

	return $ LlvmModule comments aliases globals fwddecls decls




llvmOfSeaDecls :: Top (Maybe a) -> IO [LlvmFunction]
llvmOfSeaDecls (PCafInit v t ss)
 = panic stage "Implement 'llvmOfSeaDecls (PCafInit v t ss)'"


llvmOfSeaDecls (PSuper v p t ss)
 = do	blocks	<- evalStateT (llvmOfFunc ss) (Nothing, [[]])
	return $ [
		LlvmFunction
		(LlvmFunctionDecl (seaVar False v) External CC_Ccc (toLlvmType t) FixedArgs (map llvmOfParams p) Nothing)
		(map (seaVar True . fst) p)	-- funcArgs
		[]				-- funcAttrs
		Nothing				-- funcSect
		[ LlvmBlock (fakeUnique "entry") blocks ]
		]

llvmOfSeaDecls x
 = panic stage $ "Implement 'llvmOfSeaDecls (" ++ show x ++ ")'"



llvmOfParams :: (Var, Type) -> LlvmParameter
llvmOfParams (v, t) = (toLlvmType t, [])


llvmOfSeaGlobal :: Top (Maybe a) -> [LMGlobal]
llvmOfSeaGlobal (PCafSlot v t)
 | t == TPtr (TPtr TObj)
 =	let	tt = toLlvmType t
		var = LMGlobalVar
 			("_ddcCAF_" ++ seaVar False v)	-- Variable name
			tt				-- LlvmType
			ExternallyVisible		-- LlvmLinkageType
			Nothing				-- LMSection
			ptrAlign			-- LMAlign
			False				-- LMConst
	in [(var, Just (LMStaticLit (LMNullLit tt)))]

 | otherwise
 = panic stage $ "llvmOfSeaGlobal on : \n\tVar  : " ++ seaVar False v ++ "\n\tType : " ++ show t

llvmOfSeaGlobal x
 = panic stage $ "llvmOfSeaGlobal on : " ++ show x

moduleGlobals :: [LMGlobal]
moduleGlobals
 = 	[ ( ddcSlotPtr	, Nothing )
	, ( ddcSlotMax	, Nothing )
	, ( ddcSlotBase	, Nothing )
	, ( ddcHeapPtr	, Nothing )
	, ( ddcHeapMax	, Nothing ) ]


llvmOfFunc :: [Stmt a] -> LlvmM [LlvmStatement]
llvmOfFunc []
 = return [Return Nothing]

llvmOfFunc ss
 = do	mapM llvmOfStmt ss
	(Nothing, blks) <- get
	-- At end of function reverse the list of blocks and then
	-- concatenate the blocks to produce a list of statements.
	return $ concat $ reverse blks


llvmOfStmt :: Stmt a -> LlvmM ()
llvmOfStmt stmt
 = case stmt of
	SBlank		-> addComment "Blank"
	SEnter n	-> runtimeEnter n
	SLeave n	-> runtimeLeave n
	SComment s	-> addComment s
	SGoto loc	-> addBlock [Branch (LMNLocalVar (seaVar False loc) LMLabel)]
	SAssign v1 t v2 -> llvmOfAssign v1 t v2
	SReturn v	-> llvmOfReturn v
	SLabel l	-> branchLabel (seaVar False l)

	-- LLVM is SSA so auto variables do not need to be declared.
	SAuto v t	-> addComment $ "SAuto " ++ seaVar True v ++ " " ++ show t

	_
	  -> panic stage $ "llvmOfStmt " ++ (take 150 $ show stmt)

--------------------------------------------------------------------------------

llvmOfAssign :: Exp a -> Type -> Exp a -> LlvmM ()
llvmOfAssign (XVar v1 t1) t (XVar v2 t2)
 | t1 == TPtr (TPtr TObj) && t2 == TPtr (TPtr TObj) && t == TPtr (TPtr TObj)
	&& isGlobalVar v1 && isGlobalVar v2
 = do	src	<- lift $ newUniqueReg (toLlvmType t1)
	addBlock $
		[ Assignment src (loadAddress (toLlvmVar v2 t2))
		, Store src (pVarLift (toLlvmVar v1 t1)) ]

llvmOfAssign (XVar v1 t1) t x@(XPrim op args)
 | t1 == TPtr (TPtr TObj) && t == TPtr (TPtr TObj)
 = do	dstreg		<- llvmOfXPrim (toLlvmType t) op args
	addBlock	[ Store dstreg (pVarLift (toLlvmVar v1 t1)) ]

llvmOfAssign (XSlot v1 t1 i) t (XVar v2 t2)
 | t1 == TPtr TObj && t2 == TPtr TObj && t == TPtr TObj
 =	writeSlot (toLlvmVar v2 t2) i

llvmOfAssign (XVar v1 t1) t (XSlot v2 t2 i)
 | t1 == TPtr TObj && t2 == TPtr TObj && t == TPtr TObj
 = do	let dst		= toLlvmVar v1 t1
	readSlotVar i dst

llvmOfAssign a@((XSlot v1 t1 i)) t c@(XBox t2 exp)
 | t1 == TPtr TObj && t == TPtr TObj
 = do	boxed		<- boxExp exp
	writeSlot	boxed i

llvmOfAssign (XVar v1 t1) (TCon vt _) x@(XPrim op args)
 | varName vt == "Int32#"
 = do	lift $ putStrLn $ "llvmOfAssign Int32#"
	dstreg		<- llvmOfXPrim i32 op args
	addBlock	[ Store dstreg (pVarLift (toLlvmVar v1 t1)) ]


llvmOfAssign a b c
 = panic stage $ "Unhandled : llvmOfAssign \n"
	++ take 150 (show a) ++ "\n"
	++ take 150 (show b) ++ "\n"
	++ take 150 (show c) ++ "\n"



boxExp :: Exp a -> LlvmM LlvmVar
boxExp (XLit lit@(LiteralFmt (LInt value) (UnboxedBits 32)))
 =	boxInt32 $ i32LitVar value

boxExp (XPrim op args)
 = do	calc	<- llvmOfXPrim pObj op args
	boxInt32 calc

boxExp x
 = panic stage $ "Unhandled : boxExp " ++ take 30 (show x)


--------------------------------------------------------------------------------

-- LLVM does not allow implicit fall through to a label, so explicitly branch
-- to the label immediately following.
branchLabel :: String -> LlvmM ()
branchLabel name
 = do	let label = fakeUnique name
	addBlock [Branch (LMLocalVar label LMLabel), MkLabel label]

--------------------------------------------------------------------------------

llvmOfReturn :: Exp a -> LlvmM ()
llvmOfReturn (XVar v t)
 =	addBlock [ Return (Just (toLlvmVar v t)) ]

llvmOfReturn x
 = 	panic stage $ "llvmOfReturn " ++ (takeWhile (/= ' ') (show x))

--------------------------------------------------------------------------------

primMapFunc
	:: LlvmType
	-> (LlvmVar -> LlvmVar -> LlvmExpression)
	-> LlvmVar
	-> Exp a
	-> LlvmM LlvmVar

primMapFunc t build sofar exp
 = do	val		<- llvmVarOfExp exp
	dst		<- lift $ newUniqueNamedReg "prim.fold" (getVarType val)
	addBlock	[ Assignment dst (build sofar val) ]
	return		dst


llvmOfXPrim :: LlvmType -> Prim -> [Exp a] -> LlvmM LlvmVar
llvmOfXPrim t op args
 = case args of
	[]	-> panic stage "llvmOfXPrim : empty list"
	[x]	-> panic stage "llvmOfXPrim : singleton list"

	x : xs
	 -> do	dst	<- llvmVarOfExp x
		foldM (primMapFunc t (llvmOpOfPrim op)) dst xs



llvmVarOfExp :: Exp a -> LlvmM LlvmVar
llvmVarOfExp (XVar v t)
 = do	reg	<- lift $ newUniqueReg $ toLlvmType t
	addBlock [ Comment ["llvmVarOfExp (XVar v t)"], Assignment reg (Load (toLlvmVar v t)) ]
	return	reg

llvmVarOfExp (XInt i)
 = do	reg	<- lift $ newUniqueReg i32
	addBlock [ Comment ["llvmVarOfExp (XInt i)"], Assignment reg (Load (llvmWordLitVar i)) ]
	return	reg


llvmVarOfExp (XUnbox _ (XVar v t))
 = do	addComment "llvmVarOfExp (XUnbox _ (XVar v t))"
	unboxInt32 (toLlvmVar v t)

llvmVarOfExp (XUnbox _ (XSlot v t i))
 = do	addComment "llvmVarOfExp (XUnbox _ (XSlot v t i))"
	objptr	<- readSlot i
	unboxInt32 objptr

llvmVarOfExp (XUnbox t (XForce (XSlot v vt i)))
 = do	orig	<- readSlot i
	forced	<- forceObj orig
	unboxInt32 forced


llvmVarOfExp x
 = panic stage $ "llvmVarOfExp " ++ show x




llvmOpOfPrim :: Prim -> (LlvmVar -> LlvmVar -> LlvmExpression)
llvmOpOfPrim p
 = case p of
	FAdd	-> LlvmOp LM_MO_Add
	FSub	-> LlvmOp LM_MO_Sub
	_	-> panic stage $ "llvmOpOfPrim : Unhandled op : " ++ show p


-- | Convert a Sea type to an LlvmType.
toLlvmType :: Type -> LlvmType
toLlvmType (TPtr t)	= LMPointer (toLlvmType t)
toLlvmType TObj		= structObj
toLlvmType TVoid	= LMVoid

toLlvmType (TCon v _)
 | varName v == "Int32#"
 = i32

toLlvmType t		= panic stage $ "toLlvmType " ++ show t ++ "\n"


-- | Convert a Sea Var (wit a Type) to a typed LlvmVar.
toLlvmVar :: Var -> Type -> LlvmVar
toLlvmVar v t
 = case isGlobalVar v of
	True -> LMGlobalVar (seaVar False v) (toLlvmType t) External Nothing Nothing False
	False -> LMNLocalVar (seaVar True v) (toLlvmType t)


-- | Does the given Sea variable have global scope? TODO: Move this to the Sea stuff.
isGlobalVar :: Var -> Bool
isGlobalVar v
 -- If the variable is explicitly set as global use the given name.
 | bool : _	<- [global | ISeaGlobal global <- varInfo v]
 = bool

 | otherwise
 = False

{-
llvmIntLitVar :: LiteralFmt -> LlvmVar
llvmIntLitVar (LiteralFmt (LInt i) (UnboxedBits 32)) = i32LitVar i
llvmIntLitVar (LiteralFmt (LInt i) (UnboxedBits 64)) = i64LitVar i

llvmIntLitVar _ = panic stage $ "llvmIntLitVar : unhandled case."
-}
