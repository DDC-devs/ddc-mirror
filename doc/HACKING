-- Hacking ---------------------------------------------------------------------

  * Tools
    If you change src/Source/Lexer.x or Parser.y then you will need 
            Alex   http://www.haskell.org/alex
       and  Happy  http://www.haskell.org/happy

  * Build Flavours
    Set 'BuildFlavour' in make/config.mk file to 'devel' for faster builds.

  * Building
    Use the bin/ddc make target to avoid trying to recompile the runtime system
    and external libs each time around.
     
     > make bin/ddc

  * Dumping code at a particular stage.
  
     > bin/ddc -help dump
     > bin/ddc -c library/Data/List.ds -no-implicit-prelude -dump-core-prim
     > $(EDIT) library/Data/List.dump-core-prim.dc

  * Syntax highlighting
    Syntax highlighting makes a BIG difference when trying to read the core files.
    Set your editor to detect the sort of variable and set the color accordingly.

    On Linux I use nedit  http://www.nedit.org  because it has regexp based syntax
    highlighting, and doesn't annoy me too much.
    
       sort          prefix      suggested colour 
                                (looks ok with black background)

       Plain         none        grey70
       Constructors  upper case  #8080ff    (blue-ish)
       Types         *           grey70
       Effects       !           #ff5080    (red-ish)
       Regions       %           #80ff50    (green-ish)
       Closures      $           #ff8000    (orange-ish)
       Classes       +           cyan
       
       Keywords: (I set these to white)
         foreign import module elaborate const mutable extern forall 
	 infixr infixl infix data effect region class instance project
	 let in where case of match if then else do while when unless break
	 throw try catch with 

       Symbols and Parens (also set to white)

  * Running tests
    
    Use bin/war2 to attempt specific tests:

     > bin/war2 test/15-Typing/Complexity/Complex1
  

    Use bin/war to compare optimised and non-optimised builds:

     > bin/war demo/Graphics/N-Body/Unboxed -with -with O


    Use bin/churn to compile random programs to look for compiler panics.
        Programs which triggered a panic end up in tools/churn/scratch.
        You'll need to 'killall churn' to end it.


  * Cleaning up
  
       make clean                 - clean everything.
       make cleanWar              - just clean up ./library (including dump files).
       make cleanRuntime          - just clean up the runtime system.
	
--------------------------------------------------------------------------------
