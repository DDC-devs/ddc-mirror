% Disciple Core Types.
%

metavar typevar, X      ::= 


%% Type expressions.
grammar
T :: 'T_'       ::=
  | X                   ::      :: Var          {{ com Type variables.                          }}
  | C                   ::      :: Con          {{ com Type constructors.                       }}
  | [ X : K ] . T       ::      :: Forall       {{ com Universal quantification.                }}
  | T1 T2               ::      :: App          {{ com Type application.                        }}
  | T1 + T2             ::      :: Sum          {{ com Type summation.                          }}

  | ( T )               :: S    :: Paren        {{ com Allow types to be wrapped in parens.     }}
  | { T1 / X } T2       :: M    :: Sub          {{ com Substitution of types in types.          }}


%% Type constructors.
C :: 'C_'       ::=
  % Witness type constructors.
  | =>                  ::      :: Impl         % Witness implication.
  | Pure                ::      :: Pure         % Purity of some effect.
  | Empty               ::      :: Empty        % Emptiness  of some closure.
  | Global              ::      :: Global       % Globalness of some region.
  | DeepGlobal          ::      :: DeepGlobal   % Globalness of material regions in some type.
  | Const               ::      :: Const        % Constancy  of a region.
  | DeepConst           ::      :: DeepConst    % Constancy  of material regions in some type.
  | Mutable             ::      :: Mutable      % Mutability of a region.
  | DeepMutable         ::      :: DeepMutable  % Mutability of material regions in some type.
  | Distinct            ::      :: Distinct     % Distinctness of two regions.
  | Lazy                ::      :: Lazy         % Laziness of some region.
  | HeadLazy            ::      :: HeadLazy     % Laziness of the primary region in some type.
  | Manifest            ::      :: Manifest     % Manifestness of some region (not lazy).
  | Disjoint            ::      :: Disjoint     % Disjointness of two effects.

  % Computation type constructors.
  | ->                  ::      :: Fun          % The function type constructor.
  | Unit                ::      :: Unit         % The unit type constructor.

  | !0                  ::      :: ZeroEff      % The least effect (pure)
  | Read                ::      :: Read         % Read from a region.
  | HeadRead            ::      :: HeadRead     % Read     from the primary region of some type.
  | DeepRead            ::      :: DeepRead     % Read     from material regions in some type.
  | Write               ::      :: Write        % Write      to a region.
  | DeepWrite           ::      :: DeepWrite    % Write      to material regions in some type.
  | Alloc               ::      :: Alloc        % Allocate into a region.
  | DeepAlloc           ::      :: DeepAlloc    % Allocate into material region sin some type.

  | $0                  ::      :: ZeroClo      % The least closure (empty)
  | Use                 ::      :: Use          % Use some region in a closure.
  | DeepUse             ::      :: DeepUse      % Use all regions from a type in a closure.


%% Kind environments.
KiEnv :: 'KiEnv_'       ::=
  | KE                  ::      :: Var          % A kind environment variable.
  | empty               ::      :: Empty        % An empty kind environment.
  | KiEnv , X : K       ::      :: Extend       % A kind environment with a new binding.


terminals :: 'terminals_' ::=
  | =>                  ::      :: Impl
  | ->                  ::      :: Fun


defns
JKind   :: '' ::=

 %% Type variables in kind environments.
 defn
 X : K in KiEnv                                 ::      :: KindEnvIn    :: '' by

        ------------------                      :: In
        X : K in KE, X : K

        X : K in KE
        --------------------                    :: Next
        X : K in KE, X' : K'


 %% Kinds of types
 defn
 KiEnv |- T : K                                 ::      :: Kind         :: '' by

        % Functional things.
        % These come from the ambient System-F2 calculus.

         X : K in KE
        --------------                          :: KiVar
         KE |- X  : K

         KE, X : K |- T : *
        ----------------------------------      :: KiForall
         KE        |- [ X : K ] . T  :  *    

         KE |- T1    : K11 ~> K12
         KE |- T2    : K11
        ----------------------------------      :: KiApp
         KE |- T1 T2 : K12


        % Sums.
        % Only effect and closure types can be collected into a sum.

         KE |- T1      : !
         KE |- T2      : !
        -------------------                     :: KiSumEff
         KE |- T1 + T2 : !

         KE |- T1      : $
         KE |- T2      : $
        -------------------                     :: KiSumClo
         KE |- T1 + T2 : $

        --------------                          :: KiZeroEff
         KE |- !0 : !

        --------------                          :: KiZeroClo
         KE |- $0 : $


        % Baked in type constructors.
        % These have special meaning in the core language.

         KE |- T1 : @
         KE |- T2 : @
        ------------------------------          :: KiImplWit
         KE |- T1 => T2 : @ 

         KE |- T1 : @
         KE |- T2 : *
        ------------------------------          :: KiImplVal
         KE |- T1 => T2 : *

        --------------------------------        :: KiPure
         KE |- Pure             : ! ~> @

        --------------------------------        :: KiEmpty
         KE |- Empty            : $ ~> @

        --------------------------------        :: KiGlobal
         KE |- Global           : $ ~> @

        --------------------------------        :: KiDeepGlobal
         KE |- DeepGlobal       : * ~> @

        --------------------------------        :: KiConst
         KE |- Const            : % ~> @

        --------------------------------        :: KiDeepConst
         KE |- DeepConst        : * ~> @

        --------------------------------        :: KiMutable
         KE |- Mutable          : % ~> @

        --------------------------------        :: KiDeepMutable
         KE |- DeepMutable      : * ~> @

        --------------------------------        :: KiDistinct
         KE |- Distinct    : % ~> % ~> @

        --------------------------------        :: KiLazy
         KE |- Lazy             : % ~> @

        --------------------------------        :: KiHeadLazy
         KE |- HeadLazy         : * ~> @

        --------------------------------        :: KiManifest
         KE |- Manifest         : % ~> @

        ---------------------------------       :: KiDisjoint
         KE |- Disjoint    : % ~> % ~> @


        -------------------------------------   :: KiFun
         KE |- ->      : * ~> ! ~> $ ~> * ~> *

        --------------------------------        :: KiUnit
         KE |- Unit             : *

        --------------------------------        :: KiRead
         KE |- Read             : % ~> !

        --------------------------------        :: KiHeadRead
         KE |- HeadRead         : * ~> !

        --------------------------------        :: KiDeepRead
         KE |- DeepRead         : * ~> !

        --------------------------------        :: KiWrite
         KE |- Write            : % ~> !

        --------------------------------        :: KiDeepWrite
         KE |- DeepWrite        : * ~> !

        --------------------------------        :: KiAlloc
         KE |- Alloc            : % ~> !

        --------------------------------        :: KiDeepAlloc
         KE |- DeepAlloc        : * ~> !

        --------------------------------        :: KiUse
         KE |- Use              : % ~> $

        --------------------------------        :: KiDeepUse
         KE |- DeepUse          : * ~> $

