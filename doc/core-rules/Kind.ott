% Disciple Core Kinds.
% 

grammar

%% Sort expressions.
S :: 'S_' ::=
  | @@                  ::      :: Prop         % The sort of witness kinds.
  | **                  ::      :: Comp         % The sort of computation kinds.


%% Kind expressions.
K :: 'K_' ::=
  | *                   ::      :: Val          % The kind of value types.
  | %                   ::      :: Rgn          % The kind of region types.
  | !                   ::      :: Eff          % The kind of effect types.
  | $                   ::      :: Clo          % The kind of closure types.
  | @                   ::      :: Wit          % The kind of witnesses.
  | K1 ~> K2            ::      :: Fun          % The function kind.

  | ( K )               ::      :: Paren        % Allow kinds to be wrapped in parens.


%% Kind environments.
KiEnv :: 'KiEnv_'       ::=
  | KE                  ::      :: Var          % A kind environment variable.
  | empty               ::      :: Empty        % An empty kind environment.
  | KiEnv , X : K       ::      :: Extend       % A kind environment with a new binding.


%% Type variables in kind environments.
defns
JKindEnv :: ''  ::=
 defn
 X : K in KiEnv                 ::      :: KindEnvIn    :: '' by

        ------------------      :: KindEnvIn
        X : K in KE, X : K

        X : K in KE
        --------------------    :: KindEnvNext
        X : K in KE, X' : K'


%% Sorts of kinds.
defns
JSort   :: ''   ::=
  defn
  K : S                         ::      :: Sort         :: '' by  

        ---------               :: SoVal
         * : **

%       ---------               :: SoRgn
%        % : **
% TODO: how do we escape this?

        ---------               :: SoEff
         ! : **

        ---------               :: SoClo
         $ : **

        ---------               :: SoWit
         @ : @@

             K2 : S1
        -----------------       :: SoFun
         K1 ~> K2 : S1
