

% Sorts %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Sorts classify kinds.

grammar
S :: 'S_' ::=
  | @@                  ::      :: Prop         {{ com The sort of witness kinds.               }}
  | **                  ::      :: Comp         {{ com The sort of computation kinds.           }}


% Kinds %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Kinds classify typess.

grammar
K :: 'K_' ::=
  | *                   ::      :: Val          {{ com The kind of value types.                 }}
  | %                   ::      :: Rgn          {{ com The kind of region types.                }}
  | !                   ::      :: Eff          {{ com The kind of effect types.                }}
  | $                   ::      :: Clo          {{ com The kind of closure types.               }}
  | @                   ::      :: Wit          {{ com The kind of witnesses.                   }}
  | K1 ~> K2            ::      :: Fun          {{ com The function kind.                       }}

  | ( K )               ::      :: Paren        {{ com Allow kinds to be wrapped in parens.     }}


% Kind environments.
metavar typevar, X      ::= 

grammar
KiEnv :: 'KiEnv_'       ::=
  | KE                  ::      :: Var          {{ com A kind environment variable.             }}
  | empty               ::      :: Empty        {{ com An empty kind environment.               }}
  | KiEnv , X : K       ::      :: Extend       {{ com A kind environment with a new binding.   }}


%% Bind in Kind Environment %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
JInKiEnv :: ''          ::=
 defn
 X : K in KiEnv         :: :: InKiEnv   :: '' by

        ------------------      :: InKiEnvNil
        X : K in KE, X : K

        X : K in KE
        --------------------    :: InKiEnvCons
        X : K in KE, X' : K'


%% Sorts of Kinds %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
JSoJudge   :: ''        ::=
  defn
  K : S                 ::  :: SoJudge  :: '' by  


        ---------               :: SoVal
         * : **

%       ---------               :: SoRgn
%        % : **
% TODO: how do we escape the percent sign?

        ---------               :: SoEff
         ! : **

        ---------               :: SoClo
         $ : **

        ---------               :: SoWit
         @ : @@

             K2 : S1
        -----------------       :: SoFun
         K1 ~> K2 : S1

